---
import { getCollection } from 'astro:content';
import BaseLayout from '@/layouts/BaseLayout.astro';
import MainLayout from '@/layouts/MainLayout.astro';
import { Card, CardContent, CardHeader } from '@/components/ui/Card';
import { Badge } from '@/components/ui/Badge';
import ProfessionalTable from '@/components/table/ProfessionalTable.astro';
import TableRow2Col from '@/components/table/TableRow2Col.astro';
import TableRow from '@/components/table/TableRow.astro';

export async function getStaticPaths() {
  const mcus = await getCollection('mcu');
  return mcus.map((mcu) => ({
    params: { slug: mcu.id },
    props: { mcu },
  }));
}

const { mcu } = Astro.props;
const { data } = mcu;

const allControllers = await getCollection('controllers');
const manufacturers = await getCollection('manufacturers');
const manufacturerMap = new Map(manufacturers.map((manufacturer) => [manufacturer.id, manufacturer]));

const controllersUsingMcu = allControllers.filter((controller) => controller.data.mcu === mcu.id);

const controllersGroupedByBrand = Array.from(
  controllersUsingMcu.reduce((accumulator, controller) => {
    const brandId = controller.data.brand || 'unknown';
    const existingGroup = accumulator.get(brandId) ?? [];

    existingGroup.push(controller);
    accumulator.set(brandId, existingGroup);

    return accumulator;
  }, new Map<string, typeof controllersUsingMcu>())
)
  .map(([brandId, controllers]) => ({
    brandName:
      manufacturerMap.get(brandId)?.data?.name ||
      manufacturerMap.get(brandId)?.data?.title ||
      brandId,
    controllers: controllers.sort((a, b) => a.data.title.localeCompare(b.data.title)),
  }))
  .sort((a, b) => a.brandName.localeCompare(b.brandName));

const clockMhz =
  data.clock_mhz ??
  data.clock_speed_mhz ??
  data.frequency_mhz ??
  (typeof data.clock_speed === 'number' ? data.clock_speed : undefined);

const flashKb =
  data.flash_kb ??
  (typeof data.flash_mb === 'number' ? data.flash_mb * 1024 : undefined) ??
  (typeof data.flash === 'number' ? data.flash : undefined);

const ramKb =
  data.sram_kb ??
  data.ram_kb ??
  (typeof data.ram_mb === 'number' ? data.ram_mb * 1024 : undefined);

const basePath = import.meta.env.BASE_URL.replace(/\/$/, '');
const editPath = `src/content/mcu/${mcu.id}.yaml`;
const mcuTitle = data.name || data.title || mcu.id;
const manufacturerName = data.manufacturer || 'Unknown manufacturer';
const canonicalUrl = Astro.site
  ? new URL(`mcu/${mcu.id}`, Astro.site).toString()
  : `${basePath}/mcu/${mcu.id}`;
const mcuSummary = data.notes
  ? data.notes
  : `${mcuTitle} microcontroller from ${manufacturerName}${data.architecture ? ` using the ${data.architecture}` : ''}.`;
---

<BaseLayout
  title={`${data.name || data.title || mcu.id} - MCUs - FCBase`}
  description={`Technical profile for ${data.name || data.title || mcu.id}. ${data.manufacturer ? `Manufactured by ${data.manufacturer}. ` : ''}${data.architecture ? `Architecture: ${data.architecture}. ` : ''}${data.notes || ''}`}
>
  <Fragment slot="head">
    <link rel="canonical" href={canonicalUrl} />
    <meta name="pagefind:meta:id" content={mcu.id} />
    <meta name="pagefind:meta:type" content="mcu" />
    <meta name="pagefind:filter:type" content="mcu" />
    <meta name="pagefind:meta:title" content={mcuTitle} />
    <meta name="pagefind:meta:manufacturer" content={manufacturerName} />
    {data.family && <meta name="pagefind:meta:family" content={data.family} />}
    {data.architecture && <meta name="pagefind:meta:architecture" content={data.architecture} />}
    <meta name="pagefind:meta:summary" content={mcuSummary} />
    <meta name="pagefind:meta:url" content={canonicalUrl} />
  </Fragment>
  <MainLayout editPath={editPath} showEditBar>
    <div class="container py-8">
      <nav class="mb-6 flex items-center gap-2 text-sm text-muted-foreground">
        <a href={`${basePath}/`} class="hover:text-foreground transition-colors">Home</a>
        <span>/</span>
        <a href={`${basePath}/mcu`} class="hover:text-foreground transition-colors">MCUs</a>
        <span>/</span>
        <span class="text-foreground">{data.name || data.title || mcu.id}</span>
      </nav>

      <div class="mb-6">
        <h1 class="text-3xl font-bold tracking-tight mb-2">{data.name || data.title || mcu.id}</h1>
        {(data.manufacturer || data.architecture) && (
          <p class="text-base text-muted-foreground mb-2">
            {[data.manufacturer, data.architecture].filter(Boolean).join(' • ')}
          </p>
        )}
        {data.notes && <p class="text-sm text-muted-foreground max-w-3xl">{data.notes}</p>}
      </div>

      <div class="grid gap-6 lg:grid-cols-3">
        <Card class="lg:col-span-2">
          <CardHeader>
            <h2 class="text-base font-bold uppercase tracking-wide text-primary">Technical Specifications</h2>
          </CardHeader>
          <CardContent class="pt-0">
            <ProfessionalTable>
              {(data.manufacturer || data.architecture) && (
                <TableRow2Col
                  label1="Manufacturer"
                  value1={data.manufacturer || '—'}
                  label2="Architecture"
                  value2={data.architecture || '—'}
                />
              )}
              
              {(clockMhz || flashKb) && (
                <TableRow2Col
                  label1="Clock"
                  value1={clockMhz ? `${clockMhz} MHz` : '—'}
                  label2="Flash"
                  value2={flashKb
                    ? flashKb >= 1024
                      ? `${(flashKb / 1024).toFixed(0)} MB`
                      : `${flashKb} KB`
                    : '—'}
                  mono1
                  mono2
                />
              )}
              
              {(ramKb || Array.isArray(data.features)) && (
                <TableRow2Col
                  label1="RAM"
                  value1={ramKb ? (ramKb >= 1024 ? `${(ramKb / 1024).toFixed(0)} MB` : `${ramKb} KB`) : '—'}
                  label2="Features"
                  mono1
                >
                  <Fragment slot="value2">
                    {Array.isArray(data.features) && data.features.length > 0 ? (
                      <ul class="list-disc pl-4 space-y-1 text-sm text-muted-foreground">
                        {data.features.map((feature) => (
                          <li key={feature}>{feature}</li>
                        ))}
                      </ul>
                    ) : (
                      <span class="text-muted-foreground">—</span>
                    )}
                  </Fragment>
                </TableRow2Col>
              )}
              
              {Array.isArray(data.sources) && data.sources.length > 0 && (
                <TableRow label="Sources">
                  <div class="flex flex-wrap gap-2">
                    {data.sources.map((sourceId) => (
                      <Badge variant="outline" className="text-xs uppercase" key={sourceId}>{sourceId}</Badge>
                    ))}
                  </div>
                </TableRow>
              )}
            </ProfessionalTable>
          </CardContent>
        </Card>

        {controllersUsingMcu.length > 0 && (
          <Card>
            <CardHeader>
              <h2 class="text-base font-bold uppercase tracking-wide text-primary">Usage Overview</h2>
            </CardHeader>
            <CardContent class="pt-0">
              <div class="space-y-2 text-sm">
                <div class="flex items-center justify-between">
                  <span class="text-muted-foreground uppercase text-xs">Controllers</span>
                  <span class="font-semibold">{controllersUsingMcu.length}</span>
                </div>
                {clockMhz && (
                  <div class="flex items-center justify-between">
                    <span class="text-muted-foreground uppercase text-xs">Clock</span>
                    <span class="font-mono font-semibold">{clockMhz} MHz</span>
                  </div>
                )}
                {flashKb && (
                  <div class="flex items-center justify-between">
                    <span class="text-muted-foreground uppercase text-xs">Flash</span>
                    <span class="font-mono font-semibold">
                      {flashKb >= 1024 ? `${(flashKb / 1024).toFixed(0)} MB` : `${flashKb} KB`}
                    </span>
                  </div>
                )}
                {ramKb && (
                  <div class="flex items-center justify-between">
                    <span class="text-muted-foreground uppercase text-xs">RAM</span>
                    <span class="font-mono font-semibold">
                      {ramKb >= 1024 ? `${(ramKb / 1024).toFixed(0)} MB` : `${ramKb} KB`}
                    </span>
                  </div>
                )}
              </div>
            </CardContent>
          </Card>
        )}
      </div>

      <div class="mt-10">
        <h2 class="text-xl font-bold tracking-tight mb-4 uppercase text-primary">Controllers Using This MCU</h2>
        {controllersUsingMcu.length > 0 ? (
          <div class="space-y-6">
            {controllersGroupedByBrand.map(({ brandName, controllers }) => (
              <section class="space-y-3">
                <h3 class="text-sm font-semibold uppercase tracking-wide text-muted-foreground">{brandName}</h3>
                <div class="grid gap-3 sm:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4">
                  {controllers.map((controller) => (
                    <a href={`${basePath}/controllers/${controller.id}`} class="group block">
                      <Card class="h-full transition-all hover:shadow-lg hover:-translate-y-1 border-2 hover:border-primary/30">
                        <CardContent class="pt-4 pb-3 px-3">
                          <h3 class="font-bold text-sm mb-1.5 line-clamp-2 group-hover:text-primary transition-colors">
                            {controller.data.title}
                          </h3>
                          <p class="text-xs text-muted-foreground mb-2.5 font-medium">{brandName}</p>
                          <div class="flex flex-wrap gap-1 mb-2.5">
                            <Badge variant="outline" className="text-xs px-1.5 py-0.5 font-mono font-semibold">
                              {controller.data.mcu.replace('stmicro-', '').toUpperCase()}
                            </Badge>
                            <Badge variant="outline" className="text-xs px-1.5 py-0.5 font-medium">
                              {controller.data.mounting}
                            </Badge>
                          </div>
                          <p class="text-xs text-muted-foreground font-mono font-semibold">
                            {controller.data.io.uarts}U • {controller.data.io.can || 0}C • {controller.data.io.pwm || 0}PWM
                          </p>
                        </CardContent>
                      </Card>
                    </a>
                  ))}
                </div>
              </section>
            ))}
          </div>
        ) : (
          <div class="text-center py-8 bg-muted/30 rounded-lg border-2 border-dashed border-muted">
            <p class="text-sm text-muted-foreground font-medium">No controllers using this MCU in the database yet.</p>
          </div>
        )}
      </div>
    </div>
  </MainLayout>
</BaseLayout>
