---
import { getCollection } from 'astro:content';
import BaseLayout from '@/layouts/BaseLayout.astro';
import MainLayout from '@/layouts/MainLayout.astro';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/Card';
import { Badge } from '@/components/ui/Badge';

const allMcus = await getCollection('mcu');
const controllers = await getCollection('controllers');

const mcusWithStats = allMcus
  .map((mcu) => {
    const controllerCount = controllers.filter((controller) => controller.data.mcu === mcu.id).length;

    const clockMhz =
      mcu.data.clock_mhz ??
      mcu.data.clock_speed_mhz ??
      mcu.data.frequency_mhz ??
      (typeof mcu.data.clock_speed === 'number' ? mcu.data.clock_speed : undefined);

    const flash =
      mcu.data.flash_kb ??
      (typeof mcu.data.flash_mb === 'number' ? mcu.data.flash_mb * 1024 : undefined) ??
      (typeof mcu.data.flash === 'number' ? mcu.data.flash : undefined);

    const ram =
      mcu.data.sram_kb ??
      mcu.data.ram_kb ??
      (typeof mcu.data.ram_mb === 'number' ? mcu.data.ram_mb * 1024 : undefined);

    return {
      ...mcu,
      controllerCount,
      stats: {
        clockMhz,
        flash,
        ram,
      },
    };
  })
  .sort((a, b) => {
    const manufacturerA = a.data.manufacturer || a.data.name || a.id;
    const manufacturerB = b.data.manufacturer || b.data.name || b.id;
    const nameA = a.data.name || a.id;
    const nameB = b.data.name || b.id;

    const manufacturerCompare = manufacturerA.localeCompare(manufacturerB);
    if (manufacturerCompare !== 0) return manufacturerCompare;
    return nameA.localeCompare(nameB);
  });

const basePath = import.meta.env.BASE_URL.replace(/\/$/, '');
---

<BaseLayout
  title="MCUs - FCBase"
  description="Browse flight controller microcontrollers. Compare architectures, clock speeds, and memory configurations used across autopilot designs."
>
  <MainLayout>
    <div class="container py-8">
      <div class="mb-8">
        <nav class="mb-4 flex items-center gap-2 text-sm text-muted-foreground">
          <a href={`${basePath}/`} class="hover:text-foreground transition-colors">Home</a>
          <span>/</span>
          <span class="text-foreground">MCUs</span>
        </nav>

        <h1 class="text-4xl font-bold tracking-tight mb-3">Microcontrollers</h1>
        <p class="text-lg text-muted-foreground">
          Browse {mcusWithStats.length} autopilot-grade microcontrollers
        </p>
      </div>

      <div class="grid gap-6 sm:grid-cols-2 lg:grid-cols-3">
        {mcusWithStats.map((mcu) => (
          <a href={`${basePath}/mcu/${mcu.id}`} class="group block">
            <Card client:load class="h-full transition-all hover:shadow-lg hover:-translate-y-1">
              <CardHeader>
                <div class="flex items-start justify-between gap-4">
                  <div>
                    <CardTitle className="group-hover:text-primary transition-colors">
                      {mcu.data.name || mcu.id}
                    </CardTitle>
                    {(mcu.data.manufacturer || mcu.data.architecture) && (
                      <CardDescription className="text-xs uppercase tracking-wide mt-1">
                        {[mcu.data.manufacturer, mcu.data.architecture]
                          .filter(Boolean)
                          .join(' • ')}
                      </CardDescription>
                    )}
                  </div>
                  {mcu.controllerCount > 0 && (
                    <Badge variant="secondary" className="text-xs whitespace-nowrap">
                      {mcu.controllerCount} {mcu.controllerCount === 1 ? 'controller' : 'controllers'}
                    </Badge>
                  )}
                </div>
              </CardHeader>
              <CardContent>
                <dl class="grid grid-cols-2 gap-y-2 text-sm">
                  {mcu.stats.clockMhz && (
                    <div>
                      <dt class="text-xs text-muted-foreground uppercase">Clock</dt>
                      <dd class="font-semibold">{mcu.stats.clockMhz} MHz</dd>
                    </div>
                  )}
                  {mcu.stats.flash && (
                    <div>
                      <dt class="text-xs text-muted-foreground uppercase">Flash</dt>
                      <dd class="font-semibold">{mcu.stats.flash >= 1024 ? `${(mcu.stats.flash / 1024).toFixed(0)} MB` : `${mcu.stats.flash} KB`}</dd>
                    </div>
                  )}
                  {mcu.stats.ram && (
                    <div>
                      <dt class="text-xs text-muted-foreground uppercase">RAM</dt>
                      <dd class="font-semibold">{mcu.stats.ram >= 1024 ? `${(mcu.stats.ram / 1024).toFixed(0)} MB` : `${mcu.stats.ram} KB`}</dd>
                    </div>
                  )}
                  {Array.isArray(mcu.data.features) && mcu.data.features.length > 0 && (
                    <div class="col-span-2">
                      <dt class="text-xs text-muted-foreground uppercase">Highlights</dt>
                      <dd class="text-xs text-muted-foreground line-clamp-2">
                        {mcu.data.features.join(' • ')}
                      </dd>
                    </div>
                  )}
                </dl>
              </CardContent>
            </Card>
          </a>
        ))}
      </div>

      {mcusWithStats.length === 0 && (
        <div class="text-center py-12">
          <p class="text-muted-foreground">No microcontrollers found.</p>
        </div>
      )}
    </div>
  </MainLayout>
</BaseLayout>
