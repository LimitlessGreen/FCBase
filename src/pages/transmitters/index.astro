---
import { getCollection, getEntry } from 'astro:content';
import BaseLayout from '@/layouts/BaseLayout.astro';
import MainLayout from '@/layouts/MainLayout.astro';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/Card';
import { Badge } from '@/components/ui/Badge';

const allTransmitters = await getCollection('transmitters');

const transmittersWithMeta = await Promise.all(
  allTransmitters.map(async (transmitter) => {
    const manufacturer = transmitter.data.brand
      ? await getEntry('manufacturers', transmitter.data.brand)
      : null;

    return {
      ...transmitter,
      manufacturerName: manufacturer?.data.name ?? transmitter.data.brand,
    };
  })
);

transmittersWithMeta.sort((a, b) => a.data.title.localeCompare(b.data.title));

const groupedByLevel = {
  official: transmittersWithMeta.filter((item) => item.data.support.level === 'official'),
  manufacturer: transmittersWithMeta.filter((item) => item.data.support.level === 'manufacturer'),
  community: transmittersWithMeta.filter((item) => item.data.support.level === 'community'),
};

const supportLevelLabels: Record<'official' | 'manufacturer' | 'community', string> = {
  official: 'Official EdgeTX Support',
  manufacturer: 'Manufacturer Maintained',
  community: 'Community Maintained',
};

const supportStatusLabels: Record<'supported' | 'limited' | 'sunset' | 'planned', string> = {
  supported: 'Active support',
  limited: 'Limited support',
  sunset: 'Support ending',
  planned: 'Planned support',
};

const basePath = import.meta.env.BASE_URL.replace(/\/$/, '');
---

<BaseLayout
  title="EdgeTX Transmitters - FCBase"
  description="Browse EdgeTX-compatible transmitters, see support timelines, and follow FCC compliance links."
>
  <MainLayout editPath="src/pages/transmitters/index.astro">
    <div class="container py-8 space-y-16">
      <div>
        <nav class="mb-4 flex items-center gap-2 text-sm text-muted-foreground">
          <a href={`${basePath}/`} class="hover:text-foreground transition-colors">Home</a>
          <span>/</span>
          <span class="text-foreground">Transmitters</span>
        </nav>

        <div class="flex flex-col gap-3">
          <h1 class="text-4xl font-bold tracking-tight">EdgeTX Transmitters</h1>
          <p class="text-lg text-muted-foreground max-w-2xl">
            Browse {transmittersWithMeta.length} EdgeTX-compatible transmitters, grouped by who maintains support. Track when
            firmware compatibility started, where it ends, and jump straight to FCC filings.
          </p>
        </div>
      </div>

      {(Object.entries(groupedByLevel) as [keyof typeof groupedByLevel, typeof transmittersWithMeta][]).map(
        ([level, items]) =>
          items.length > 0 && (
            <section key={level} class="space-y-6">
              <header class="flex flex-col gap-2">
                <h2 class="text-2xl font-semibold tracking-tight">{supportLevelLabels[level]}</h2>
                <p class="text-sm text-muted-foreground max-w-3xl">
                  {level === 'official' &&
                    'Maintained by the EdgeTX core team and available through EdgeTX Buddy/Companion.'}
                  {level === 'manufacturer' &&
                    'Firmware images maintained by hardware vendors in collaboration with the EdgeTX project.'}
                  {level === 'community' &&
                    'Community volunteers maintain builds for these radios. Check the support window before updating.'}
                </p>
              </header>

              <div class="grid gap-6 md:grid-cols-2 xl:grid-cols-3">
                {items.map((item) => {
                  const support = item.data.support;
                  const revisions = item.data.hardware?.revisions ?? [];
                  const compliance = item.data.compliance ?? [];
                  const levelLabel = supportLevelLabels[level];
                  const statusLabel = supportStatusLabels[support.status];

                  return (
                    <Card
                      client:load
                      key={item.id}
                      class="group h-full transition-all hover:-translate-y-1 hover:shadow-lg"
                    >
                      <div class="relative aspect-video w-full overflow-hidden rounded-t-xl bg-gradient-to-br from-muted via-background to-muted">
                        <div class="absolute inset-0 flex items-center justify-center px-6 text-center">
                          <div class="flex flex-col items-center gap-2">
                            <svg
                              xmlns="http://www.w3.org/2000/svg"
                              viewBox="0 0 24 24"
                              fill="none"
                              stroke="currentColor"
                              stroke-width="1.5"
                              class="h-12 w-12 text-muted-foreground/40"
                            >
                              <path
                                stroke-linecap="round"
                                stroke-linejoin="round"
                                d="M4.5 8.25v7.5a2.25 2.25 0 0 0 2.25 2.25h10.5A2.25 2.25 0 0 0 19.5 15.75v-7.5A2.25 2.25 0 0 0 17.25 6H6.75A2.25 2.25 0 0 0 4.5 8.25Zm6.75 7.5a.75.75 0 1 1-1.5 0 .75.75 0 0 1 1.5 0Zm3 0a.75.75 0 1 1-1.5 0 .75.75 0 0 1 1.5 0ZM8.25 9.75h7.5m-3.75-3.75v-1.5"
                              />
                            </svg>
                            <span class="text-xs font-medium text-muted-foreground">
                              {item.data.title}
                            </span>
                          </div>
                        </div>
                      </div>
                      <CardHeader class="space-y-3">
                        <div class="flex flex-col gap-1">
                          <CardTitle class="transition-colors group-hover:text-primary">
                            {item.data.title}
                          </CardTitle>
                          <CardDescription>{item.manufacturerName}</CardDescription>
                        </div>
                        <div class="flex flex-wrap gap-2">
                          <Badge variant="secondary" className="text-xs uppercase">
                            {levelLabel}
                          </Badge>
                          <Badge variant="outline" className="text-xs uppercase">
                            {statusLabel}
                          </Badge>
                        </div>
                      </CardHeader>
                      <CardContent>
                        <div class="space-y-3 text-sm">
                          <div class="flex items-center justify-between">
                            <span class="text-muted-foreground">Support since</span>
                            <span class="font-medium">{support.since_version}</span>
                          </div>
                          {support.last_version && (
                            <div class="flex items-center justify-between">
                              <span class="text-muted-foreground">Last supported</span>
                              <span class="font-medium">{support.last_version}</span>
                            </div>
                          )}
                          {revisions.length > 0 && (
                            <div class="space-y-2">
                              <span class="text-xs font-medium uppercase tracking-wide text-muted-foreground">
                                Hardware variants
                              </span>
                              <div class="flex flex-wrap gap-1.5">
                                {revisions.map((revision) => (
                                  <Badge key={revision.id} variant="outline" className="text-xs">
                                    {revision.name}
                                  </Badge>
                                ))}
                              </div>
                            </div>
                          )}
                          {compliance.length > 0 && (
                            <div class="space-y-2">
                              <span class="text-xs font-medium uppercase tracking-wide text-muted-foreground">
                                Compliance
                              </span>
                              <div class="flex flex-wrap gap-1.5">
                                {compliance.map((entry) => (
                                  <a
                                    key={`${entry.type}-${entry.id}`}
                                    href={entry.url}
                                    target="_blank"
                                    rel="noopener noreferrer"
                                    class="inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold text-primary transition-colors hover:text-primary/80"
                                  >
                                    {entry.id}
                                  </a>
                                ))}
                              </div>
                            </div>
                          )}
                          {support.notes && (
                            <p class="text-sm leading-relaxed text-muted-foreground">
                              {support.notes}
                            </p>
                          )}
                        </div>
                      </CardContent>
                    </Card>
                  );
                })}
              </div>
            </section>
          )
      )}
    </div>
  </MainLayout>
</BaseLayout>
