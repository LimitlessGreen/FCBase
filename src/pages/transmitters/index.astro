---
import { getCollection, getEntry } from 'astro:content';
import BaseLayout from '@/layouts/BaseLayout.astro';
import MainLayout from '@/layouts/MainLayout.astro';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/Card';
import { Badge } from '@/components/ui/Badge';
import SourceList from '@/components/content/SourceList.astro';
import { resolveSources } from '@/lib/sources';

const allTransmitters = await getCollection('transmitters');

const transmittersWithMeta = await Promise.all(
  allTransmitters.map(async (transmitter) => {
    const manufacturer = transmitter.data.brand
      ? await getEntry('manufacturers', transmitter.data.brand)
      : null;

    const sourceEntries = await resolveSources(transmitter.data.sources);
    const revisionSources = await Promise.all(
      (transmitter.data.hardware?.revisions ?? []).map(async (revision) => ({
        id: revision.id,
        sources: await resolveSources(revision.sources),
      }))
    );

    return {
      ...transmitter,
      manufacturerName: manufacturer?.data.name ?? transmitter.data.brand,
      sourceEntries,
      revisionSources,
    };
  })
);

transmittersWithMeta.sort((a, b) => a.data.title.localeCompare(b.data.title));

const groupedByLevel = {
  official: transmittersWithMeta.filter((item) => item.data.support.level === 'official'),
  manufacturer: transmittersWithMeta.filter((item) => item.data.support.level === 'manufacturer'),
  community: transmittersWithMeta.filter((item) => item.data.support.level === 'community'),
};

const supportLevelLabels: Record<'official' | 'manufacturer' | 'community', string> = {
  official: 'Official EdgeTX Support',
  manufacturer: 'Manufacturer Maintained',
  community: 'Community Maintained',
};

const supportStatusLabels: Record<'supported' | 'limited' | 'sunset' | 'planned', string> = {
  supported: 'Active support',
  limited: 'Limited support',
  sunset: 'Support ending',
  planned: 'Planned support',
};

const basePath = import.meta.env.BASE_URL.replace(/\/$/, '');
---

<BaseLayout
  title="EdgeTX Transmitters - FCBase"
  description="Browse EdgeTX-compatible transmitters, see support timelines, and follow FCC compliance links."
>
  <MainLayout editPath="src/pages/transmitters/index.astro">
    <div class="container py-8 space-y-16">
      <div>
        <nav class="mb-4 flex items-center gap-2 text-sm text-muted-foreground">
          <a href={`${basePath}/`} class="hover:text-foreground transition-colors">Home</a>
          <span>/</span>
          <span class="text-foreground">Transmitters</span>
        </nav>

        <div class="flex flex-col gap-3">
          <h1 class="text-4xl font-bold tracking-tight">EdgeTX Transmitters</h1>
          <p class="text-lg text-muted-foreground max-w-2xl">
            Browse {transmittersWithMeta.length} EdgeTX-compatible transmitters, grouped by who maintains support. Track when
            firmware compatibility started, where it ends, and jump straight to FCC filings.
          </p>
        </div>
      </div>

      {(Object.entries(groupedByLevel) as [keyof typeof groupedByLevel, typeof transmittersWithMeta][]).map(
        ([level, items]) =>
          items.length > 0 && (
            <section key={level} class="space-y-6">
              <header class="flex flex-col gap-2">
                <h2 class="text-2xl font-semibold tracking-tight">{supportLevelLabels[level]}</h2>
                <p class="text-sm text-muted-foreground max-w-3xl">
                  {level === 'official' &&
                    'Maintained by the EdgeTX core team and available through EdgeTX Buddy/Companion.'}
                  {level === 'manufacturer' &&
                    'Firmware images maintained by hardware vendors in collaboration with the EdgeTX project.'}
                  {level === 'community' &&
                    'Community volunteers maintain builds for these radios. Check the support window before updating.'}
                </p>
              </header>

              <div class="grid gap-6 md:grid-cols-2 xl:grid-cols-3">
                {items.map((item) => {
                  const support = item.data.support;
                  const revisions = item.data.hardware?.revisions ?? [];
                  const compliance = item.data.compliance ?? [];
                  const revisionSourceMap = new Map(
                    (item.revisionSources ?? []).map((entry) => [entry.id, entry.sources])
                  );

                  return (
                    <Card client:load key={item.id} class="h-full">
                      <CardHeader class="space-y-3">
                        <div class="flex flex-col gap-1">
                          <CardTitle>{item.data.title}</CardTitle>
                          <CardDescription>{item.manufacturerName}</CardDescription>
                        </div>
                        <div class="flex flex-wrap gap-2">
                          <Badge variant="secondary">{supportLevelLabels[level]}</Badge>
                          <Badge variant="outline">{supportStatusLabels[support.status]}</Badge>
                        </div>
                      </CardHeader>
                      <CardContent class="space-y-4 text-sm">
                        <dl class="grid gap-2">
                          <div class="flex items-center justify-between">
                            <span class="text-muted-foreground">Support since</span>
                            <span class="font-medium">{support.since_version}</span>
                          </div>
                          {support.last_version && (
                            <div class="flex items-center justify-between">
                              <span class="text-muted-foreground">Last supported</span>
                              <span class="font-medium">{support.last_version}</span>
                            </div>
                          )}
                        </dl>

                        {support.notes && (
                          <p class="text-muted-foreground">{support.notes}</p>
                        )}

                        {revisions.length > 0 && (
                          <div class="space-y-1">
                            <p class="font-medium text-foreground text-sm">Hardware variants</p>
                              <ul class="list-disc list-inside text-muted-foreground space-y-1">
                                {revisions.map((revision) => {
                                  const sources = revisionSourceMap.get(revision.id) ?? [];
                                  return (
                                    <li key={revision.id} class="space-y-1">
                                      <div>{revision.name}</div>
                                      {sources.length > 0 && (
                                        <SourceList orientation="inline" sources={sources} />
                                      )}
                                    </li>
                                  );
                                })}
                              </ul>
                          </div>
                        )}

                        {compliance.length > 0 && (
                          <div class="space-y-1">
                            <p class="font-medium text-foreground text-sm">FCC filings</p>
                            <ul class="list-disc list-inside space-y-1">
                              {compliance.map((entry) => (
                                <li key={`${entry.type}-${entry.id}`} class="text-muted-foreground">
                                  <a
                                    href={entry.url}
                                    target="_blank"
                                    rel="noopener noreferrer"
                                    class="text-primary hover:underline"
                                  >
                                    {entry.id}
                                  </a>
                                </li>
                              ))}
                            </ul>
                          </div>
                        )}

                        {(item.sourceEntries ?? []).length > 0 && (
                          <div class="space-y-1">
                            <p class="font-medium text-foreground text-sm">Data sources</p>
                            <SourceList sources={item.sourceEntries ?? []} />
                          </div>
                        )}
                      </CardContent>
                    </Card>
                  );
                })}
              </div>
            </section>
          )
      )}
    </div>
  </MainLayout>
</BaseLayout>
