---
import { getCollection } from 'astro:content';
import MainLayout from '@/layouts/MainLayout.astro';
import { Tabs, TabsList, TabsTrigger, TabsContent } from '@/components/ui/Tabs';
import { getManufacturersMap } from '@/lib/content-cache.server';
import { getBasePath } from '@/lib/paths';
import SupportSection from '@/components/transmitters/SupportSection.astro';

const allTransmitters = await getCollection('transmitters');

const manufacturers = await getManufacturersMap();

const transmittersWithMeta = await Promise.all(
  allTransmitters.map(async (transmitter) => {
    const manufacturer = transmitter.data.brand
      ? manufacturers.get(transmitter.data.brand) ?? null
      : null;

    return {
      ...transmitter,
      manufacturerName: manufacturer?.data.name ?? transmitter.data.brand,
    };
  })
);

transmittersWithMeta.sort((a, b) => a.data.title.localeCompare(b.data.title));

const groupedByLevel = {
  official: transmittersWithMeta.filter((item) => item.data.support.level === 'official'),
  manufacturer: transmittersWithMeta.filter((item) => item.data.support.level === 'manufacturer'),
  community: transmittersWithMeta.filter((item) => item.data.support.level === 'community'),
};

type SupportLevel = keyof typeof groupedByLevel;
type TransmitterWithMeta = (typeof transmittersWithMeta)[number];

const supportLevelLabels: Record<SupportLevel, string> = {
  official: 'Official EdgeTX Support',
  manufacturer: 'Manufacturer Maintained',
  community: 'Community Maintained',
};

const supportLevelDescriptions: Record<SupportLevel, string> = {
  official: 'Maintained by the EdgeTX core team and available through EdgeTX Buddy/Companion.',
  manufacturer: 'Firmware images maintained by hardware vendors in collaboration with the EdgeTX project.',
  community: 'Community volunteers maintain builds for these radios. Check the support window before updating.',
};

const basePath = getBasePath();
---

<MainLayout
  title="EdgeTX Transmitters - FCBase"
  description="Browse EdgeTX-compatible transmitters, see support timelines, and follow FCC compliance links."
  editPath="src/pages/transmitters/index.astro"
>
    <div class="container py-8 space-y-16">
      <div>
        <nav class="mb-4 flex items-center gap-2 text-sm text-muted-foreground">
          <a href={`${basePath}/`} class="hover:text-foreground transition-colors">Home</a>
          <span>/</span>
          <span class="text-foreground">Transmitters</span>
        </nav>

        <div class="flex flex-col gap-3">
          <h1 class="text-4xl font-bold tracking-tight">EdgeTX Transmitters</h1>
          <p class="text-lg text-muted-foreground max-w-2xl">
            Browse {transmittersWithMeta.length} EdgeTX-compatible transmitters, grouped by who maintains support. Track when
            firmware compatibility started, where it ends, and jump straight to FCC filings.
          </p>
        </div>
      </div>

      <Tabs client:load defaultValue="grid" className="space-y-12">
        <div class="flex flex-col gap-2 sm:flex-row sm:items-center sm:justify-between">
          <span id="transmitter-layout-toggle" class="text-sm font-medium text-muted-foreground">
            Choose how to view transmitter support information
          </span>
          <TabsList aria-labelledby="transmitter-layout-toggle" class="w-full max-w-sm sm:w-auto">
            <TabsTrigger value="grid">Detailed cards</TabsTrigger>
            <TabsTrigger value="compact">Compact list</TabsTrigger>
          </TabsList>
        </div>

        <TabsContent value="grid" className="space-y-16">
          {(Object.entries(groupedByLevel) as [SupportLevel, TransmitterWithMeta[]][]).map(([level, items]) => (
            <SupportSection
              key={level}
              level={level}
              label={supportLevelLabels[level]}
              description={supportLevelDescriptions[level]}
              items={items}
              variant="grid"
              basePath={basePath}
            />
          ))}
        </TabsContent>

        <TabsContent value="compact" className="space-y-12">
          {(Object.entries(groupedByLevel) as [SupportLevel, TransmitterWithMeta[]][]).map(([level, items]) => (
            <SupportSection
              key={level}
              level={level}
              label={supportLevelLabels[level]}
              description={supportLevelDescriptions[level]}
              items={items}
              variant="compact"
              basePath={basePath}
            />
          ))}
        </TabsContent>
      </Tabs>
    </div>
</MainLayout>
