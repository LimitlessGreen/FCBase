---
import { getCollection } from 'astro:content';
import MainLayout from '@/layouts/MainLayout.astro';
import ControllerCard from '@/components/cards/ControllerCard.astro';
import TransmitterCard from '@/components/cards/TransmitterCard.astro';
import { Badge } from '@/components/ui/Badge';
import { ExternalLink } from 'lucide-react';
import { createControllerCardModels } from '@/lib/controller-card-model';
import { getBasePath, getSiteUrl } from '@/lib/paths';

export async function getStaticPaths() {
  const manufacturers = await getCollection('manufacturers');
  return manufacturers.map((manufacturer) => ({
    params: { slug: manufacturer.id },
    props: { manufacturer },
  }));
}

const { manufacturer } = Astro.props;
const { data } = manufacturer;

// Load all controllers from this manufacturer
const allControllers = await getCollection('controllers');
const manufacturerControllers = allControllers.filter(
  (controller) => controller.data.brand === manufacturer.id
);

const allTransmitters = await getCollection('transmitters');
const manufacturerTransmitters = allTransmitters
  .filter((transmitter) => transmitter.data.brand === manufacturer.id)
  .sort((a, b) => a.data.title.localeCompare(b.data.title));

// Sort by title
manufacturerControllers.sort((a, b) => a.data.title.localeCompare(b.data.title));

const controllerCards = await createControllerCardModels(manufacturerControllers);

const transmitterCards = manufacturerTransmitters.map((transmitter) => {
  const support = transmitter.data.support ?? {
    level: 'community',
    status: 'supported',
    since_version: 'Unknown',
  };

  const image = transmitter.data.image;

  const cardImage = image
    ? {
        src: image.src,
        alt: image.alt,
        credit: image.credit,
        sourceUrl: image.source_url,
        width: image.width,
        height: image.height,
      }
    : undefined;

  return {
    id: transmitter.id,
    slug: (transmitter as { slug?: string }).slug ?? transmitter.id,
    title: transmitter.data.title,
    manufacturer: data.name || transmitter.data.brand,
    support: {
      level: support.level,
      status: support.status,
      sinceVersion: support.since_version ?? 'Unknown',
      lastVersion: support.last_version,
      notes: support.notes,
    },
    hardwareRevisions: transmitter.data.hardware?.revisions ?? [],
    compliance: transmitter.data.compliance ?? [],
    image: cardImage,
    variant: 'grid' as const,
  };
});

const basePath = getBasePath();
const editPath = `src/content/manufacturers/${manufacturer.id}.yaml`;
const manufacturerName = data.name || manufacturer.id;
const canonicalUrl = getSiteUrl(`manufacturers/${manufacturer.id}`, Astro.site);
const manufacturerSummaryParts: string[] = [];
if (data.description) {
  manufacturerSummaryParts.push(data.description);
}
if (manufacturerControllers.length > 0) {
  manufacturerSummaryParts.push(`Browse all ${manufacturerControllers.length} documented controller${manufacturerControllers.length === 1 ? '' : 's'}.`);
}
if (manufacturerTransmitters.length > 0) {
  manufacturerSummaryParts.push(`Browse all ${manufacturerTransmitters.length} documented transmitter${manufacturerTransmitters.length === 1 ? '' : 's'}.`);
}
const fallbackDetailParts: string[] = [];
if (manufacturerControllers.length > 0) {
  fallbackDetailParts.push(
    `${manufacturerControllers.length} controller${manufacturerControllers.length === 1 ? '' : 's'}`
  );
}
if (manufacturerTransmitters.length > 0) {
  fallbackDetailParts.push(
    `${manufacturerTransmitters.length} transmitter${manufacturerTransmitters.length === 1 ? '' : 's'}`
  );
}
const fallbackDetails =
  fallbackDetailParts.length > 0
    ? `Documented hardware: ${fallbackDetailParts.join(' and ')}.`
    : 'No documented hardware listed yet.';
const manufacturerSummary =
  manufacturerSummaryParts.join(' ') ||
  `Manufacturer profile for ${manufacturerName}. ${fallbackDetails}`;
const pageDescription = `${manufacturerName} hardware catalog. ${manufacturerSummary}`.trim();
---

<MainLayout
  title={`${data.name} - Manufacturers - FCBase`}
  description={pageDescription}
  editPath={editPath}
  showEditBar
>
  <Fragment slot="head">
    <link rel="canonical" href={canonicalUrl} />
  </Fragment>
    <div class="container py-8">
      <!-- Breadcrumb -->
      <nav class="mb-6 flex items-center gap-2 text-sm text-muted-foreground">
        <a href={`${basePath}/`} class="hover:text-foreground transition-colors">Home</a>
        <span>/</span>
        <a href={`${basePath}/manufacturers`} class="hover:text-foreground transition-colors">Manufacturers</a>
        <span>/</span>
        <span class="text-foreground">{data.name}</span>
      </nav>

      <!-- Header -->
      <div class="mb-8">
        <div class="flex items-start gap-4 mb-4">
          <div class="h-16 w-16 rounded-xl bg-gradient-to-br from-primary/20 to-primary/5 flex items-center justify-center flex-shrink-0">
            <span class="text-3xl font-bold text-primary">
              {data.name.charAt(0)}
            </span>
          </div>
          <div class="flex-1 min-w-0">
            <h1 class="text-4xl font-bold tracking-tight mb-2">{data.name}</h1>
            {data.description && (
              <p class="text-lg text-muted-foreground">
                {data.description}
              </p>
            )}
            {data.website && (
              <a
                href={data.website}
                target="_blank"
                rel="noopener noreferrer"
                class="inline-flex items-center gap-2 mt-3 text-sm text-primary hover:underline"
              >
                <ExternalLink className="h-4 w-4" />
                {data.website.replace('https://', '').replace('http://', '')}
              </a>
            )}
          </div>
        </div>

        <div class="flex items-center gap-4 text-sm">
          <Badge variant="secondary" className="text-sm">
            {manufacturerControllers.length} {manufacturerControllers.length === 1 ? 'Controller' : 'Controllers'}
          </Badge>
          <Badge variant="outline" className="text-sm">
            {manufacturerTransmitters.length} {manufacturerTransmitters.length === 1 ? 'Transmitter' : 'Transmitters'}
          </Badge>
        </div>
      </div>

      <!-- Controllers List -->
      {manufacturerControllers.length > 0 ? (
        <>
          <h2 class="text-2xl font-bold tracking-tight mb-6">Controllers</h2>
          <div class="grid gap-6 sm:grid-cols-2 lg:grid-cols-3">
            {controllerCards.map((controller) => (
              <ControllerCard
                key={controller.id}
                id={controller.id}
                title={controller.title}
                manufacturer={controller.manufacturer || data.name || data.title}
                mcu={controller.mcu}
                mounting={controller.mounting}
                uarts={controller.uarts}
                can={controller.can}
                pwm={controller.pwm}
                sdCard={controller.sdCard}
                barometer={controller.barometer}
                ethernet={controller.ethernet}
                firmwares={controller.firmwares}
                image={controller.image}
                showImage={true}
                basePath={basePath}
                variant={controller.variant}
              />
            ))}
          </div>
        </>
      ) : (
        <div class="text-center py-12 bg-muted/20 rounded-lg">
          <p class="text-muted-foreground">No controllers found for this manufacturer yet.</p>
        </div>
      )}

      {manufacturerTransmitters.length > 0 && (
        <div class="mt-16">
          <h2 class="text-2xl font-bold tracking-tight mb-6">Transmitters</h2>
          <div class="grid gap-6 sm:grid-cols-2 lg:grid-cols-3">
            {transmitterCards.map((transmitter) => (
              <TransmitterCard
                key={transmitter.id}
                id={transmitter.id}
                slug={transmitter.slug}
                title={transmitter.title}
                manufacturer={transmitter.manufacturer ?? manufacturerName}
                support={transmitter.support}
                hardwareRevisions={transmitter.hardwareRevisions}
                compliance={transmitter.compliance}
                image={transmitter.image}
                basePath={basePath}
                variant={transmitter.variant}
              />
            ))}
          </div>
        </div>
      )}
    </div>
</MainLayout>
