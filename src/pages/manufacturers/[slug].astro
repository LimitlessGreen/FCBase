---
import { getCollection } from 'astro:content';
import BaseLayout from '@/layouts/BaseLayout.astro';
import MainLayout from '@/layouts/MainLayout.astro';
import ControllerCard from '@/components/cards/ControllerCard.astro';
import { Badge } from '@/components/ui/Badge';
import { ExternalLink } from 'lucide-react';
import { createControllerCardModels } from '@/lib/controller-card-model';

export async function getStaticPaths() {
  const manufacturers = await getCollection('manufacturers');
  return manufacturers.map((manufacturer) => ({
    params: { slug: manufacturer.id },
    props: { manufacturer },
  }));
}

const { manufacturer } = Astro.props;
const { data } = manufacturer;

// Load all controllers from this manufacturer
const allControllers = await getCollection('controllers');
const manufacturerControllers = allControllers.filter(
  (controller) => controller.data.brand === manufacturer.id
);

// Sort by title
manufacturerControllers.sort((a, b) => a.data.title.localeCompare(b.data.title));

const controllerCards = await createControllerCardModels(manufacturerControllers);

const basePath = import.meta.env.BASE_URL.replace(/\/$/, '');
const editPath = `src/content/manufacturers/${manufacturer.id}.yaml`;
const manufacturerName = data.name || manufacturer.id;
const canonicalUrl = Astro.site
  ? new URL(`manufacturers/${manufacturer.id}`, Astro.site).toString()
  : `${basePath}/manufacturers/${manufacturer.id}`;
const manufacturerSummary = data.description || `Manufacturer profile for ${manufacturerName} with ${manufacturerControllers.length} documented controllers.`;
---

<BaseLayout
  title={`${data.name} - Manufacturers - FCBase`}
  description={`${data.name} flight controllers. ${data.description || ''} Browse all ${manufacturerControllers.length} controllers.`}
>
  <Fragment slot="head">
    <link rel="canonical" href={canonicalUrl} />
    <meta name="pagefind:meta:id" content={manufacturer.id} />
    <meta name="pagefind:meta:type" content="manufacturer" />
    <meta name="pagefind:filter:type" content="manufacturer" />
    <meta name="pagefind:meta:title" content={manufacturerName} />
    <meta name="pagefind:meta:summary" content={manufacturerSummary} />
    <meta name="pagefind:meta:url" content={canonicalUrl} />
    {data.website && <meta name="pagefind:meta:website" content={data.website} />}
  </Fragment>
  <MainLayout editPath={editPath} showEditBar>
    <div class="container py-8">
      <!-- Breadcrumb -->
      <nav class="mb-6 flex items-center gap-2 text-sm text-muted-foreground">
        <a href={`${basePath}/`} class="hover:text-foreground transition-colors">Home</a>
        <span>/</span>
        <a href={`${basePath}/manufacturers`} class="hover:text-foreground transition-colors">Manufacturers</a>
        <span>/</span>
        <span class="text-foreground">{data.name}</span>
      </nav>

      <!-- Header -->
      <div class="mb-8">
        <div class="flex items-start gap-4 mb-4">
          <div class="h-16 w-16 rounded-xl bg-gradient-to-br from-primary/20 to-primary/5 flex items-center justify-center flex-shrink-0">
            <span class="text-3xl font-bold text-primary">
              {data.name.charAt(0)}
            </span>
          </div>
          <div class="flex-1 min-w-0">
            <h1 class="text-4xl font-bold tracking-tight mb-2">{data.name}</h1>
            {data.description && (
              <p class="text-lg text-muted-foreground">
                {data.description}
              </p>
            )}
            {data.website && (
              <a
                href={data.website}
                target="_blank"
                rel="noopener noreferrer"
                class="inline-flex items-center gap-2 mt-3 text-sm text-primary hover:underline"
              >
                <ExternalLink className="h-4 w-4" />
                {data.website.replace('https://', '').replace('http://', '')}
              </a>
            )}
          </div>
        </div>

        <div class="flex items-center gap-4 text-sm">
          <Badge variant="secondary" className="text-sm">
            {manufacturerControllers.length} {manufacturerControllers.length === 1 ? 'Controller' : 'Controllers'}
          </Badge>
        </div>
      </div>

      <!-- Controllers List -->
      {manufacturerControllers.length > 0 ? (
        <>
          <h2 class="text-2xl font-bold tracking-tight mb-6">Controllers</h2>
          <div class="grid gap-6 sm:grid-cols-2 lg:grid-cols-3">
            {controllerCards.map((controller) => (
              <ControllerCard
                key={controller.id}
                id={controller.id}
                title={controller.title}
                manufacturer={controller.manufacturer || data.name || data.title}
                mcu={controller.mcu}
                mounting={controller.mounting}
                uarts={controller.uarts}
                can={controller.can}
                pwm={controller.pwm}
                sdCard={controller.sdCard}
                barometer={controller.barometer}
                firmwares={controller.firmwares}
                image={controller.image}
                showImage={true}
                basePath={basePath}
              />
            ))}
          </div>
        </>
      ) : (
        <div class="text-center py-12 bg-muted/20 rounded-lg">
          <p class="text-muted-foreground">No controllers found for this manufacturer yet.</p>
        </div>
      )}
    </div>
  </MainLayout>
</BaseLayout>
