---
import { getCollection } from 'astro:content';
import MainLayout from "@/layouts/MainLayout.astro";
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/Card";
import { Button } from "@/components/ui/Button";
import { GITHUB_REPO_URL } from "@/lib/constants";
import { compareComponentDefinitions } from "@/lib/component-registry";
import ControllerCard from "@/components/cards/ControllerCard.astro";
import { getManufacturersMap } from "@/lib/content-cache";
import { createControllerCardModels } from "@/lib/controller-card-model";
import { getBasePath } from "@/lib/paths";
import { Database, Github, Layers } from "lucide-react";

const title = "FCBase – Open Flight Controller Database";
const description = "Browse and compare ArduPilot, PX4, and iNAV flight controllers plus EdgeTX transmitters – open, community-driven.";

// Load actual controllers from content collection
const allControllers = await getCollection('controllers');
const featuredControllerEntries = allControllers.filter(
  (controller) => controller.data.featured === true
);
const hasFeaturedControllers = featuredControllerEntries.length > 0;

// Featured controllers for homepage grid
const manufacturers = await getManufacturersMap();
const controllers = await createControllerCardModels(
  hasFeaturedControllers ? featuredControllerEntries : [],
  { manufacturersMap: manufacturers }
);

const featureIcons = {
  database: Database,
  layers: Layers,
  github: Github,
} as const;

const features: {
  title: string;
  description: string;
  icon: keyof typeof featureIcons;
}[] = [
  {
    title: "Comprehensive Database",
    description: "Access detailed specifications for hundreds of flight controllers from major manufacturers.",
    icon: "database",
  },
  {
    title: "Multi-Firmware Support",
    description: "Compare boards compatible with ArduPilot, PX4, and iNAV firmware platforms.",
    icon: "layers",
  },
  {
    title: "Open Source",
    description: "Community-driven with open data under CC-BY 4.0. Contribute and help grow the database.",
    icon: "github",
  },
];

const basePath = getBasePath();
const createHref = (path: string) => `${basePath}${path}`.replace(/\/{2,}/g, "/");
const homepageNavigationEntries = compareComponentDefinitions.map((definition, index) => ({
  id: definition.id,
  href: createHref(definition.navigation.primaryRoute),
  heroVariant: index === 0 ? "default" : "outline",
  heroCtaCopy: definition.navigation.ctaCopy,
  cardTitle: definition.homepage.title,
  cardDescription: definition.homepage.description,
  cardCtaCopy: definition.homepage.ctaCopy,
}));
---

<MainLayout title={title} description={description} editPath="src/pages/index.astro">
  <!-- Hero Section -->
  <section class="relative w-full overflow-hidden bg-background">
    <div class="absolute inset-0">
      <div class="absolute inset-0 bg-hero-radial opacity-90"></div>
      <div class="absolute inset-0 bg-gradient-to-b from-background/20 via-background/40 to-muted/35 animate-gradient-shift"></div>
      <div class="absolute inset-0 bg-tech-grid mask-tech-fade animate-grid-pan"></div>
      <div class="hero-orb hero-orb-primary"></div>
      <div class="hero-orb hero-orb-secondary"></div>
    </div>
    <div class="container relative z-10 py-12 md:py-16 lg:py-24">
      <div class="flex flex-col items-center text-center gap-4 md:gap-6 max-w-3xl mx-auto">
        <div class="inline-flex items-center gap-2 rounded-full border px-3 py-1.5 md:px-4 md:py-2 text-xs md:text-sm">
          <span class="font-medium text-primary">Open Hardware Index</span>
        </div>
        <h1 class="text-3xl font-bold tracking-tight sm:text-4xl md:text-5xl lg:text-6xl xl:text-7xl">
          FCBase
        </h1>
        <p class="text-base md:text-lg lg:text-xl text-muted-foreground max-w-2xl">
          The open hardware knowledge base for the ArduPilot, PX4, and iNAV ecosystems. Discover flight controllers, EdgeTX transmitters, compare specifications, and plan your next build.
        </p>
        <div class="flex flex-col sm:flex-row flex-wrap gap-3 md:gap-4 justify-center mt-2 md:mt-4 w-full sm:w-auto">
          {homepageNavigationEntries.map((entry) => (
            <Button
              key={entry.id}
              size="lg"
              variant={entry.heroVariant}
              asChild
              class="w-full sm:w-auto"
            >
              <a href={entry.href}>{entry.heroCtaCopy}</a>
            </Button>
          ))}
          <Button variant="outline" size="lg" asChild class="w-full sm:w-auto">
            <a href={`${basePath}/contribute`}>Contribute</a>
          </Button>
        </div>
      </div>
    </div>
  </section>

  <!-- Features Section -->
  <section class="w-full py-12 md:py-16 lg:py-24">
    <div class="container">
      <div class="grid gap-6 md:gap-8 sm:grid-cols-2 lg:grid-cols-3">
        {features.map((feature) => {
          const Icon = featureIcons[feature.icon];

          return (
            <Card key={feature.title}>
              <CardHeader class="space-y-5 sm:space-y-6">
                <span class="inline-flex h-12 w-12 items-center justify-center rounded-full bg-primary/10 text-primary">
                  <Icon class="h-6 w-6" aria-hidden="true" />
                </span>
                <div class="flex flex-col gap-2">
                  <CardTitle class="text-xl">{feature.title}</CardTitle>
                  <CardDescription class="text-base leading-relaxed">
                    {feature.description}
                  </CardDescription>
                </div>
              </CardHeader>
            </Card>
          );
        })}
      </div>
    </div>
  </section>

  <!-- Category Section -->
  <section class="w-full bg-muted/40 py-12 md:py-16 lg:py-24">
    <div class="container">
      <div class="flex flex-col gap-6 md:gap-8 max-w-4xl mx-auto">
        <div class="flex flex-col gap-2 md:gap-3 text-center">
          <h2 class="text-2xl md:text-3xl font-bold tracking-tight lg:text-4xl">
            What are you looking for?
          </h2>
          <p class="text-base md:text-lg text-muted-foreground">
            FCBase is expanding beyond flight controllers. Choose a category to explore detailed hardware data.
          </p>
        </div>

        <div class="grid gap-4 sm:grid-cols-2">
          {homepageNavigationEntries.map((entry) => (
            <a href={entry.href} class="group" key={entry.id}>
              <Card class="h-full transition-colors group-hover:border-primary">
                <CardHeader>
                  <CardTitle class="text-xl">{entry.cardTitle}</CardTitle>
                  <CardDescription>{entry.cardDescription}</CardDescription>
                </CardHeader>
                <CardContent>
                  <Button variant="outline" class="w-full">
                    {entry.cardCtaCopy}
                  </Button>
                </CardContent>
              </Card>
            </a>
          ))}
        </div>
      </div>
    </div>
  </section>

  <!-- Featured Controllers -->
  <section class="w-full py-12 md:py-16 lg:py-24">
    <div class="container space-y-8">
      <div class="flex flex-col gap-2 md:gap-3 text-center max-w-3xl mx-auto">
        <h2 class="text-2xl md:text-3xl font-bold tracking-tight lg:text-4xl">
          Featured flight controllers
        </h2>
        <p class="text-base md:text-lg text-muted-foreground">
          Browse curated hardware picks highlighted across the FCBase database.
        </p>
      </div>

      {hasFeaturedControllers ? (
        <div class="grid gap-6 md:gap-8 sm:grid-cols-2 lg:grid-cols-3">
          {controllers.map((controller) => (
            <ControllerCard
              key={controller.id}
              id={controller.id}
              title={controller.title}
              manufacturer={controller.manufacturer}
              mcu={controller.mcu}
              mounting={controller.mounting}
              uarts={controller.uarts}
              can={controller.can}
              pwm={controller.pwm}
              sdCard={controller.sdCard}
              barometer={controller.barometer}
              ethernet={controller.ethernet}
              firmwares={controller.firmwares}
              image={controller.image}
              basePath={basePath}
              variant={controller.variant}
            />
          ))}
        </div>
      ) : (
        <Card class="max-w-xl mx-auto">
          <CardHeader class="space-y-3">
            <CardTitle class="text-xl">No featured controllers yet</CardTitle>
            <CardDescription>
              Check back soon—the FCBase team is still curating standout flight controllers for this spotlight.
            </CardDescription>
          </CardHeader>
        </Card>
      )}
    </div>
  </section>

  <!-- CTA Section -->
  <section class="w-full bg-primary text-primary-foreground py-12 md:py-16 lg:py-24">
    <div class="container">
      <div class="flex flex-col items-center text-center gap-4 md:gap-6 max-w-3xl mx-auto">
        <h2 class="text-2xl md:text-3xl font-bold tracking-tight lg:text-4xl">
          Ready to contribute?
        </h2>
        <p class="text-base md:text-lg opacity-90">
          Help us build the most comprehensive flight controller database. Add new boards, update specifications, or improve documentation.
        </p>
        <div class="flex flex-col sm:flex-row flex-wrap gap-3 md:gap-4 justify-center mt-2 md:mt-4 w-full sm:w-auto px-4">
          <Button variant="secondary" size="lg" asChild class="w-full sm:w-auto">
            <a href={GITHUB_REPO_URL}>View on GitHub</a>
          </Button>
          <Button variant="outline" size="lg" asChild class="w-full sm:w-auto bg-primary-foreground/10 hover:bg-primary-foreground/20 text-primary-foreground border-primary-foreground/20">
            <a href={`${basePath}/docs`}>Read Documentation</a>
          </Button>
        </div>
      </div>
    </div>
  </section>
</MainLayout>

