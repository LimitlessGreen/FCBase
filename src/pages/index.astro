---
import { getCollection } from 'astro:content';
import MainLayout from "@/layouts/MainLayout.astro";
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/Card";
import { Button } from "@/components/ui/Button";
import { ControllerSearch } from "@/components/ui/ControllerSearch";

const title = "FCBase – Open Flight Controller Database";
const description = "Search and compare ArduPilot, PX4, and iNAV flight controllers – open, community-driven.";

// Load actual controllers from content collection
const allControllers = await getCollection('controllers');

// Prepare data for search component (all controllers)
const searchControllers = allControllers.map((controller) => ({
  id: controller.id,
  title: controller.data.title,
  brand: controller.data.brand,
  mcu: controller.data.mcu,
  mounting: controller.data.mounting,
  firmware: controller.data.firmware_support.map(fw => fw.id),
  uarts: controller.data.io.uarts,
  can: controller.data.io.can || 0,
  pwm: controller.data.io.pwm || 0,
  sdCard: controller.data.io.sd_card,
  ethernet: controller.data.io.ethernet,
  barometer: (controller.data.sensors?.barometer?.length ?? 0) > 0,
  redundant: controller.data.power?.redundant,
}));

// First 6 controllers for grid preview
const controllers = allControllers.slice(0, 6).map((controller) => ({
  slug: controller.id,
  name: controller.data.title,
  mcu: controller.data.mcu.toUpperCase().replace('STMICRO-', ''),
  ports: `${controller.data.io.uarts} UART • ${controller.data.io.can} CAN • ${controller.data.io.pwm} PWM`,
  imageAlt: controller.data.title,
  badges: controller.data.firmware_support.map(fw => fw.id.toUpperCase()),
}));

const features = [
  {
    title: "Comprehensive Database",
    description: "Access detailed specifications for hundreds of flight controllers from major manufacturers.",
    icon: "database",
  },
  {
    title: "Multi-Firmware Support",
    description: "Compare boards compatible with ArduPilot, PX4, and iNAV firmware platforms.",
    icon: "layers",
  },
  {
    title: "Open Source",
    description: "Community-driven with open data under CC-BY 4.0. Contribute and help grow the database.",
    icon: "github",
  },
];

const basePath = import.meta.env.BASE_URL.replace(/\/$/, '');
---

<MainLayout title={title} description={description}>
  <!-- Hero Section -->
  <section class="w-full bg-gradient-to-b from-background to-muted/20">
    <div class="container py-12 md:py-16 lg:py-24">
      <div class="flex flex-col items-center text-center gap-4 md:gap-6 max-w-3xl mx-auto">
        <div class="inline-flex items-center gap-2 rounded-full border px-3 py-1.5 md:px-4 md:py-2 text-xs md:text-sm">
          <span class="font-medium text-primary">Open Hardware Index</span>
        </div>
        <h1 class="text-3xl font-bold tracking-tight sm:text-4xl md:text-5xl lg:text-6xl xl:text-7xl">
          FCBase
        </h1>
        <p class="text-base md:text-lg lg:text-xl text-muted-foreground max-w-2xl">
          The open database for flight controllers: compare ArduPilot-, PX4-, and iNAV-compatible boards by MCU, ports, and features.
        </p>
        <div class="flex flex-col sm:flex-row flex-wrap gap-3 md:gap-4 justify-center mt-2 md:mt-4 w-full sm:w-auto">
          <Button size="lg" asChild client:load class="w-full sm:w-auto">
            <a href={`${basePath}/controllers`}>Browse Controllers</a>
          </Button>
          <Button variant="outline" size="lg" asChild client:load class="w-full sm:w-auto">
            <a href={`${basePath}/contribute`}>Contribute</a>
          </Button>
        </div>
      </div>
    </div>
  </section>

  <!-- Features Section -->
  <section class="w-full py-12 md:py-16 lg:py-24">
    <div class="container">
      <div class="grid gap-6 md:gap-8 sm:grid-cols-2 lg:grid-cols-3">
        {features.map((feature) => (
          <Card key={feature.title} client:load>
            <CardHeader>
              <CardTitle>{feature.title}</CardTitle>
              <CardDescription>{feature.description}</CardDescription>
            </CardHeader>
          </Card>
        ))}
      </div>
    </div>
  </section>

  <!-- Search Section -->
  <section class="w-full bg-muted/40 py-12 md:py-16 lg:py-24">
    <div class="container">
      <div class="flex flex-col gap-6 md:gap-8 max-w-6xl mx-auto">
        <div class="flex flex-col gap-2 md:gap-3 text-center">
          <h2 class="text-2xl md:text-3xl font-bold tracking-tight lg:text-4xl">
            Find your flight controller
          </h2>
          <p class="text-base md:text-lg text-muted-foreground">
            Search by name, MCU, form factor, or supported firmware
          </p>
        </div>

        <ControllerSearch client:load controllers={searchControllers} basePath={basePath} />
      </div>
    </div>
  </section>

  <!-- Controllers Grid -->
  <section class="w-full py-12 md:py-16 lg:py-24">
    <div class="container">
      <div class="grid gap-6 md:gap-8 sm:grid-cols-2 lg:grid-cols-3">
        {controllers.map((controller) => (
          <a
            href={`${basePath}/controllers/${controller.slug}`}
            class="group"
            key={controller.slug}
          >
            <Card client:load class="h-full transition-all hover:shadow-lg hover:-translate-y-1">
              <div class="relative aspect-video w-full bg-gradient-to-br from-muted via-background to-muted overflow-hidden rounded-t-xl">
                <span class="absolute inset-0 flex items-center justify-center px-6 text-center text-sm font-medium text-muted-foreground">
                  {controller.imageAlt}
                </span>
              </div>
              <CardHeader>
                <CardTitle class="group-hover:text-primary transition-colors">
                  {controller.name}
                </CardTitle>
                <CardDescription>{controller.mcu}</CardDescription>
              </CardHeader>
              <CardContent>
                <p class="text-sm text-muted-foreground mb-4">{controller.ports}</p>
                <div class="flex flex-wrap gap-2">
                  {controller.badges.map((badge) => (
                    <span class="inline-flex items-center rounded-sm border bg-secondary px-2.5 py-0.5 text-xs font-semibold uppercase tracking-wide" key={badge}>
                      {badge}
                    </span>
                  ))}
                </div>
              </CardContent>
            </Card>
          </a>
        ))}
      </div>
    </div>
  </section>

  <!-- CTA Section -->
  <section class="w-full bg-primary text-primary-foreground py-12 md:py-16 lg:py-24">
    <div class="container">
      <div class="flex flex-col items-center text-center gap-4 md:gap-6 max-w-3xl mx-auto">
        <h2 class="text-2xl md:text-3xl font-bold tracking-tight lg:text-4xl">
          Ready to contribute?
        </h2>
        <p class="text-base md:text-lg opacity-90">
          Help us build the most comprehensive flight controller database. Add new boards, update specifications, or improve documentation.
        </p>
        <div class="flex flex-col sm:flex-row flex-wrap gap-3 md:gap-4 justify-center mt-2 md:mt-4 w-full sm:w-auto px-4">
          <Button variant="secondary" size="lg" asChild client:load class="w-full sm:w-auto">
            <a href="https://github.com">View on GitHub</a>
          </Button>
          <Button variant="outline" size="lg" asChild client:load class="w-full sm:w-auto bg-primary-foreground/10 hover:bg-primary-foreground/20 text-primary-foreground border-primary-foreground/20">
            <a href={`${basePath}/docs`}>Read Documentation</a>
          </Button>
        </div>
      </div>
    </div>
  </section>
</MainLayout>

