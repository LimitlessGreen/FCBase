---
import { getCollection } from 'astro:content';
import BaseLayout from '@/layouts/BaseLayout.astro';
import MainLayout from '@/layouts/MainLayout.astro';
import { Card, CardContent, CardHeader, CardTitle, CardDescription } from '@/components/ui/Card';
import { Badge } from '@/components/ui/Badge';
import SourceList from '@/components/content/SourceList.astro';
import { resolveSources } from '@/lib/sources';
import { ExternalLink } from 'lucide-react';

export async function getStaticPaths() {
  const sensors = await getCollection('sensors');
  return sensors.map((sensor) => ({
    params: { slug: sensor.id },
    props: { sensor },
  }));
}

const { sensor } = Astro.props;
const { data } = sensor;

// Load all controllers using this sensor
const allControllers = await getCollection('controllers');
const controllersUsingSensor = allControllers.filter((controller) => {
  const sensors = controller.data.sensors;
  if (!sensors) return false;

  return Object.values(sensors).some((sensorGroup) =>
    Array.isArray(sensorGroup) && sensorGroup.some((s) => s.id === sensor.id)
  );
});

// Sort by title
controllersUsingSensor.sort((a, b) => a.data.title.localeCompare(b.data.title));

const typeDisplay: Record<string, string> = {
  imu: 'IMU (Gyro/Accel)',
  barometer: 'Barometer',
  magnetometer: 'Magnetometer',
  gps: 'GPS',
};

const basePath = import.meta.env.BASE_URL.replace(/\/$/, '');
const editPath = `src/content/sensors/${sensor.id}.yaml`;
const sourceEntries = await resolveSources(data.sources);
---

<BaseLayout
  title={`${data.name || data.title || sensor.id} - Sensors - FCBase`}
  description={`${data.name || data.title} sensor. ${data.manufacturer ? `Manufactured by ${data.manufacturer}.` : ''} ${data.notes || ''}`}
>
  <MainLayout editPath={editPath}>
    <div class="container py-8">
      <!-- Breadcrumb -->
      <nav class="mb-6 flex items-center gap-2 text-sm text-muted-foreground">
        <a href={`${basePath}/`} class="hover:text-foreground transition-colors">Home</a>
        <span>/</span>
        <a href={`${basePath}/sensors`} class="hover:text-foreground transition-colors">Sensors</a>
        <span>/</span>
        <span class="text-foreground">{data.name || data.title || sensor.id}</span>
      </nav>

      <!-- Header -->
      <div class="mb-6">
        <h1 class="text-3xl font-bold tracking-tight mb-1">{data.name || data.title || sensor.id}</h1>
        {data.manufacturer && (
          <p class="text-base text-muted-foreground mb-2">
            by {data.manufacturer}
          </p>
        )}
        {data.notes && (
          <p class="text-sm text-muted-foreground">{data.notes}</p>
        )}
      </div>

      {sourceEntries.length > 0 && (
        <Card className="mb-6">
          <CardHeader>
            <CardTitle className="text-base font-bold uppercase tracking-wide text-primary">
              Data Sources
            </CardTitle>
            <CardDescription className="text-xs text-muted-foreground">
              Evidence supporting this sensor profile.
            </CardDescription>
          </CardHeader>
          <CardContent>
            <SourceList sources={sourceEntries} />
          </CardContent>
        </Card>
      )}

      <!-- Professional Specs Card -->
      <div class="mb-6">
        <Card client:load>
          <CardHeader>
            <h2 class="text-base font-bold uppercase tracking-wide text-primary">Technical Specifications</h2>
          </CardHeader>
          <CardContent class="pt-0">
            <table class="w-full text-sm border-collapse">
              <tbody>
                <tr class="border-b border-border hover:bg-muted/50 transition-colors">
                  <td class="py-2 px-3 text-muted-foreground font-medium w-1/4 text-xs uppercase">Type</td>
                  <td class="py-2 px-3 font-semibold w-1/4">{typeDisplay[data.type] || data.type}</td>
                  <td class="py-2 px-3 text-muted-foreground font-medium w-1/4 text-xs uppercase">Interface</td>
                  <td class="py-2 px-3 font-mono font-semibold w-1/4 uppercase">
                    {Array.isArray(data.interface) ? data.interface.join(' / ') : data.interface}
                  </td>
                </tr>
                <tr class="border-b border-border bg-muted/20 hover:bg-muted/40 transition-colors">
                  {data.axes && (
                    <>
                      <td class="py-2 px-3 text-muted-foreground font-medium text-xs uppercase">Axes</td>
                      <td class="py-2 px-3 font-mono font-semibold">{data.axes}-axis</td>
                    </>
                  )}
                  <td class="py-2 px-3 text-muted-foreground font-medium text-xs uppercase">Used in Controllers</td>
                  <td class="py-2 px-3 font-mono font-semibold">{controllersUsingSensor.length}</td>
                </tr>
                {data.datasheet?.url && (
                  <tr class="border-b border-border hover:bg-muted/50 transition-colors">
                    <td class="py-2 px-3 text-muted-foreground font-medium text-xs uppercase">Datasheet</td>
                    <td colspan="3" class="py-2 px-3">
                      <a
                        href={data.datasheet.url}
                        target="_blank"
                        rel="noopener noreferrer"
                        class="inline-flex items-center gap-1.5 text-primary hover:underline font-semibold text-sm"
                      >
                        <ExternalLink className="h-4 w-4" />
                        <span>PDF</span>
                        {data.datasheet.year && <span class="text-xs text-muted-foreground font-normal">({data.datasheet.year})</span>}
                      </a>
                    </td>
                  </tr>
                )}
              </tbody>
            </table>
          </CardContent>
        </Card>
      </div>

      <!-- Controllers Using This Sensor -->
      {controllersUsingSensor.length > 0 ? (
        <>
          <h2 class="text-xl font-bold tracking-tight mb-4 uppercase text-primary">Controllers Using This Sensor</h2>
          <div class="grid gap-3 sm:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4">
            {controllersUsingSensor.map((controller) => (
              <a
                href={`${basePath}/controllers/${controller.id}`}
                class="group block"
              >
                <Card client:load class="h-full transition-all hover:shadow-lg hover:-translate-y-1 border-2 hover:border-primary/30">
                  <CardContent class="pt-4 pb-3 px-3">
                    <h3 class="font-bold text-sm mb-1.5 line-clamp-2 group-hover:text-primary transition-colors">
                      {controller.data.title}
                    </h3>
                    <p class="text-xs text-muted-foreground mb-2.5 font-medium">{controller.data.brand}</p>
                    <div class="flex flex-wrap gap-1 mb-2.5">
                      <Badge variant="outline" class="text-xs px-1.5 py-0.5 font-mono font-semibold">
                        {controller.data.mcu.replace('stmicro-', '').toUpperCase()}
                      </Badge>
                      <Badge variant="outline" class="text-xs px-1.5 py-0.5 font-medium">
                        {controller.data.mounting}
                      </Badge>
                    </div>
                    <p class="text-xs text-muted-foreground font-mono font-semibold">
                      {controller.data.io.uarts}U • {controller.data.io.can || 0}C • {controller.data.io.pwm || 0}PWM
                    </p>
                  </CardContent>
                </Card>
              </a>
            ))}
          </div>
        </>
      ) : (
        <div class="text-center py-8 bg-muted/30 rounded-lg border-2 border-dashed border-muted">
          <p class="text-sm text-muted-foreground font-medium">No controllers using this sensor in database yet.</p>
        </div>
      )}
    </div>
  </MainLayout>
</BaseLayout>
