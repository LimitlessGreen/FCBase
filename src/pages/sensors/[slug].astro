---
import { getCollection } from 'astro:content';
import BaseLayout from '@/layouts/BaseLayout.astro';
import MainLayout from '@/layouts/MainLayout.astro';
import { Card, CardContent, CardHeader } from '@/components/ui/Card';
import { Badge } from '@/components/ui/Badge';
import ProfessionalTable from '@/components/table/ProfessionalTable.astro';
import TableRow2Col from '@/components/table/TableRow2Col.astro';
import TableRow from '@/components/table/TableRow.astro';
import { ExternalLink } from 'lucide-react';

export async function getStaticPaths() {
  const sensors = await getCollection('sensors');
  return sensors.map((sensor) => ({
    params: { slug: sensor.id },
    props: { sensor },
  }));
}

const { sensor } = Astro.props;
const { data } = sensor;

// Load all controllers using this sensor
const allControllers = await getCollection('controllers');
const manufacturers = await getCollection('manufacturers');
const manufacturerMap = new Map(manufacturers.map((manufacturer) => [manufacturer.id, manufacturer]));

const controllersUsingSensor = allControllers.filter((controller) => {
  const sensors = controller.data.sensors;
  if (!sensors) return false;

  return Object.values(sensors).some((sensorGroup) =>
    Array.isArray(sensorGroup) && sensorGroup.some((s) => s.id === sensor.id)
  );
});

const controllersGroupedByBrand = Array.from(
  controllersUsingSensor.reduce((accumulator, controller) => {
    const brandId = controller.data.brand || 'unknown';
    const existingGroup = accumulator.get(brandId) ?? [];

    existingGroup.push(controller);
    accumulator.set(brandId, existingGroup);

    return accumulator;
  }, new Map<string, typeof controllersUsingSensor>())
)
  .map(([brandId, controllers]) => ({
    brandName:
      manufacturerMap.get(brandId)?.data?.name ||
      manufacturerMap.get(brandId)?.data?.title ||
      brandId,
    controllers: controllers.sort((a, b) => a.data.title.localeCompare(b.data.title)),
  }))
  .sort((a, b) => a.brandName.localeCompare(b.brandName));

const typeDisplay: Record<string, string> = {
  imu: 'IMU (Gyro/Accel)',
  barometer: 'Barometer',
  magnetometer: 'Magnetometer',
  gps: 'GPS',
};

const basePath = import.meta.env.BASE_URL.replace(/\/$/, '');
const editPath = `src/content/sensors/${sensor.id}.yaml`;
---

<BaseLayout
  title={`${data.name || data.title || sensor.id} - Sensors - FCBase`}
  description={`${data.name || data.title} sensor. ${data.manufacturer ? `Manufactured by ${data.manufacturer}.` : ''} ${data.notes || ''}`}
>
  <MainLayout editPath={editPath}>
    <div class="container py-8">
      <!-- Breadcrumb -->
      <nav class="mb-6 flex items-center gap-2 text-sm text-muted-foreground">
        <a href={`${basePath}/`} class="hover:text-foreground transition-colors">Home</a>
        <span>/</span>
        <a href={`${basePath}/sensors`} class="hover:text-foreground transition-colors">Sensors</a>
        <span>/</span>
        <span class="text-foreground">{data.name || data.title || sensor.id}</span>
      </nav>

      <!-- Header -->
      <div class="mb-6">
        <h1 class="text-3xl font-bold tracking-tight mb-1">{data.name || data.title || sensor.id}</h1>
        {data.manufacturer && (
          <p class="text-base text-muted-foreground mb-2">
            by {data.manufacturer}
          </p>
        )}
        {data.notes && (
          <p class="text-sm text-muted-foreground">{data.notes}</p>
        )}
      </div>

      <!-- Professional Specs Card -->
      <div class="mb-6">
        <Card client:load>
          <CardHeader>
            <h2 class="text-base font-bold uppercase tracking-wide text-primary">Technical Specifications</h2>
          </CardHeader>
          <CardContent class="pt-0">
            <ProfessionalTable>
              <TableRow2Col
                label1="Type"
                value1={typeDisplay[data.type] || data.type}
                label2="Interface"
                value2={Array.isArray(data.interface) ? data.interface.join(' / ') : data.interface}
                mono2
              />
              
              <TableRow2Col
                label1={data.axes ? "Axes" : " "}
                value1={data.axes ? `${data.axes}-axis` : ""}
                label2="Used in Controllers"
                value2={controllersUsingSensor.length}
                mono1={!!data.axes}
              />
              
              {data.datasheet?.url && (
                <TableRow label="Datasheet">
                  <a
                    href={data.datasheet.url}
                    target="_blank"
                    rel="noopener noreferrer"
                    class="inline-flex items-center gap-1.5 text-primary hover:underline font-semibold text-sm"
                  >
                    <ExternalLink className="h-4 w-4" />
                    <span>PDF</span>
                    {data.datasheet.year && <span class="text-xs text-muted-foreground font-normal">({data.datasheet.year})</span>}
                  </a>
                </TableRow>
              )}
            </ProfessionalTable>
          </CardContent>
        </Card>
      </div>

      <!-- Controllers Using This Sensor -->
      {controllersUsingSensor.length > 0 ? (
        <>
          <h2 class="text-xl font-bold tracking-tight mb-4 uppercase text-primary">Controllers Using This Sensor</h2>
          <div class="space-y-6">
            {controllersGroupedByBrand.map(({ brandName, controllers }) => (
              <section class="space-y-3">
                <h3 class="text-sm font-semibold uppercase tracking-wide text-muted-foreground">
                  {brandName}
                </h3>
                <div class="grid gap-3 sm:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4">
                  {controllers.map((controller) => (
                    <a href={`${basePath}/controllers/${controller.id}`} class="group block">
                      <Card client:load class="h-full transition-all hover:shadow-lg hover:-translate-y-1 border-2 hover:border-primary/30">
                        <CardContent class="pt-4 pb-3 px-3">
                          <h3 class="font-bold text-sm mb-1.5 line-clamp-2 group-hover:text-primary transition-colors">
                            {controller.data.title}
                          </h3>
                          <p class="text-xs text-muted-foreground mb-2.5 font-medium">{brandName}</p>
                          <div class="flex flex-wrap gap-1 mb-2.5">
                            <Badge variant="outline" class="text-xs px-1.5 py-0.5 font-mono font-semibold">
                              {controller.data.mcu.replace('stmicro-', '').toUpperCase()}
                            </Badge>
                            <Badge variant="outline" class="text-xs px-1.5 py-0.5 font-medium">
                              {controller.data.mounting}
                            </Badge>
                          </div>
                          <p class="text-xs text-muted-foreground font-mono font-semibold">
                            {controller.data.io.uarts}U • {controller.data.io.can || 0}C • {controller.data.io.pwm || 0}PWM
                          </p>
                        </CardContent>
                      </Card>
                    </a>
                  ))}
                </div>
              </section>
            ))}
          </div>
        </>
      ) : (
        <div class="text-center py-8 bg-muted/30 rounded-lg border-2 border-dashed border-muted">
          <p class="text-sm text-muted-foreground font-medium">No controllers using this sensor in database yet.</p>
        </div>
      )}
    </div>
  </MainLayout>
</BaseLayout>
