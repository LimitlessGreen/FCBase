---
import { getCollection } from 'astro:content';
import MainLayout from '@/layouts/MainLayout.astro';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/Card';
import { Badge } from '@/components/ui/Badge';
import { getBasePath } from '@/lib/paths';

// Load all firmware
const allFirmware = await getCollection('firmware');

// Load all controllers to count per firmware
const allControllers = await getCollection('controllers');

// Load all transmitters to count per firmware
const allTransmitters = await getCollection('transmitters');

// Count controllers per firmware
const normalize = (value: string | undefined) =>
  value
    ?.toLowerCase()
    .replace(/[^a-z0-9]+/g, '-')
    .replace(/^-+|-+$/g, '')
    .trim();

const firmwareWithCounts = allFirmware
  .map((firmware) => {
    const controllerCount = allControllers.filter((controller) =>
      controller.data.firmware_support.some((fw) => fw.id === firmware.id)
    ).length;

    const firmwareTokens = [firmware.id, firmware.data.title, firmware.data.name]
      .map((token) => normalize(token))
      .filter((token): token is string => Boolean(token));

    const transmitterCount = allTransmitters.filter((transmitter) => {
      const transmitterKeywords = (transmitter.data.keywords ?? [])
        .map((keyword) => normalize(keyword))
        .filter((keyword): keyword is string => Boolean(keyword));

      if (transmitterKeywords.length === 0) {
        return false;
      }

      return firmwareTokens.some((token) => transmitterKeywords.includes(token));
    }).length;

    return {
      ...firmware,
      controllerCount,
      transmitterCount,
    };
  })
  .sort((a, b) => a.data.title.localeCompare(b.data.title));

type FirmwareWithCount = (typeof firmwareWithCounts)[number];
type FirmwareCategory = 'controller' | 'transmitter';

const groupedByCategory = new Map<string, FirmwareWithCount[]>();

for (const firmware of firmwareWithCounts) {
  const category = firmware.data.category ?? 'controller';
  const existing = groupedByCategory.get(category);

  if (existing) {
    existing.push(firmware);
  } else {
    groupedByCategory.set(category, [firmware]);
  }
}

const categoryOrder: FirmwareCategory[] = ['controller', 'transmitter'];

const categoryMetadata: Record<FirmwareCategory, { label: string; description: string }> = {
  controller: {
    label: 'Flight Controller Firmware',
    description: 'Autopilot platforms designed for multirotor, fixed-wing, and ground vehicles.',
  },
  transmitter: {
    label: 'Transmitter Firmware',
    description: 'Operating systems for RC transmitters, radio gear, and ground control radios.',
  },
};

const firmwareSections = [
  ...categoryOrder
    .map((category) => ({
      id: category,
      label: categoryMetadata[category].label,
      description: categoryMetadata[category].description,
      items: groupedByCategory.get(category) ?? [],
    }))
    .filter((section) => section.items.length > 0),
  ...Array.from(groupedByCategory.entries())
    .filter(([category]) => !categoryOrder.includes(category as FirmwareCategory))
    .map(([category, items]) => ({
      id: category,
      label: category
        .split(/[-_]/)
        .map((part) => part.charAt(0).toUpperCase() + part.slice(1))
        .join(' '),
      description: undefined,
      items,
    })),
];

const basePath = getBasePath();
---

<MainLayout
  title="Firmware - FCBase"
  description="Browse firmware platforms for flight controllers and transmitters. Compare ArduPilot, PX4, EdgeTX, and more to find compatible hardware."
  editPath="src/pages/firmware/index.astro"
>
    <div class="container py-8">
      <!-- Header -->
      <div class="mb-8">
        <nav class="mb-4 flex items-center gap-2 text-sm text-muted-foreground">
          <a href={`${basePath}/`} class="hover:text-foreground transition-colors">Home</a>
          <span>/</span>
          <span class="text-foreground">Firmware</span>
        </nav>
        
        <h1 class="text-4xl font-bold tracking-tight mb-3">Firmware Platforms</h1>
        <p class="text-lg text-muted-foreground">
          Browse {firmwareWithCounts.length} firmware platforms across controllers and transmitters
        </p>
      </div>

      <!-- Firmware Sections -->
      <div class="space-y-12">
        {firmwareSections.map((section) => (
          <section key={section.id} class="space-y-6">
            <header class="space-y-2">
              <h2 class="text-2xl font-semibold tracking-tight">
                {section.label}
              </h2>
              {section.description && (
                <p class="text-sm text-muted-foreground max-w-3xl">
                  {section.description}
                </p>
              )}
            </header>

            <div class="grid gap-6 sm:grid-cols-2 lg:grid-cols-3">
              {section.items.map((firmware) => (
                <a
                  href={`${basePath}/firmware/${firmware.id}`}
                  class="group block"
                >
                  <Card class="h-full transition-all hover:shadow-lg hover:-translate-y-1">
                    <CardHeader>
                      <div class="flex items-start justify-between mb-2">
                        <div class="h-12 w-12 rounded-lg bg-gradient-to-br from-primary/20 to-primary/5 flex items-center justify-center">
                          <span class="text-xl font-bold text-primary">
                            {firmware.data.title.charAt(0)}
                          </span>
                        </div>
                        <div class="flex flex-wrap gap-2 justify-end">
                          {firmware.controllerCount > 0 && (
                            <Badge variant="secondary" className="text-xs">
                              {firmware.controllerCount}{' '}
                              {firmware.controllerCount === 1 ? 'controller' : 'controllers'}
                            </Badge>
                          )}
                          {firmware.transmitterCount > 0 && (
                            <Badge variant="outline" className="text-xs">
                              {firmware.transmitterCount}{' '}
                              {firmware.transmitterCount === 1 ? 'transmitter' : 'transmitters'}
                            </Badge>
                          )}
                        </div>
                      </div>
                      <CardTitle className="group-hover:text-primary transition-colors">
                        {firmware.data.title}
                      </CardTitle>
                      <CardDescription>
                        <div class="space-y-2 mt-2">
                          {firmware.data.maintainer && (
                            <p class="text-xs">
                              <span class="font-medium">Maintainer:</span> {firmware.data.maintainer}
                            </p>
                          )}
                          {firmware.data.license && (
                            <Badge variant="outline" className="text-xs">
                              {firmware.data.license}
                            </Badge>
                          )}
                          {firmware.controllerCount === 0 && firmware.transmitterCount === 0 && (
                            <p class="text-xs text-muted-foreground">
                              Compatible hardware coming soon.
                            </p>
                          )}
                        </div>
                      </CardDescription>
                    </CardHeader>
                    {firmware.data.supported_vehicle_types && firmware.data.supported_vehicle_types.length > 0 && (
                      <CardContent>
                        <div class="space-y-2">
                          <p class="text-xs font-medium text-muted-foreground">Supported vehicles:</p>
                          <div class="flex flex-wrap gap-1.5">
                            {firmware.data.supported_vehicle_types.map((type) => (
                              <Badge key={type} variant="secondary" className="text-xs capitalize">
                                {type}
                              </Badge>
                            ))}
                          </div>
                        </div>
                      </CardContent>
                    )}
                  </Card>
                </a>
              ))}
            </div>
          </section>
        ))}
      </div>

      {/* Empty State */}
      {firmwareWithCounts.length === 0 && (
        <div class="text-center py-12">
          <p class="text-muted-foreground">No firmware platforms found.</p>
        </div>
      )}
    </div>
</MainLayout>
