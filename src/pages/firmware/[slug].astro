---
import { getCollection } from 'astro:content';
import MainLayout from '@/layouts/MainLayout.astro';
import ControllerCard from '@/components/cards/ControllerCard.astro';
import TransmitterCard from '@/components/cards/TransmitterCard.astro';
import { Badge } from '@/components/ui/Badge';
import { ExternalLink } from 'lucide-react';
import { getBasePath } from '@/lib/paths';
import { GITHUB_REPO_URL } from '@/lib/constants';
import { getComponentImageResolver } from '@/lib/component-registry';
import { getComponentCardBuilders } from '@/lib/component-card-builders.server';

export async function getStaticPaths() {
  const firmware = await getCollection('firmware');
  return firmware.map((fw) => ({
    params: { slug: fw.id },
    props: { firmware: fw },
  }));
}

const { firmware } = Astro.props;
const { data } = firmware;

const manufacturers = await getCollection('manufacturers');

// Load all controllers supporting this firmware
const allControllers = await getCollection('controllers');
const compatibleControllers = allControllers.filter((controller) =>
  controller.data.firmware_support.some((fw) => fw.id === firmware.id)
);

// Load all transmitters matching this firmware
const allTransmitters = await getCollection('transmitters');

const normalize = (value: string | undefined) =>
  value
    ?.toLowerCase()
    .replace(/[^a-z0-9]+/g, '-')
    .replace(/^-+|-+$/g, '')
    .trim();

const firmwareTokens = [firmware.id, data.title, data.name]
  .map((token) => normalize(token))
  .filter((token): token is string => Boolean(token));

const compatibleTransmitters = allTransmitters.filter((transmitter) => {
  const keywords = (transmitter.data.keywords ?? [])
    .map((keyword) => normalize(keyword))
    .filter((keyword): keyword is string => Boolean(keyword));

  if (keywords.length === 0) {
    return false;
  }

  return firmwareTokens.some((token) => keywords.includes(token));
});

// Sort by title
compatibleControllers.sort((a, b) => a.data.title.localeCompare(b.data.title));
compatibleTransmitters.sort((a, b) => a.data.title.localeCompare(b.data.title));

const manufacturerMap = new Map(manufacturers.map((entry) => [entry.id, entry]));

const controllerCardBuilders = await getComponentCardBuilders('controller');
const controllerCards = controllerCardBuilders?.createModels
  ? await controllerCardBuilders.createModels(compatibleControllers, {
      manufacturersMap: manufacturerMap,
    })
  : [];

const firmwareStatusByController = new Map(
  compatibleControllers.map((controller) => {
    const match = controller.data.firmware_support.find((fw) => fw.id === firmware.id);
    return [controller.id, match?.status ?? 'stable'] as const;
  })
);

const getStatusTone = (status: string | undefined) => {
  switch (status) {
    case 'beta':
      return 'border-orange-500/30 bg-orange-500/15 text-orange-500';
    case 'deprecated':
      return 'border-red-500/30 bg-red-500/15 text-red-500';
    case 'testing':
    case 'alpha':
      return 'border-amber-500/30 bg-amber-500/15 text-amber-600';
    default:
      return 'border-blue-500/30 bg-blue-500/15 text-blue-500';
  }
};

const basePath = getBasePath();
const editPath = `src/content/firmware/${firmware.id}.yaml`;

const resolveTransmitterImage = getComponentImageResolver('transmitter');

const transmitterCards = compatibleTransmitters.map((transmitter) => {
  const support = transmitter.data.support;
  const manufacturerEntry = transmitter.data.brand
    ? manufacturerMap.get(transmitter.data.brand)
    : undefined;
  const manufacturerName = manufacturerEntry?.data.name ?? transmitter.data.brand;
  const slug = (transmitter as { slug?: string }).slug ?? transmitter.id;
  const remotePath = `src/content/transmitters/${slug}.yaml`;
  const remoteUrl = `${GITHUB_REPO_URL}/blob/main/${remotePath}`;
  const preview = resolveTransmitterImage?.(transmitter);
  const cardImage = preview
    ? {
        src: preview.src,
        alt: preview.alt,
        credit: preview.credit,
        sourceUrl: preview.sourceUrl,
        width: preview.width,
        height: preview.height,
      }
    : undefined;

  return {
    id: transmitter.id,
    slug,
    title: transmitter.data.title,
    manufacturer: manufacturerName,
    support: {
      level: support.level,
      status: support.status,
      sinceVersion: support.since_version,
      lastVersion: support.last_version,
      notes: support.notes,
    },
    hardwareRevisions: transmitter.data.hardware?.revisions ?? [],
    compliance: transmitter.data.compliance ?? [],
    image: cardImage,
    remoteUrl,
  };
});

const compatibilitySummaryParts: string[] = [];

if (compatibleControllers.length > 0) {
  compatibilitySummaryParts.push(
    `${compatibleControllers.length} compatible controller${
      compatibleControllers.length === 1 ? '' : 's'
    }`
  );
}

if (compatibleTransmitters.length > 0) {
  compatibilitySummaryParts.push(
    `${compatibleTransmitters.length} compatible transmitter${
      compatibleTransmitters.length === 1 ? '' : 's'
    }`
  );
}

const compatibilitySummary = compatibilitySummaryParts.join(' and ');
const compatibilityDescription =
  compatibilitySummary.length > 0
    ? `Browse ${compatibilitySummary}.`
    : 'Compatible hardware list coming soon.';

const pageDescription = `${data.title} firmware platform.${
  data.maintainer ? ` Maintained by ${data.maintainer}.` : ''
} ${compatibilityDescription}`.trim();

const hasCompatibility =
  compatibleControllers.length > 0 || compatibleTransmitters.length > 0;
---

<MainLayout
  title={`${data.title} - Firmware - FCBase`}
  description={pageDescription}
  editPath={editPath}
  showEditBar
>
    <div class="container py-8">
      <!-- Breadcrumb -->
      <nav class="mb-6 flex items-center gap-2 text-sm text-muted-foreground">
        <a href={`${basePath}/`} class="hover:text-foreground transition-colors">Home</a>
        <span>/</span>
        <a href={`${basePath}/firmware`} class="hover:text-foreground transition-colors">Firmware</a>
        <span>/</span>
        <span class="text-foreground">{data.title}</span>
      </nav>

      <!-- Header -->
      <div class="mb-8">
        <div class="flex items-start gap-4 mb-4">
          <div class="h-16 w-16 rounded-xl bg-gradient-to-br from-primary/20 to-primary/5 flex items-center justify-center flex-shrink-0">
            <span class="text-3xl font-bold text-primary">
              {data.title.charAt(0)}
            </span>
          </div>
          <div class="flex-1 min-w-0">
            <h1 class="text-4xl font-bold tracking-tight mb-2">{data.title}</h1>
            <div class="flex flex-wrap gap-3 items-center">
              {data.maintainer && (
                <p class="text-sm text-muted-foreground">
                  Maintained by <span class="font-medium">{data.maintainer}</span>
                </p>
              )}
              {data.license && (
                <Badge variant="outline" className="text-xs">
                  {data.license}
                </Badge>
              )}
            </div>
            {data.website && (
              <a
                href={data.website}
                target="_blank"
                rel="noopener noreferrer"
                class="inline-flex items-center gap-2 mt-3 text-sm text-primary hover:underline"
              >
                <ExternalLink className="h-4 w-4" />
                {data.website.replace('https://', '').replace('http://', '')}
              </a>
            )}
          </div>
        </div>

        {/* Supported Vehicles */}
        {data.supported_vehicle_types && data.supported_vehicle_types.length > 0 && (
          <div class="flex items-center gap-3 mt-4">
            <span class="text-sm font-medium text-muted-foreground">Supported vehicles:</span>
            <div class="flex flex-wrap gap-2">
              {data.supported_vehicle_types.map((type) => (
                <Badge key={type} variant="secondary" className="text-xs capitalize">
                  {type}
                </Badge>
              ))}
            </div>
          </div>
        )}

        {hasCompatibility && (
          <div class="flex flex-wrap items-center gap-2 text-sm mt-4">
            {compatibleControllers.length > 0 && (
              <Badge variant="secondary" className="text-sm">
                {compatibleControllers.length} Compatible{' '}
                {compatibleControllers.length === 1 ? 'Controller' : 'Controllers'}
              </Badge>
            )}
            {compatibleTransmitters.length > 0 && (
              <Badge variant="outline" className="text-sm">
                {compatibleTransmitters.length} Compatible{' '}
                {compatibleTransmitters.length === 1 ? 'Transmitter' : 'Transmitters'}
              </Badge>
            )}
          </div>
        )}
      </div>

      <div class="space-y-12">
        {compatibleControllers.length > 0 && (
          <section class="space-y-6">
            <h2 class="text-2xl font-bold tracking-tight">Compatible Controllers</h2>
            <ul class="grid gap-6 sm:grid-cols-2 lg:grid-cols-3">
              {controllerCards.map((controller) => {
                const status = firmwareStatusByController.get(controller.id);
                const showStatus = status && status !== 'stable';
                const tone = getStatusTone(status);
                return (
                  <li key={controller.id} class="relative">
                    <ControllerCard
                      {...controller}
                      basePath={basePath}
                      firmwares={[firmware.id]}
                    />
                    {showStatus && (
                      <div class="pointer-events-none absolute top-3 right-3 z-20">
                        <Badge
                          variant="outline"
                          className={`text-[10px] font-semibold uppercase tracking-wide shadow ${tone}`}
                        >
                          {status}
                        </Badge>
                      </div>
                    )}
                  </li>
                );
              })}
            </ul>
          </section>
        )}

        {compatibleTransmitters.length > 0 && (
          <section class="space-y-6">
            <h2 class="text-2xl font-bold tracking-tight">Compatible Transmitters</h2>
            <ul class="grid gap-6 sm:grid-cols-2 lg:grid-cols-3">
              {transmitterCards.map((transmitter) => (
                <li key={transmitter.id} class="relative">
                  <TransmitterCard
                    id={transmitter.id}
                    slug={transmitter.slug}
                    title={transmitter.title}
                    manufacturer={transmitter.manufacturer}
                    support={transmitter.support}
                    hardwareRevisions={transmitter.hardwareRevisions}
                    compliance={transmitter.compliance}
                    image={transmitter.image}
                    remoteUrl={transmitter.remoteUrl}
                    basePath={basePath}
                    variant="grid"
                  />
                </li>
              ))}
            </ul>
          </section>
        )}

        {!hasCompatibility && (
          <div class="text-center py-12 bg-muted/20 rounded-lg">
            <p class="text-muted-foreground">No compatible hardware found yet.</p>
          </div>
        )}
      </div>
    </div>
</MainLayout>
