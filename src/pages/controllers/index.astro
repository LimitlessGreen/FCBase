---
import { getCollection, getEntry } from 'astro:content';
import BaseLayout from '@/layouts/BaseLayout.astro';
import MainLayout from '@/layouts/MainLayout.astro';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/Card';
import { Badge } from '@/components/ui/Badge';
import { ControllerSearch } from '@/components/ui/ControllerSearch';

const controllerPreviewImages: Record<string, { src: string; credit: string; sourceUrl?: string }> = {
  'aocoda-h743dual': {
    src: 'https://ardupilot.org/copter/_images/aocoda_h743dual.jpg',
    credit: 'ArduPilot Documentation',
    sourceUrl: 'https://ardupilot.org/copter/docs/common-aocoda-h743dual.html',
  },
  'cuav-7-nano': {
    src: 'https://ardupilot.org/copter/_images/7-nano.jpg',
    credit: 'ArduPilot Documentation',
    sourceUrl: 'https://ardupilot.org/copter/docs/common-CUAV-7-Nano.html',
  },
  'cuav-nora': {
    src: 'https://ardupilot.org/copter/_images/nora.png',
    credit: 'ArduPilot Documentation',
    sourceUrl: 'https://ardupilot.org/copter/docs/common-cuav-nora-overview.html',
  },
  'cuav-pixhawk-v6x': {
    src: 'https://ardupilot.org/copter/_images/cuav-pixhawk-v6x.jpg',
    credit: 'ArduPilot Documentation',
    sourceUrl:
      'https://raw.githubusercontent.com/ArduPilot/ardupilot_wiki/master/common/source/docs/common-cuav-pixhawkv6X.rst',
  },
  'cubepilot-cube-black': {
    src: 'https://ardupilot.org/copter/_images/pixhawk2-overhead.jpg',
    credit: 'ArduPilot Documentation',
    sourceUrl: 'https://ardupilot.org/copter/docs/common-thecube-overview.html',
  },
  'cubepilot-cube-orange-plus': {
    src: 'https://ardupilot.org/copter/_images/Cube_orange_module.jpg',
    credit: 'ArduPilot Documentation',
    sourceUrl: 'https://ardupilot.org/copter/docs/common-thecubeorange-overview.html',
  },
  'holybro-durandal': {
    src: 'https://holybro.com/cdn/shop/products/Durandal-1.jpg?v=1751249914',
    credit: 'Holybro Store',
    sourceUrl: 'https://holybro.com/products/durandal',
  },
  'holybro-kakute-h7-v2': {
    src: 'https://holybro.com/cdn/shop/products/11058V2_1.jpg?v=1679456428',
    credit: 'Holybro Store',
    sourceUrl: 'https://holybro.com/products/kakute-h7-v2',
  },
  'holybro-pixhawk-4': {
    src: 'https://holybro.com/cdn/shop/files/110321_4.jpg?v=1750816088',
    credit: 'Holybro Store',
    sourceUrl: 'https://holybro.com/products/pixhawk-4',
  },
  'holybro-pixhawk-4-mini': {
    src: 'https://docs.px4.io/main/assets/pixhawk4mini_iso_1.ROPjkdrL.png',
    credit: 'PX4 Documentation',
    sourceUrl: 'https://docs.px4.io/main/en/flight_controller/pixhawk4_mini.html',
  },
  'holybro-pixhawk-5x': {
    src: 'https://holybro.com/cdn/shop/files/sku11045_4_grande.jpg?v=1723722819',
    credit: 'Holybro Store',
    sourceUrl: 'https://holybro.com/products/pixhawk-5x',
  },
  'holybro-pixhawk-6c': {
    src: 'https://holybro.com/cdn/shop/products/11054Pixhawk6C-Plasticcase_1_grande.jpg?v=1749537511',
    credit: 'Holybro Store',
    sourceUrl: 'https://holybro.com/products/pixhawk-6c',
  },
  'holybro-pixhawk-6x': {
    src: 'https://holybro.com/cdn/shop/files/SKU11073_4_grande.jpg?v=1721904825',
    credit: 'Holybro Store',
    sourceUrl: 'https://holybro.com/products/pixhawk-6x',
  },
  'mateksys-f405-wing': {
    src: 'https://www.mateksys.com/wp-content/uploads/2018/04/F405-WING_1-1500x600.jpg',
    credit: 'Mateksys',
    sourceUrl: 'https://www.mateksys.com/?portfolio=f405-wing',
  },
  'mateksys-f765-wing': {
    src: 'https://www.mateksys.com/wp-content/uploads/2019/08/F765-WING_1-1500x600.jpg',
    credit: 'Mateksys',
    sourceUrl: 'https://www.mateksys.com/?portfolio=f765-wing',
  },
  'mateksys-h743-wing': {
    src: 'https://www.mateksys.com/wp-content/uploads/2020/07/H743-WING_1.jpg',
    credit: 'Mateksys',
    sourceUrl: 'https://www.mateksys.com/?portfolio=h743-wing',
  },
  'mro-pixracer-pro': {
    src: 'https://ardupilot.org/copter/_images/pixracer-pro-top.png',
    credit: 'ArduPilot Documentation',
    sourceUrl: 'https://ardupilot.org/copter/docs/common-pixracer-pro.html',
  },
};

// Load all controllers
const allControllers = await getCollection('controllers');

// Fetch manufacturer names
const controllersWithMeta = await Promise.all(
  allControllers.map(async (controller) => {
    const manufacturer = controller.data.brand
      ? await getEntry('manufacturers', controller.data.brand)
      : null;

    return {
      ...controller,
      manufacturerName: manufacturer?.data.name || manufacturer?.data.title || controller.data.brand,
      preview: controllerPreviewImages[controller.id] ?? null,
    };
  })
);

// Prepare data for search component
const searchControllers = controllersWithMeta.map((controller) => ({
  id: controller.id,
  title: controller.data.title,
  brand: controller.data.brand,
  mcu: controller.data.mcu,
  mounting: controller.data.mounting,
  firmware: controller.data.firmware_support.map((fw) => fw.id),
  uarts: controller.data.io.uarts,
  can: controller.data.io.can || 0,
  pwm: controller.data.io.pwm || 0,
  sdCard: controller.data.io.sd_card,
  ethernet: controller.data.io.ethernet,
  barometer: (controller.data.sensors?.barometer?.length ?? 0) > 0,
  redundant: controller.data.power?.redundant,
}));

// Sort by title
controllersWithMeta.sort((a, b) => a.data.title.localeCompare(b.data.title));

// Format mounting type
const mountingDisplay: Record<string, string> = {
  '20x20': '20×20mm',
  '25.5x25.5': '25.5×25.5mm',
  '30.5x30.5': '30.5×30.5mm',
  '35x35': '35×35mm',
  'cube': 'Cube',
  'wing': 'Wing',
  'custom': 'Custom',
};

const basePath = import.meta.env.BASE_URL.replace(/\/$/, '');
---

<BaseLayout
  title="Flight Controllers - FCBase"
  description="Browse all flight controllers in the FCBase database. Compare specs, firmware support, and find the perfect board for your project."
>
  <MainLayout editPath="src/pages/controllers/index.astro">
    <div class="container py-8">
      <!-- Header -->
      <div class="mb-8">
        <nav class="mb-4 flex items-center gap-2 text-sm text-muted-foreground">
          <a href={`${basePath}/`} class="hover:text-foreground transition-colors">Home</a>
          <span>/</span>
          <span class="text-foreground">Controllers</span>
        </nav>
        
        <h1 class="text-4xl font-bold tracking-tight mb-3">Flight Controllers</h1>
        <p class="text-lg text-muted-foreground">
          Browse {controllersWithMeta.length} flight controllers from various manufacturers
        </p>
      </div>

      <!-- Search -->
      <div class="mb-12 space-y-4">
        <div class="flex flex-col gap-2 text-center">
          <h2 class="text-2xl font-semibold tracking-tight md:text-3xl">Find your flight controller</h2>
          <p class="text-base text-muted-foreground md:text-lg">
            Search by name, MCU, form factor, or supported firmware to narrow down the perfect board.
          </p>
        </div>
        <ControllerSearch client:load controllers={searchControllers} basePath={basePath} />
      </div>

      <!-- Controllers Grid -->
      <div class="grid gap-6 sm:grid-cols-2 lg:grid-cols-3 mb-12">
      {controllersWithMeta.map((controller) => (
        <a
          href={`${basePath}/controllers/${controller.id}`}
          class="group block"
        >
          <Card client:load class="h-full transition-all hover:shadow-lg hover:-translate-y-1">
            <div class="relative aspect-video w-full overflow-hidden rounded-t-xl bg-gradient-to-br from-muted via-background to-muted">
              {controller.preview?.src ? (
                <>
                  <img
                    src={controller.preview.src}
                    alt={controller.data.title}
                    loading="lazy"
                    class="h-full w-full object-cover transition-transform duration-500 ease-out group-hover:scale-105"
                  />
                  {controller.preview.credit && (
                    <span class="absolute bottom-2 right-2 rounded bg-background/80 px-2 py-0.5 text-[10px] font-medium uppercase tracking-wide text-muted-foreground">
                      {controller.preview.sourceUrl ? (
                        <a
                          href={controller.preview.sourceUrl}
                          target="_blank"
                          rel="noopener noreferrer"
                          class="hover:underline"
                        >
                          {controller.preview.credit}
                        </a>
                      ) : (
                        controller.preview.credit
                      )}
                    </span>
                  )}
                </>
              ) : (
                <span class="absolute inset-0 flex items-center justify-center px-6 text-center text-sm font-medium text-muted-foreground">
                  {controller.data.title}
                </span>
              )}
            </div>
            <CardHeader>
              <CardTitle class="group-hover:text-primary transition-colors">
                {controller.data.title}
              </CardTitle>
              <CardDescription>{controller.manufacturerName}</CardDescription>
            </CardHeader>
            <CardContent>
              <div class="space-y-3">
                <div class="flex items-center justify-between text-sm">
                  <span class="text-muted-foreground">MCU</span>
                  <span class="font-medium">
                    {controller.data.mcu.toUpperCase().replace('STMICRO-', '')}
                  </span>
                </div>
                <div class="flex items-center justify-between text-sm">
                  <span class="text-muted-foreground">Mounting</span>
                  <span class="font-medium">{mountingDisplay[controller.data.mounting]}</span>
                </div>
                <div class="flex items-center justify-between text-sm">
                  <span class="text-muted-foreground">I/O</span>
                  <span class="font-medium">
                    {controller.data.io.uarts}U • {controller.data.io.can}C • {controller.data.io.pwm}P
                  </span>
                </div>
                <div class="flex flex-wrap gap-1.5 pt-2">
                  {controller.data.firmware_support.map((fw) => (
                    <Badge variant="secondary" className="text-xs uppercase">
                      {fw.id}
                    </Badge>
                  ))}
                </div>
              </div>
            </CardContent>
          </Card>
        </a>
      ))}
    </div>
    </div>
  </MainLayout>
</BaseLayout>
