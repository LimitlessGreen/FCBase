---
import { getCollection } from 'astro:content';
import MainLayout from '@/layouts/MainLayout.astro';
import { getBasePath } from '@/lib/paths';
import ControllerSection from './_sections.astro';
import { getComponentCardBuilders } from '@/lib/component-card-builders.server';
import ViewModeSwitch from '@/components/ui/ViewModeSwitch';
import { parseViewMode, type ViewMode } from '@/lib/viewMode';

const controllers = await getCollection('controllers');
const manufacturers = await getCollection('manufacturers');

const manufacturerMap = new Map(manufacturers.map((entry) => [entry.id, entry]));

const controllerCardBuilders = await getComponentCardBuilders('controller');
const createControllerCardModel = controllerCardBuilders?.createModel;

const controllerGroups = (
  await Promise.all(
    manufacturers.map(async (manufacturer) => {
      const manufacturerControllers = controllers
        .filter((controller) => controller.data.brand === manufacturer.id)
        .sort((a, b) => a.data.title.localeCompare(b.data.title));

      const controllerModels = createControllerCardModel
        ? await Promise.all(
            manufacturerControllers.map((controller) =>
              createControllerCardModel(controller, { manufacturersMap: manufacturerMap })
            )
          )
        : [];

      return {
        manufacturer,
        controllers: controllerModels,
      };
    })
  )
)
  .filter((group) => group.controllers.length > 0)
  .sort((a, b) => a.manufacturer.data.name.localeCompare(b.manufacturer.data.name));

const unassignedControllers = createControllerCardModel
  ? await Promise.all(
      controllers
        .filter((controller) => !manufacturerMap.has(controller.data.brand))
        .sort((a, b) => a.data.title.localeCompare(b.data.title))
        .map((controller) =>
          createControllerCardModel(controller, { manufacturersMap: manufacturerMap })
        )
    )
  : [];

const totalControllers = controllers.length;
const basePath = getBasePath();
const initialView = parseViewMode(Astro.url.searchParams.get('view')) ?? ('grid' satisfies ViewMode);
---

<MainLayout
  title="Flight Controllers - FCBase"
  description="Browse all flight controllers in the FCBase database. Compare specs, firmware support, and find the perfect board for your project."
  editPath="src/pages/controllers/index.astro"
>
    <div class="container py-8">
      <!-- Header -->
      <nav class="mb-4 flex items-center gap-2 text-sm text-muted-foreground">
        <a href={`${basePath}/`} class="hover:text-foreground transition-colors">Home</a>
        <span>/</span>
        <span class="text-foreground">Controllers</span>
      </nav>

      <section class="space-y-10" data-view={initialView}>
        <div class="flex flex-col gap-4 sm:flex-row sm:items-start sm:justify-between">
          <div class="space-y-3">
            <h1 class="text-4xl font-bold tracking-tight">Flight Controllers</h1>
            <p class="text-lg text-muted-foreground">
              Explore {totalControllers} flight controllers organised by manufacturer.
            </p>
          </div>
          <div class="flex flex-col gap-2 sm:items-end">
            <span
              id="view-mode-label"
              class="text-xs font-semibold uppercase tracking-wide text-muted-foreground"
            >
              View mode
            </span>
            <ViewModeSwitch
              client:load
              mode={initialView}
              className="max-w-[320px] sm:w-auto"
              aria-labelledby="view-mode-label"
            />
          </div>
        </div>

        <div data-view-mode="grid" class="space-y-12">
          {controllerGroups.map((group) => (
            <ControllerSection
              group={{
                type: 'manufacturer',
                manufacturer: group.manufacturer,
                controllers: group.controllers,
              }}
              basePath={basePath}
              variant="grid"
            />
          ))}

          {unassignedControllers.length > 0 && (
            <ControllerSection
              group={{ type: 'unassigned', controllers: unassignedControllers }}
              basePath={basePath}
              variant="grid"
            />
          )}
        </div>

        <div data-view-mode="list" class="space-y-12">
          {controllerGroups.map((group) => (
            <ControllerSection
              group={{
                type: 'manufacturer',
                manufacturer: group.manufacturer,
                controllers: group.controllers,
              }}
              basePath={basePath}
              variant="list"
            />
          ))}

          {unassignedControllers.length > 0 && (
            <ControllerSection
              group={{ type: 'unassigned', controllers: unassignedControllers }}
              basePath={basePath}
              variant="list"
            />
          )}
        </div>

        <script>
          {`
            (() => {
              const root = document.currentScript?.closest('section[data-view]');
              if (!root) return;
              const apply = (mode) => {
                if (mode === 'grid' || mode === 'list') {
                  root.setAttribute('data-view', mode);
                }
              };
              const fromUrl = () => {
                const url = new URL(window.location.href);
                const view = url.searchParams.get('view');
                return view === 'grid' || view === 'list' ? view : 'grid';
              };
              apply(root.getAttribute('data-view') ?? fromUrl());
              window.addEventListener('fcbase:viewmode', (event) => {
                if (event instanceof CustomEvent) {
                  const detail = event.detail;
                  if (detail === 'grid' || detail === 'list') {
                    apply(detail);
                  }
                }
              });
              window.addEventListener('popstate', () => apply(fromUrl()));
            })();
          `}
        </script>
      </section>
    </div>
</MainLayout>

<style>
  section[data-view="grid"] [data-view-mode="list"] {
    display: none;
  }

  section[data-view="list"] [data-view-mode="grid"] {
    display: none;
  }
</style>
