---
import { getCollection } from 'astro:content';
import ControllerCard from '@/components/cards/ControllerCard.astro';
import { Tabs, TabsList, TabsTrigger, TabsContent } from '@/components/ui/Tabs';
import { createControllerCardModel } from '@/lib/controller-card-model';
import MainLayout from '@/layouts/MainLayout.astro';
import { getBasePath } from '@/lib/paths';
import { LayoutGrid, Rows3 } from 'lucide-react';

const controllers = await getCollection('controllers');
const manufacturers = await getCollection('manufacturers');

const manufacturerMap = new Map(manufacturers.map((entry) => [entry.id, entry]));

const controllerGroups = (
  await Promise.all(
    manufacturers.map(async (manufacturer) => {
      const manufacturerControllers = controllers
        .filter((controller) => controller.data.brand === manufacturer.id)
        .sort((a, b) => a.data.title.localeCompare(b.data.title));

      const controllerModels = await Promise.all(
        manufacturerControllers.map((controller) =>
          createControllerCardModel(controller, { manufacturersMap: manufacturerMap })
        )
      );

      return {
        manufacturer,
        controllers: controllerModels,
      };
    })
  )
)
  .filter((group) => group.controllers.length > 0)
  .sort((a, b) => a.manufacturer.data.name.localeCompare(b.manufacturer.data.name));

const unassignedControllers = await Promise.all(
  controllers
    .filter((controller) => !manufacturerMap.has(controller.data.brand))
    .sort((a, b) => a.data.title.localeCompare(b.data.title))
    .map((controller) =>
      createControllerCardModel(controller, { manufacturersMap: manufacturerMap })
    )
);

const totalControllers = controllers.length;
const basePath = getBasePath();
---

<MainLayout
  title="Flight Controllers - FCBase"
  description="Browse all flight controllers in the FCBase database. Compare specs, firmware support, and find the perfect board for your project."
  editPath="src/pages/controllers/index.astro"
>
    <div class="container py-8">
      <!-- Header -->
      <nav class="mb-4 flex items-center gap-2 text-sm text-muted-foreground">
        <a href={`${basePath}/`} class="hover:text-foreground transition-colors">Home</a>
        <span>/</span>
        <span class="text-foreground">Controllers</span>
      </nav>

      <Tabs client:load defaultValue="grid" className="space-y-10">
        <div class="flex flex-col gap-4 sm:flex-row sm:items-start sm:justify-between">
          <div class="space-y-3">
            <h1 class="text-4xl font-bold tracking-tight">Flight Controllers</h1>
            <p class="text-lg text-muted-foreground">
              Explore {totalControllers} flight controllers organised by manufacturer.
            </p>
          </div>
          <div class="flex flex-col gap-2 sm:items-end">
            <span
              id="view-mode-label"
              class="text-xs font-semibold uppercase tracking-wide text-muted-foreground"
            >
              View mode
            </span>
            <TabsList
              aria-labelledby="view-mode-label"
              className="grid w-full max-w-[320px] grid-cols-2 gap-1 rounded-full bg-muted/70 p-1 sm:w-auto"
            >
              <TabsTrigger
                value="grid"
                className="flex h-10 items-center justify-center gap-2 px-3 text-sm font-medium"
              >
                <LayoutGrid className="h-4 w-4" aria-hidden="true" />
                <span class="hidden sm:inline">Grid view</span>
                <span class="sm:hidden">Grid</span>
              </TabsTrigger>
              <TabsTrigger
                value="compact"
                className="flex h-10 items-center justify-center gap-2 px-3 text-sm font-medium"
              >
                <Rows3 className="h-4 w-4" aria-hidden="true" />
                <span class="hidden sm:inline">Compact view</span>
                <span class="sm:hidden">Compact</span>
              </TabsTrigger>
            </TabsList>
          </div>
        </div>

        <TabsContent value="grid" className="mt-0">
          <div class="space-y-12">
            {controllerGroups.map((group) => (
              <section
                id={`manufacturer-${group.manufacturer.id}`}
                class="space-y-4"
                aria-labelledby={`manufacturer-${group.manufacturer.id}-heading`}
              >
                <div class="flex flex-wrap items-baseline justify-between gap-2">
                  <h2
                    id={`manufacturer-${group.manufacturer.id}-heading`}
                    class="text-2xl font-semibold tracking-tight"
                  >
                    {group.manufacturer.data.name}
                  </h2>
                  <span class="text-sm text-muted-foreground">
                    {group.controllers.length}{' '}
                    {group.controllers.length === 1 ? 'controller' : 'controllers'}
                  </span>
                </div>
                {group.manufacturer.data.description && (
                  <p class="text-sm text-muted-foreground max-w-3xl">
                    {group.manufacturer.data.description}
                  </p>
                )}
                <ul class="grid gap-4 sm:grid-cols-2 xl:grid-cols-3">
                  {group.controllers.map((controller) => (
                    <li key={controller.id}>
                      <ControllerCard
                        {...controller}
                        basePath={basePath}
                        enableCompareToggle
                      />
                    </li>
                  ))}
                </ul>
              </section>
            ))}

            {unassignedControllers.length > 0 && (
              <section class="space-y-4" aria-labelledby="unassigned-heading">
                <div class="flex flex-wrap items-baseline justify-between gap-2">
                  <h2 id="unassigned-heading" class="text-2xl font-semibold tracking-tight">
                    Other controllers
                  </h2>
                  <span class="text-sm text-muted-foreground">
                    {unassignedControllers.length}{' '}
                    {unassignedControllers.length === 1 ? 'controller' : 'controllers'}
                  </span>
                </div>
                <p class="text-sm text-muted-foreground max-w-3xl">
                  These controllers are not currently linked to a registered manufacturer.
                </p>
                <ul class="grid gap-4 sm:grid-cols-2 xl:grid-cols-3">
                  {unassignedControllers.map((controller) => (
                    <li key={controller.id}>
                      <ControllerCard
                        {...controller}
                        basePath={basePath}
                        enableCompareToggle
                      />
                    </li>
                  ))}
                </ul>
              </section>
            )}
          </div>
        </TabsContent>

        <TabsContent value="compact" className="mt-0">
          <div class="space-y-12">
            {controllerGroups.map((group) => (
              <section
                id={`manufacturer-${group.manufacturer.id}-compact`}
                class="space-y-4"
                aria-labelledby={`manufacturer-${group.manufacturer.id}-compact-heading`}
              >
                <div class="flex flex-wrap items-baseline justify-between gap-2">
                  <h2
                    id={`manufacturer-${group.manufacturer.id}-compact-heading`}
                    class="text-2xl font-semibold tracking-tight"
                  >
                    {group.manufacturer.data.name}
                  </h2>
                  <span class="text-sm text-muted-foreground">
                    {group.controllers.length}{' '}
                    {group.controllers.length === 1 ? 'controller' : 'controllers'}
                  </span>
                </div>
                {group.manufacturer.data.description && (
                  <p class="text-sm text-muted-foreground max-w-3xl">
                    {group.manufacturer.data.description}
                  </p>
                )}
                <div
                  role="list"
                  class="divide-y divide-[hsl(var(--border))] overflow-hidden rounded-lg border"
                >
                  {group.controllers.map((controller) => (
                    <div key={controller.id} role="listitem" class="p-4 sm:p-5">
                      <ControllerCard
                        {...controller}
                        basePath={basePath}
                        variant="compact"
                        enableCompareToggle
                      />
                    </div>
                  ))}
                </div>
              </section>
            ))}

            {unassignedControllers.length > 0 && (
              <section class="space-y-4" aria-labelledby="unassigned-heading-compact">
                <div class="flex flex-wrap items-baseline justify-between gap-2">
                  <h2 id="unassigned-heading-compact" class="text-2xl font-semibold tracking-tight">
                    Other controllers
                  </h2>
                  <span class="text-sm text-muted-foreground">
                    {unassignedControllers.length}{' '}
                    {unassignedControllers.length === 1 ? 'controller' : 'controllers'}
                  </span>
                </div>
                <p class="text-sm text-muted-foreground max-w-3xl">
                  These controllers are not currently linked to a registered manufacturer.
                </p>
                <div
                  role="list"
                  class="divide-y divide-[hsl(var(--border))] overflow-hidden rounded-lg border"
                >
                  {unassignedControllers.map((controller) => (
                    <div key={controller.id} role="listitem" class="p-4 sm:p-5">
                      <ControllerCard
                        {...controller}
                        basePath={basePath}
                        variant="compact"
                        enableCompareToggle
                      />
                    </div>
                  ))}
                </div>
              </section>
            )}
          </div>
        </TabsContent>
      </Tabs>
    </div>
</MainLayout>
