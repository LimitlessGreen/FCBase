---
import { getCollection, getEntry } from 'astro:content';
import { buildRevisionVariants } from '@/content/config';
import BaseLayout from '@/layouts/BaseLayout.astro';
import MainLayout from '@/layouts/MainLayout.astro';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/Card';
import { Badge } from '@/components/ui/Badge';
import SourceList from '@/components/content/SourceList.astro';
import { resolveSources } from '@/lib/sources';
import { 
  Cpu, 
  Gauge, 
  Package,
  Zap,
  Database,
  Wifi,
  HardDrive,
  Cable,
  CheckCircle2,
  AlertCircle,
  Scale,
  Ruler,
  Box,
  Layers,
} from 'lucide-react';

export async function getStaticPaths() {
  const controllers = await getCollection('controllers');
  return controllers.map((controller) => ({
    params: { slug: controller.id },
    props: { controller },
  }));
}

const { controller } = Astro.props;
const { data } = controller;

// Fetch related data
const manufacturer = data.brand ? await getEntry('manufacturers', data.brand) : null;
const mcu = data.mcu ? await getEntry('mcu', data.mcu) : null;
const firmware = await Promise.all(
  data.firmware_support.map(async (fw) => {
    const entry = await getEntry('firmware', fw.id);
    return { ...fw, name: entry?.data.title || entry?.data.name || fw.id };
  })
);

const revisionVariants = buildRevisionVariants(data);

const uniqueSensorIds = new Set<string>();
for (const variant of revisionVariants) {
  const sensors = variant.spec.sensors;
  if (!sensors) continue;
  (['imu', 'barometer', 'magnetometer'] as const).forEach((category) => {
    sensors[category]?.forEach((sensor) => uniqueSensorIds.add(sensor.id));
  });
}

const sensorEntries = await Promise.all(
  Array.from(uniqueSensorIds).map(async (sensorId) => {
    const entry = await getEntry('sensors', sensorId);
    return {
      id: sensorId,
      name: entry?.data.title || entry?.data.name || sensorId,
    };
  })
);

const sensorNameMap = new Map(sensorEntries.map((entry) => [entry.id, entry.name]));

const revisionVariantsWithSensors = await Promise.all(
  revisionVariants.map(async (variant) => {
    const revision = variant.revision;
    const sourceEntries = await resolveSources(revision?.sources);

    const sensorDetails = {
      imu:
        variant.spec.sensors?.imu?.map((sensor) => ({
          ...sensor,
          name: sensorNameMap.get(sensor.id) ?? sensor.id,
        })) ?? [],
      barometer:
        variant.spec.sensors?.barometer?.map((sensor) => ({
          ...sensor,
          name: sensorNameMap.get(sensor.id) ?? sensor.id,
        })) ?? [],
      magnetometer:
        variant.spec.sensors?.magnetometer?.map((sensor) => ({
          ...sensor,
          name: sensorNameMap.get(sensor.id) ?? sensor.id,
        })) ?? [],
    };

    return {
      ...variant,
      sourceEntries,
      sensorDetails,
    };
  })
);

const defaultVariantId = revisionVariantsWithSensors[0]?.id ?? 'base';
const hasMultipleVariants = revisionVariantsWithSensors.length > 1;
const hardwareRevisionSummaries = revisionVariantsWithSensors.filter(
  (variant) => variant.revision
);
const controllerSourceEntries = await resolveSources(data.sources);

// Format mounting type
const mountingDisplay = {
  '20x20': '20×20mm',
  '25.5x25.5': '25.5×25.5mm',
  '30.5x30.5': '30.5×30.5mm',
  '35x35': '35×35mm',
  'cube': 'Cube Carrier Board',
  'wing': 'Wing Form Factor',
  'custom': 'Custom',
};

// Verification badge color
const verificationColor = {
  unverified: 'bg-yellow-500/10 text-yellow-500 border-yellow-500/20',
  community: 'bg-blue-500/10 text-blue-500 border-blue-500/20',
  reviewed: 'bg-green-500/10 text-green-500 border-green-500/20',
};

// Firmware status color
const firmwareStatusColor = {
  beta: 'bg-orange-500/10 text-orange-500 border-orange-500/20',
  stable: 'bg-green-500/10 text-green-500 border-green-500/20',
  deprecated: 'bg-red-500/10 text-red-500 border-red-500/20',
  community: 'bg-blue-500/10 text-blue-500 border-blue-500/20',
};

const peripheralTypeLabel = (type: string) =>
  type
    .split('_')
    .map((part) => part.charAt(0).toUpperCase() + part.slice(1))
    .join(' ');

const basePath = import.meta.env.BASE_URL.replace(/\/$/, '');
const editPath = `src/content/controllers/${controller.id}.yaml`;

const powerTypeLabels = {
  power_module: 'Power Module',
  usb: 'USB',
  battery: 'Battery',
  regulator: 'Regulator',
  servo_rail: 'Servo Rail',
  other: 'Other',
} as const;

const getPowerTypeLabel = (type?: string) => {
  if (!type) return null;
  return powerTypeLabels[type as keyof typeof powerTypeLabels] ?? type;
};

const formatVoltageRange = (voltage?: {
  min?: number;
  max?: number;
  nominal?: number;
  unit?: string;
  notes?: string;
  cells?: { min?: number; max?: number };
}) => {
  if (!voltage) return null;
  const unit = voltage.unit ?? 'V';
  const parts: string[] = [];

  if (typeof voltage.min === 'number' && typeof voltage.max === 'number') {
    parts.push(`${voltage.min}–${voltage.max} ${unit}`);
  } else if (typeof voltage.min === 'number') {
    parts.push(`≥${voltage.min} ${unit}`);
  } else if (typeof voltage.max === 'number') {
    parts.push(`≤${voltage.max} ${unit}`);
  } else if (typeof voltage.nominal === 'number') {
    parts.push(`${voltage.nominal} ${unit}`);
  }

  if (voltage.cells && (voltage.cells.min || voltage.cells.max)) {
    if (
      typeof voltage.cells.min === 'number' &&
      typeof voltage.cells.max === 'number' &&
      voltage.cells.min !== voltage.cells.max
    ) {
      parts.push(`${voltage.cells.min}–${voltage.cells.max}S`);
    } else if (typeof voltage.cells.min === 'number') {
      parts.push(`${voltage.cells.min}S`);
    } else if (typeof voltage.cells.max === 'number') {
      parts.push(`${voltage.cells.max}S`);
    }
  }

  const baseDescription = parts.join(' / ');
  if (voltage.notes) {
    return baseDescription ? `${baseDescription} (${voltage.notes})` : voltage.notes;
  }

  return baseDescription || null;
};
---

<BaseLayout
  title={`${data.title} - Flight Controller Database`}
  description={`${data.title} by ${manufacturer?.data.name || data.brand} - ${data.mounting} mounting, ${data.mcu} MCU. Supports ${firmware.map(f => f.name).join(', ')}.`}
>
  <MainLayout editPath={editPath}>
    <div class="container py-8">
      <!-- Breadcrumb -->
      <nav class="mb-6 flex items-center gap-2 text-sm text-muted-foreground">
        <a href={`${basePath}/`} class="hover:text-foreground transition-colors">Home</a>
        <span>/</span>
        <a href={`${basePath}/controllers`} class="hover:text-foreground transition-colors">Controllers</a>
        <span>/</span>
        <span class="text-foreground">{data.title}</span>
      </nav>

      <!-- Header -->
    <div class="mb-6">
      <div class="flex flex-col sm:flex-row sm:items-start sm:justify-between gap-3 mb-3">
        <div>
          <h1 class="text-3xl font-bold tracking-tight mb-1">{data.title}</h1>
          <p class="text-base text-muted-foreground">
            by {manufacturer?.data.name || data.brand}
          </p>
        </div>
        <div class="flex flex-wrap gap-1.5">
          <Badge className={`${verificationColor[data.verification.level]} px-2 py-0.5 text-xs`}>
            {data.verification.level === 'reviewed' && <CheckCircle2 className="w-3 h-3 mr-1" />}
            {data.verification.level === 'community' && <AlertCircle className="w-3 h-3 mr-1" />}
            {data.verification.level.charAt(0).toUpperCase() + data.verification.level.slice(1)}
          </Badge>
          <Badge className="bg-primary/10 text-primary border-primary/20 px-2 py-0.5 text-xs">
            {data.hardware.openness.charAt(0).toUpperCase() + data.hardware.openness.slice(1)} Hardware
          </Badge>
        </div>
      </div>
      
      {data.notes && (
        <p class="text-sm text-muted-foreground leading-relaxed">{data.notes}</p>
      )}
    </div>

    <!-- Main Content - Ultra Compact Layout -->
    <div class="grid grid-cols-1 lg:grid-cols-4 gap-4 mb-8">
      <!-- Left Column - Complete Specs Table -->
      <div class="lg:col-span-3">
        <Card>
          <CardHeader>
            <CardTitle className="text-lg">Technical Specifications</CardTitle>
          </CardHeader>
          <CardContent>
            <div
              class="space-y-4"
              data-revision-root
              data-default-variant={defaultVariantId}
            >
              {hasMultipleVariants && (
                <div class="flex flex-col gap-3 sm:flex-row sm:items-center sm:justify-between">
                  <div class="sm:hidden w-full space-y-1">
                    <label
                      for="hardware-revision-select"
                      class="text-[10px] uppercase tracking-wide font-semibold text-muted-foreground"
                    >
                      Hardware revision
                    </label>
                    <select
                      id="hardware-revision-select"
                      data-revision-select
                      class="w-full rounded-sm border border-border/60 bg-background px-3 py-2 text-sm text-foreground focus:outline-hidden focus:ring-2 focus:ring-primary/40"
                    >
                      {revisionVariantsWithSensors.map((variant) => (
                        <option value={variant.id}>{variant.label}</option>
                      ))}
                    </select>
                  </div>
                  <div
                    class="hidden sm:flex flex-wrap gap-2"
                    role="tablist"
                    aria-label="Hardware revisions"
                  >
                    {revisionVariantsWithSensors.map((variant, idx) => (
                      <button
                        type="button"
                        data-revision-tab={variant.id}
                        class={`border rounded-sm px-3 py-1.5 text-sm font-medium transition-colors ${idx === 0 ? 'bg-primary/10 border-primary/40 text-primary' : 'bg-muted/30 border-border/60 text-muted-foreground'}`}
                        aria-selected={idx === 0 ? 'true' : 'false'}
                      >
                        {variant.label}
                      </button>
                    ))}
                  </div>
                </div>
              )}
              {revisionVariantsWithSensors.map((variant, idx) => (
                <section
                  key={variant.id}
                  data-revision-panel={variant.id}
                  class={`space-y-4 ${idx === 0 ? '' : 'hidden'}`}
                  aria-hidden={idx === 0 ? 'false' : 'true'}
                >
                  {variant.revision ? (
                    <div class="rounded-sm border border-border/40 bg-muted/30 p-3 space-y-2">
                      <div class="flex flex-wrap items-center justify-between gap-2">
                        <div class="flex flex-wrap items-center gap-2">
                          <Badge className="text-[10px] uppercase tracking-wide bg-primary/10 text-primary border-primary/20">
                            {variant.label}
                          </Badge>
                          {variant.revision.released && (
                            <span class="text-xs font-mono text-muted-foreground">
                              {variant.revision.released}
                            </span>
                          )}
                        </div>
                        <span class="text-xs font-semibold text-muted-foreground">
                          Revision overview
                        </span>
                      </div>
                      {variant.revision.notes && (
                        <p class="text-xs leading-snug text-muted-foreground">
                          {variant.revision.notes}
                        </p>
                      )}
                      {variant.revision.changes && variant.revision.changes.length > 0 && (
                        <ul class="space-y-1">
                          {variant.revision.changes.map((change, changeIdx) => (
                            <li
                              key={`${variant.id}-change-${changeIdx}`}
                              class="flex items-start gap-2 text-xs text-muted-foreground"
                            >
                              <span class="text-primary font-bold mt-0.5">•</span>
                              <span class="leading-snug text-foreground">{change}</span>
                            </li>
                          ))}
                        </ul>
                      )}
                      {variant.revision.overrides && (
                        <div class="flex flex-wrap gap-1.5">
                          {variant.revision.overrides.sensors && (
                            <Badge className="text-[10px] uppercase tracking-wide bg-purple-500/10 text-purple-500 border-purple-500/30">
                              Sensor overrides
                            </Badge>
                          )}
                          {variant.revision.overrides.io && (
                            <Badge className="text-[10px] uppercase tracking-wide bg-blue-500/10 text-blue-500 border-blue-500/30">
                              I/O overrides
                            </Badge>
                          )}
                          {variant.revision.overrides.power && (
                            <Badge className="text-[10px] uppercase tracking-wide bg-amber-500/10 text-amber-500 border-amber-500/30">
                              Power overrides
                            </Badge>
                          )}
                        </div>
                      )}
                      {variant.sourceEntries.length > 0 && (
                        <SourceList orientation="inline" sources={variant.sourceEntries} />
                      )}
                    </div>
                  ) : (
                    <div class="rounded-sm border border-border/40 bg-muted/20 p-3 space-y-2">
                      <div class="flex flex-wrap items-center justify-between gap-2">
                        <span class="text-sm font-semibold text-foreground">
                          Base hardware specification
                        </span>
                        <Badge className="text-[10px] uppercase tracking-wide bg-primary/10 text-primary border-primary/20">
                          Default
                        </Badge>
                      </div>
                      {data.hardware.notes && (
                        <p class="text-xs leading-snug text-muted-foreground">{data.hardware.notes}</p>
                      )}
                    </div>
                  )}
                  <div class="overflow-x-auto">
                    <table class="w-full min-w-[640px] text-sm border-collapse">
                      <tbody>
                        <tr class="border-b-2 border-primary/20">
                          <td colspan="4" class="py-2 px-3 font-bold text-xs uppercase tracking-wider bg-primary/5">
                            <div class="flex items-center gap-2">
                              <Cpu className="w-4 h-4 text-primary" />
                              <span class="text-primary">Core Hardware</span>
                            </div>
                          </td>
                        </tr>
                        <tr class="border-b border-border hover:bg-muted/50 transition-colors">
                          <td class="py-2 px-3 text-muted-foreground font-medium w-1/4 text-xs uppercase">MCU</td>
                          <td class="py-2 px-3 font-mono font-semibold w-1/4 text-foreground">
                            {mcu?.data.title || mcu?.data.name || variant.spec.mcu}
                          </td>
                          <td class="py-2 px-3 text-muted-foreground font-medium w-1/4 text-xs uppercase">Mounting</td>
                          <td class="py-2 px-3 font-mono font-semibold w-1/4">
                            {mountingDisplay[variant.spec.mounting] ?? variant.spec.mounting}
                          </td>
                        </tr>
                        {variant.spec.dimensions && (
                          <tr class="border-b border-border bg-muted/20 hover:bg-muted/40 transition-colors">
                            <td class="py-2 px-3 text-muted-foreground font-medium text-xs uppercase">Dimensions</td>
                            <td class="py-2 px-3 font-mono font-semibold">
                              {variant.spec.dimensions.width_mm} × {variant.spec.dimensions.length_mm}
                              {variant.spec.dimensions.height_mm && ` × ${variant.spec.dimensions.height_mm}`} mm
                            </td>
                            {variant.spec.dimensions.weight_g && (
                              <>
                                <td class="py-2 px-3 text-muted-foreground font-medium text-xs uppercase">Weight</td>
                                <td class="py-2 px-3 font-mono font-semibold">
                                  {variant.spec.dimensions.weight_g}g
                                </td>
                              </>
                            )}
                          </tr>
                        )}
                        <tr class="border-b-2 border-primary/20">
                          <td colspan="4" class="py-2 px-3 font-bold text-xs uppercase tracking-wider bg-primary/5">
                            <div class="flex items-center gap-2">
                              <Zap className="w-4 h-4 text-amber-500" />
                              <span class="text-amber-600 dark:text-amber-500">Power</span>
                            </div>
                          </td>
                        </tr>
                        {variant.spec.power.inputs && variant.spec.power.inputs.length > 0 ? (
                          <>
                            <tr class="border-b border-border hover:bg-muted/50 transition-colors">
                              <td class="py-2 px-3 text-muted-foreground font-medium text-xs uppercase align-top">
                                Power Inputs
                              </td>
                              <td colspan="3" class="py-2 px-3">
                                <div class="space-y-2">
                                  {variant.spec.power.inputs.map((input, idx) => {
                                    const voltageLabel = formatVoltageRange(input.voltage);
                                    const typeLabel = getPowerTypeLabel(input.type);
                                    return (
                                      <div
                                        key={`${input.name}-${idx}`}
                                        class="rounded-sm border border-border/40 bg-muted/20 p-3 space-y-1"
                                      >
                                        <div class="flex flex-wrap items-center justify-between gap-2">
                                          <span class="font-mono font-semibold text-sm text-foreground">
                                            {input.name}
                                          </span>
                                          {typeLabel && (
                                            <span class="text-[10px] uppercase tracking-wide text-muted-foreground">
                                              {typeLabel}
                                            </span>
                                          )}
                                        </div>
                                        {input.connector && (
                                          <div class="text-xs text-muted-foreground">
                                            Connector:&nbsp;
                                            <span class="font-mono text-foreground">{input.connector}</span>
                                          </div>
                                        )}
                                        {voltageLabel && (
                                          <div class="text-xs text-muted-foreground">
                                            Voltage:&nbsp;
                                            <span class="font-semibold text-foreground">{voltageLabel}</span>
                                          </div>
                                        )}
                                        {input.notes && (
                                          <p class="text-xs text-muted-foreground leading-snug">{input.notes}</p>
                                        )}
                                      </div>
                                    );
                                  })}
                                </div>
                              </td>
                            </tr>
                            {variant.spec.power.redundant && (
                              <tr class="border-b border-border bg-muted/20">
                                <td class="py-2 px-3 text-muted-foreground font-medium text-xs uppercase">Redundancy</td>
                                <td class="py-2 px-3 font-semibold text-green-600 dark:text-green-400">✓ Yes</td>
                                <td colspan="2"></td>
                              </tr>
                            )}
                          </>
                        ) : (
                          <tr class="border-b border-border hover:bg-muted/50 transition-colors">
                            <td class="py-2 px-3 text-muted-foreground font-medium text-xs uppercase">Input Voltage</td>
                            <td class="py-2 px-3 font-mono font-semibold">
                              {variant.spec.power.voltage_in ?? '—'}
                            </td>
                            {variant.spec.power.redundant && (
                              <>
                                <td class="py-2 px-3 text-muted-foreground font-medium text-xs uppercase">Redundancy</td>
                                <td class="py-2 px-3 font-semibold text-green-600 dark:text-green-400">✓ Yes</td>
                              </>
                            )}
                          </tr>
                        )}
                        {variant.spec.power.notes && (
                          <tr class="border-b border-border bg-muted/20">
                            <td colspan="4" class="py-1.5 px-3 text-xs text-muted-foreground italic">
                              {variant.spec.power.notes}
                            </td>
                          </tr>
                        )}
                        <tr class="border-b-2 border-primary/20">
                          <td colspan="4" class="py-2 px-3 font-bold text-xs uppercase tracking-wider bg-primary/5">
                            <div class="flex items-center gap-2">
                              <Package className="w-4 h-4 text-blue-500" />
                              <span class="text-blue-600 dark:text-blue-400">Connectivity & I/O</span>
                            </div>
                          </td>
                        </tr>
                        <tr class="border-b border-border hover:bg-muted/50 transition-colors">
                          <td class="py-2 px-3 text-muted-foreground font-medium text-xs uppercase">UARTs</td>
                          <td class="py-2 px-3 font-mono font-semibold">{variant.spec.io.uarts}</td>
                          <td class="py-2 px-3 text-muted-foreground font-medium text-xs uppercase">CAN Bus</td>
                          <td class="py-2 px-3 font-mono font-semibold">{variant.spec.io.can}</td>
                        </tr>
                        <tr class="border-b border-border bg-muted/20 hover:bg-muted/40 transition-colors">
                          <td class="py-2 px-3 text-muted-foreground font-medium text-xs uppercase">PWM Outputs</td>
                          <td class="py-2 px-3 font-mono font-semibold">{variant.spec.io.pwm}</td>
                          <td class="py-2 px-3 text-muted-foreground font-medium text-xs uppercase">SD Card</td>
                          <td class="py-2 px-3 font-semibold">
                            {variant.spec.io.sd_card ? '✓ Yes' : '✗ No'}
                          </td>
                        </tr>
                        {variant.spec.io.ethernet !== undefined && (
                          <tr class="border-b border-border hover:bg-muted/50 transition-colors">
                            <td class="py-2 px-3 text-muted-foreground font-medium text-xs uppercase">Ethernet</td>
                            <td class="py-2 px-3 font-semibold">
                              {variant.spec.io.ethernet ? '✓ Yes' : '✗ No'}
                            </td>
                            <td colspan="2"></td>
                          </tr>
                        )}
                        {variant.spec.io.peripherals && variant.spec.io.peripherals.length > 0 && (
                          <tr class="border-b border-border bg-muted/20">
                            <td class="py-2 px-3 text-muted-foreground font-medium align-top text-xs uppercase">
                              <div class="flex items-center gap-2 text-primary">
                                <Cable className="w-4 h-4" />
                                <span>Peripheral Ports</span>
                              </div>
                            </td>
                            <td colspan="3" class="py-2 px-3">
                              <div class="grid gap-3 sm:grid-cols-2">
                                {variant.spec.io.peripherals.map((peripheral, idx) => (
                                  <div
                                    class="rounded-sm border border-border/40 bg-background/70 p-3 shadow-xs"
                                    key={`${peripheral.name}-${idx}`}
                                  >
                                    <div class="flex items-center justify-between gap-2">
                                      <span class="font-semibold text-sm text-foreground">
                                        {peripheral.name}
                                        {peripheral.count && (
                                          <span class="ml-1 text-xs text-muted-foreground font-medium">
                                            ×{peripheral.count}
                                          </span>
                                        )}
                                      </span>
                                      <Badge className="text-[10px] uppercase tracking-wide">
                                        {peripheralTypeLabel(peripheral.type)}
                                      </Badge>
                                    </div>
                                    {peripheral.interfaces && peripheral.interfaces.length > 0 && (
                                      <div class="mt-2 flex flex-wrap gap-1.5">
                                        {peripheral.interfaces.map((iface) => (
                                          <Badge
                                            variant="secondary"
                                            className="text-[10px] uppercase tracking-wide"
                                            key={`${peripheral.name}-${iface}`}
                                          >
                                            {iface.replace(/_/g, ' ')}
                                          </Badge>
                                        ))}
                                      </div>
                                    )}
                                    {peripheral.connector && (
                                      <p class="mt-2 text-xs text-muted-foreground">
                                        <span class="font-medium text-foreground">Connector:</span>&nbsp;{peripheral.connector}
                                      </p>
                                    )}
                                    {peripheral.voltage && (
                                      <p class="text-xs text-muted-foreground">
                                        <span class="font-medium text-foreground">Voltage:</span> {peripheral.voltage}
                                      </p>
                                    )}
                                    {peripheral.notes && (
                                      <p class="text-xs text-muted-foreground leading-snug mt-1">
                                        {peripheral.notes}
                                      </p>
                                    )}
                                  </div>
                                ))}
                              </div>
                            </td>
                          </tr>
                        )}
                        <tr class="border-b-2 border-primary/20">
                          <td colspan="4" class="py-2 px-3 font-bold text-xs uppercase tracking-wider bg-primary/5">
                            <div class="flex items-center gap-2">
                              <Box className="w-4 h-4 text-purple-500" />
                              <span class="text-purple-600 dark:text-purple-400">Onboard Sensors</span>
                            </div>
                          </td>
                        </tr>
                        {variant.sensorDetails.imu.length > 0 && (
                          <tr class="border-b border-border hover:bg-muted/50 transition-colors">
                            <td class="py-2 px-3 text-muted-foreground font-medium align-top text-xs uppercase">IMU</td>
                            <td colspan="3" class="py-2 px-3">
                              {variant.sensorDetails.imu.map((sensor, idx) => (
                                <a
                                  key={`${sensor.id}-${idx}`}
                                  href={`${basePath}/sensors/${sensor.id}`}
                                  class="inline-flex items-center mr-4 mb-1 text-foreground hover:text-primary transition-colors"
                                >
                                  <span class="font-mono font-semibold text-sm">
                                    {sensor.name ?? sensor.id}
                                  </span>
                                  {sensor.count && sensor.count > 1 && (
                                    <span class="text-xs text-muted-foreground ml-1.5 font-medium">
                                      ×{sensor.count}
                                    </span>
                                  )}
                                </a>
                              ))}
                            </td>
                          </tr>
                        )}
                        {variant.sensorDetails.barometer.length > 0 && (
                          <tr class="border-b border-border bg-muted/20 hover:bg-muted/40 transition-colors">
                            <td class="py-2 px-3 text-muted-foreground font-medium align-top text-xs uppercase">
                              Barometer
                            </td>
                            <td colspan="3" class="py-2 px-3">
                              {variant.sensorDetails.barometer.map((sensor, idx) => (
                                <a
                                  key={`${sensor.id}-${idx}`}
                                  href={`${basePath}/sensors/${sensor.id}`}
                                  class="inline-flex items-center mr-4 mb-1 text-foreground hover:text-primary transition-colors"
                                >
                                  <span class="font-mono font-semibold text-sm">
                                    {sensor.name ?? sensor.id}
                                  </span>
                                  {sensor.count && sensor.count > 1 && (
                                    <span class="text-xs text-muted-foreground ml-1.5 font-medium">
                                      ×{sensor.count}
                                    </span>
                                  )}
                                </a>
                              ))}
                            </td>
                          </tr>
                        )}
                        {variant.sensorDetails.magnetometer.length > 0 && (
                          <tr class="border-b border-border hover:bg-muted/50 transition-colors">
                            <td class="py-2 px-3 text-muted-foreground font-medium align-top text-xs uppercase">
                              Magnetometer
                            </td>
                            <td colspan="3" class="py-2 px-3">
                              {variant.sensorDetails.magnetometer.map((sensor, idx) => (
                                <a
                                  key={`${sensor.id}-${idx}`}
                                  href={`${basePath}/sensors/${sensor.id}`}
                                  class="inline-flex items-center mr-4 mb-1 text-foreground hover:text-primary transition-colors"
                                >
                                  <span class="font-mono font-semibold text-sm">
                                    {sensor.name ?? sensor.id}
                                  </span>
                                  {sensor.count && sensor.count > 1 && (
                                    <span class="text-xs text-muted-foreground ml-1.5 font-medium">
                                      ×{sensor.count}
                                    </span>
                                  )}
                                </a>
                              ))}
                            </td>
                          </tr>
                        )}
                        {data.features && data.features.length > 0 && (
                          <>
                            <tr class="border-b-2 border-primary/20">
                              <td colspan="4" class="py-2 px-3 font-bold text-xs uppercase tracking-wider bg-primary/5">
                                <div class="flex items-center gap-2">
                                  <Layers className="w-4 h-4 text-emerald-500" />
                                  <span class="text-emerald-600 dark:text-emerald-400">Additional Features</span>
                                </div>
                              </td>
                            </tr>
                            <tr class="border-b border-border">
                              <td colspan="4" class="py-3 px-3">
                                <ul class="grid grid-cols-2 gap-x-4 gap-y-1.5 text-sm">
                                  {data.features.map((feature) => (
                                    <li class="flex items-start gap-2" key={feature}>
                                      <span class="text-emerald-600 dark:text-emerald-400 font-bold text-sm mt-0.5">✓</span>
                                      <span class="font-medium">{feature}</span>
                                    </li>
                                  ))}
                                </ul>
                              </td>
                            </tr>
                          </>
                        )}
                      </tbody>
                    </table>
                  </div>
                </section>
              ))}
            </div>
            {hasMultipleVariants && (
              <script type="module">
                const script = document.currentScript;
                const root = script?.parentElement?.querySelector('[data-revision-root]');
                if (!root) return;
                const defaultId = root.dataset.defaultVariant;
                const tabs = Array.from(root.querySelectorAll('[data-revision-tab]'));
                const panels = Array.from(root.querySelectorAll('[data-revision-panel]'));
                const select = root.querySelector('[data-revision-select]');
                const activeClasses = ['bg-primary/10', 'border-primary/40', 'text-primary'];
                const inactiveClasses = ['bg-muted/30', 'border-border/60', 'text-muted-foreground'];
                const setActive = (id) => {
                  panels.forEach((panel) => {
                    const isActive = panel.dataset.revisionPanel === id;
                    panel.classList.toggle('hidden', !isActive);
                    panel.setAttribute('aria-hidden', isActive ? 'false' : 'true');
                  });
                  tabs.forEach((tab) => {
                    const isActive = tab.dataset.revisionTab === id;
                    tab.setAttribute('aria-selected', isActive ? 'true' : 'false');
                    activeClasses.forEach((cls) => tab.classList.toggle(cls, isActive));
                    inactiveClasses.forEach((cls) => tab.classList.toggle(cls, !isActive));
                  });
                  if (select && select.value !== id) {
                    select.value = id;
                  }
                };
                tabs.forEach((tab) => {
                  tab.addEventListener('click', () => setActive(tab.dataset.revisionTab));
                });
                if (select) {
                  select.addEventListener('change', (event) => setActive(event.target.value));
                }
                if (defaultId) {
                  setActive(defaultId);
                }
              </script>
            )}
          </CardContent>
        </Card>
      </div>

      <!-- Right Column - Professional Sidebar -->
      <div class="space-y-4">
        <!-- Firmware & Info Combined -->
        <Card>
          <CardHeader>
            <CardTitle className="text-base font-bold uppercase tracking-wide text-primary">Quick Reference</CardTitle>
          </CardHeader>
          <CardContent>
            <table class="w-full text-xs border-collapse">
              <tbody>
                <!-- Firmware Section -->
                <tr class="border-b-2 border-primary/20">
                  <td colspan="2" class="py-1.5 px-2 font-bold text-xs uppercase tracking-wider bg-primary/5 text-primary">Firmware Support</td>
                </tr>
                {firmware.map((fw, idx) => (
                  <tr class={`border-b border-border ${idx % 2 === 0 ? 'bg-muted/10' : ''} hover:bg-muted/30 transition-colors`}>
                    <td class="py-1.5 px-2 font-semibold">{fw.name}</td>
                    <td class="py-1.5 px-2 text-right">
                      <Badge className={firmwareStatusColor[fw.status] + " text-xs px-1.5 py-0.5 font-medium"}>
                        {fw.status}
                      </Badge>
                    </td>
                  </tr>
                ))}
                
                <!-- Info Section -->
                <tr class="border-b-2 border-primary/20">
                  <td colspan="2" class="py-1.5 px-2 font-bold text-xs uppercase tracking-wider bg-primary/5 text-primary">Information</td>
                </tr>
                <tr class="border-b border-border hover:bg-muted/30 transition-colors">
                  <td class="py-1.5 px-2 text-muted-foreground font-medium">Verification</td>
                  <td class="py-1.5 px-2 text-right">
                    <Badge className={verificationColor[data.verification.level] + " text-xs px-1.5 py-0.5 font-medium"}>
                      {data.verification.level.charAt(0).toUpperCase() + data.verification.level.slice(1)}
                    </Badge>
                  </td>
                </tr>
                <tr class="border-b border-border bg-muted/10 hover:bg-muted/30 transition-colors">
                  <td class="py-1.5 px-2 text-muted-foreground font-medium">Hardware</td>
                  <td class="py-1.5 px-2 text-right">
                    <Badge className="bg-primary/10 text-primary border-primary/20 text-xs px-1.5 py-0.5 font-medium">
                      {data.hardware.openness.charAt(0).toUpperCase() + data.hardware.openness.slice(1)}
                    </Badge>
                  </td>
                </tr>
                <tr class="border-b border-border hover:bg-muted/30 transition-colors">
                  <td class="py-1.5 px-2 text-muted-foreground font-medium">Updated</td>
                  <td class="py-1.5 px-2 font-mono font-semibold text-right text-xs">{data.verification.last_updated}</td>
                </tr>
                {controllerSourceEntries.length > 0 && (
                  <tr class="border-b border-border bg-muted/10 hover:bg-muted/30 transition-colors">
                    <td class="py-1.5 px-2 text-muted-foreground font-medium">Sources</td>
                    <td class="py-1.5 px-2 text-right">
                      <a
                        href="#controller-data-sources"
                        class="text-xs font-semibold text-primary hover:underline"
                      >
                        View {controllerSourceEntries.length} source{controllerSourceEntries.length === 1 ? '' : 's'}
                      </a>
                    </td>
                  </tr>
                )}
                {manufacturer?.data.website && (
                  <tr class="hover:bg-muted/30 transition-colors">
                    <td class="py-1.5 px-2 text-muted-foreground font-medium">Manufacturer</td>
                    <td class="py-1.5 px-2 text-right">
                      <a 
                        href={manufacturer.data.website} 
                        target="_blank" 
                        rel="noopener noreferrer"
                        class="font-semibold hover:text-primary transition-colors text-xs inline-flex items-center gap-1"
                      >
                        {manufacturer.data.name}
                        <span class="text-primary">→</span>
                      </a>
                    </td>
                  </tr>
                )}
              </tbody>
            </table>
          </CardContent>
        </Card>
        {controllerSourceEntries.length > 0 && (
          <Card id="controller-data-sources">
            <CardHeader>
              <CardTitle className="text-base font-bold uppercase tracking-wide text-primary">
                Data Sources
              </CardTitle>
              <CardDescription className="text-xs text-muted-foreground">
                References backing this controller profile.
              </CardDescription>
            </CardHeader>
            <CardContent>
              <SourceList sources={controllerSourceEntries} />
            </CardContent>
          </Card>
        )}
        {hardwareRevisionSummaries.length > 0 && (
          <Card>
            <CardHeader>
              <CardTitle className="text-base font-bold uppercase tracking-wide text-primary">
                Hardware Revisions
              </CardTitle>
              {data.hardware.notes && (
                <CardDescription className="text-xs text-muted-foreground leading-relaxed">
                  {data.hardware.notes}
                </CardDescription>
              )}
            </CardHeader>
            <CardContent>
              <div class="space-y-3">
                {hardwareRevisionSummaries.map((variant) => {
                  const revision = variant.revision!;
                  return (
                    <div
                      key={variant.id}
                      class="rounded-sm border border-border/40 bg-background/70 p-3 shadow-xs"
                    >
                      <div class="flex flex-wrap items-center justify-between gap-2">
                        <span class="font-semibold text-sm text-foreground">{variant.label}</span>
                        {revision.released && (
                          <Badge className="text-[10px] uppercase tracking-wide bg-primary/10 text-primary border-primary/20">
                            {revision.released}
                          </Badge>
                        )}
                      </div>
                      {revision.notes && (
                        <p class="mt-1 text-xs leading-snug text-muted-foreground">{revision.notes}</p>
                      )}
                      {revision.changes && revision.changes.length > 0 && (
                        <ul class="mt-2 space-y-1">
                          {revision.changes.map((change, changeIdx) => (
                            <li
                              key={`${variant.id}-change-${changeIdx}`}
                              class="flex items-start gap-2 text-xs text-muted-foreground"
                            >
                              <span class="text-primary font-bold mt-0.5">•</span>
                              <span class="leading-snug text-foreground">{change}</span>
                            </li>
                          ))}
                        </ul>
                      )}
                      {revision.overrides && (
                        <div class="mt-2 flex flex-wrap gap-1.5">
                          {revision.overrides.sensors && (
                            <Badge className="text-[10px] uppercase tracking-wide bg-purple-500/10 text-purple-500 border-purple-500/30">
                              Sensor overrides
                            </Badge>
                          )}
                          {revision.overrides.io && (
                            <Badge className="text-[10px] uppercase tracking-wide bg-blue-500/10 text-blue-500 border-blue-500/30">
                              I/O overrides
                            </Badge>
                          )}
                          {revision.overrides.power && (
                            <Badge className="text-[10px] uppercase tracking-wide bg-amber-500/10 text-amber-500 border-amber-500/30">
                              Power overrides
                            </Badge>
                          )}
                        </div>
                      )}
                      {variant.sourceEntries.length > 0 && (
                        <div class="mt-2">
                          <SourceList orientation="inline" sources={variant.sourceEntries} />
                        </div>
                      )}
                    </div>
                  );
                })}
              </div>
            </CardContent>
          </Card>
        )}
      </div>
    </div>
    </div>
  </MainLayout>
</BaseLayout>
