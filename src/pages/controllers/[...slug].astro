---
import { getCollection, getEntry } from 'astro:content';
import { buildRevisionVariants, type KnownIssue } from '@/content/config';
import DetailHeader from '@/components/detail/DetailHeader.astro';
import DetailPageLayout from '@/components/detail/DetailPageLayout.astro';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/Card';
import { Badge } from '@/components/ui/Badge';
import StatusBadge from '@/components/ui/StatusBadge.astro';
import SpecItem from '@/components/ui/SpecItem.astro';
import ProfessionalTable from '@/components/table/ProfessionalTable.astro';
import TableSection from '@/components/table/TableSection.astro';
import TableRow from '@/components/table/TableRow.astro';
import TableRow2Col from '@/components/table/TableRow2Col.astro';
import SensorList from '@/components/SensorList.astro';
import { GITHUB_EDIT_BASE_URL } from '@/lib/constants';
import {
  extractUniqueSensorIds,
  mapSensorsWithNames,
  getManufacturerName,
  formatMounting,
  formatVoltageRange,
  formatDimensions,
  formatWeight,
  getPowerTypeLabel,
  formatPeripheralType,
  normalizePeripheralInterfaces,
} from '@/lib/data-utils';
import { resolveControllerPreviewImage } from '@/lib/controller-images';
import {
  getFirmwareMap,
  getManufacturersMap,
  getSensorsMap,
  getSourcesMap,
} from '@/lib/content-cache';
import { createControllerProductLd, resolveControllerSummary } from '@/lib/controller-seo';
import {
  Cpu,
  Package,
  Zap,
  Cable,
  Layers,
  AlertTriangle,
  BookOpen,
  CircuitBoard,
  Github,
  Store,
  ExternalLink,
  Pencil,
} from 'lucide-react';
import { getBasePath } from '@/lib/paths';
import { Picture } from 'astro:assets';

export async function getStaticPaths() {
  const controllers = await getCollection('controllers');
  return controllers.map((controller) => ({
    params: { slug: controller.id },
    props: { controller },
  }));
}

const { controller } = Astro.props;
const { data } = controller;

const previewImage = resolveControllerPreviewImage(controller) ?? null;
const heroAlt = previewImage?.alt ?? data.title;

const heroSizes = '(max-width: 1024px) 100vw, 600px';

const heroImage = previewImage?.src && typeof previewImage.src !== 'string' ? previewImage.src : null;

const remotePreview = previewImage && typeof previewImage.src === 'string'
  ? {
      src: previewImage.src,
      width: previewImage.width ?? 1280,
      height: previewImage.height ?? 720,
    }
  : null;

// Fetch related data
const manufacturers = await getManufacturersMap();
const manufacturer = data.brand ? manufacturers.get(data.brand) ?? null : null;
const manufacturerName = getManufacturerName(manufacturer, data.brand);
const mcu = data.mcu ? await getEntry('mcu', data.mcu) : null;
const firmwareMap = await getFirmwareMap();
const firmware = data.firmware_support.map((fw) => {
  const entry = firmwareMap.get(fw.id);
  return { ...fw, name: entry?.data.title || entry?.data.name || fw.id };
});

const revisionVariants = buildRevisionVariants(data);

// Use data-utils for sensor deduplication
const uniqueSensorIds = extractUniqueSensorIds(revisionVariants);
const sensorsMap = await getSensorsMap();
const sensorMetadataMap = new Map<
  string,
  { name: string; issues: KnownIssue[] }
>();
const sensorNameMap = new Map<string, string>();

const registerSensorMetadata = (sensorId: string) => {
  if (!sensorMetadataMap.has(sensorId)) {
    const entry = sensorsMap.get(sensorId);
    const name = entry?.data.title ?? entry?.data.name ?? sensorId;
    const issues = Array.isArray(entry?.data.known_issues)
      ? entry.data.known_issues
      : [];
    sensorMetadataMap.set(sensorId, { name, issues });
    sensorNameMap.set(sensorId, name);
  }

  return sensorMetadataMap.get(sensorId)!;
};

uniqueSensorIds.forEach((sensorId) => {
  registerSensorMetadata(sensorId);
});

const sourcesMap = await getSourcesMap();

const revisionVariantsWithSensors = revisionVariants.map((variant) => {
  const revision = variant.revision;
  const sourceEntries = revision?.sources
    ? revision.sources.map((sourceId) => {
        const entry = sourcesMap.get(sourceId);
        return {
          id: sourceId,
          title: entry?.data.title ?? sourceId,
          url: entry?.data.url ?? null,
        };
      })
    : [];

  (['imu', 'barometer', 'magnetometer'] as const).forEach((category) => {
    variant.spec.sensors?.[category]?.forEach((sensor) => {
      registerSensorMetadata(sensor.id);
    });
  });

  const sensorDetails = {
    imu: mapSensorsWithNames(variant.spec.sensors?.imu, sensorNameMap),
    barometer: mapSensorsWithNames(variant.spec.sensors?.barometer, sensorNameMap),
    magnetometer: mapSensorsWithNames(variant.spec.sensors?.magnetometer, sensorNameMap),
  };

  return {
    ...variant,
    sourceEntries,
    sensorDetails,
  };
});

const defaultVariantId = revisionVariantsWithSensors[0]?.id ?? 'base';
const hasMultipleVariants = revisionVariantsWithSensors.length > 1;
const hardwareRevisionSummaries = revisionVariantsWithSensors.filter(
  (variant) => variant.revision
);

const basePath = getBasePath();
const manufacturerUrl = manufacturer ? `${basePath}/manufacturers/${manufacturer.id}` : null;
const controllerSlug = (controller as { slug?: string }).slug ?? controller.id;
const tabsIdBase = `controller-tabs-${controllerSlug.replace(/[^a-z0-9-]+/gi, '-').toLowerCase()}`;
const editPath = `src/content/controllers/${controllerSlug}.yaml`;
const mcuName = mcu?.data.title ?? mcu?.data.name ?? data.mcu;
const formattedMounting = data.mounting ? formatMounting(data.mounting) : 'Custom';
const summaryResult = resolveControllerSummary(data, () =>
  `Detailed specifications for the ${data.title} flight controller by ${manufacturerName}, built around the ${mcuName ?? 'primary'} MCU with a ${formattedMounting} mounting pattern.`
);
const pageDescription = summaryResult.metaDescription;
const pageTitle = `${data.title} by ${manufacturerName} | FCBase`;
const canonicalUrl = Astro.site
  ? new URL(`controllers/${controllerSlug}`, Astro.site).toString()
  : `${basePath}/controllers/${controllerSlug}`;
const ogTitle = pageTitle;
const ogImagePath = `${basePath}/controllers/og/${controllerSlug}.png`;
const ogImageUrl = Astro.site
  ? new URL(`controllers/og/${controllerSlug}.png`, Astro.site).toString()
  : ogImagePath;
const ogImageAlt = `${data.title} flight controller technical summary`;

const mcuFamilyName = mcu?.data.family ?? data.mcu_family ?? null;
const hasSdCard = data.io?.sd_card === true;
const canCount = typeof data.io?.can === 'number' ? data.io.can : null;
const hasCanBus = typeof canCount === 'number' ? canCount > 0 : Boolean(data.io?.can === true);
const uartsCount = typeof data.io?.uarts === 'number' ? data.io.uarts : null;
const additionalProperties = [
  data.mcu
    ? { '@type': 'PropertyValue', name: 'MCU', value: mcuName ?? data.mcu }
    : null,
  typeof data.io?.uarts === 'number'
    ? { '@type': 'PropertyValue', name: 'UARTs', value: data.io.uarts }
    : null,
  typeof data.io?.can === 'number'
    ? { '@type': 'PropertyValue', name: 'CAN', value: data.io.can }
    : null,
  typeof data.io?.sd_card === 'boolean'
    ? { '@type': 'PropertyValue', name: 'SD', value: data.io.sd_card ? 'Yes' : 'No' }
    : null,
  data.mounting
    ? { '@type': 'PropertyValue', name: 'Mounting', value: formattedMounting }
    : null,
].filter(Boolean);
const productLd = createControllerProductLd({
  controllerId: controller.id,
  title: data.title,
  description: summaryResult.summary,
  canonicalUrl,
  imageUrl: ogImageUrl,
  manufacturerName,
  additionalProperties,
});
const productLdJson = JSON.stringify(productLd, null, 2);

const normalizedEditPath = editPath.replace(/^\/+/, '');
const editUrl = normalizedEditPath ? `${GITHUB_EDIT_BASE_URL}/${normalizedEditPath}` : null;

const countPeripheralsByType = (type: string) =>
  data.io.peripherals?.reduce((total, peripheral) => {
    if (peripheral.type !== type) return total;
    return total + (typeof peripheral.count === 'number' ? peripheral.count : 1);
  }, 0) ?? 0;

const i2cCount = countPeripheralsByType('i2c');
const spiCount = countPeripheralsByType('spi');

const ioSummaryParts: string[] = [];
if (typeof data.io.uarts === 'number') {
  ioSummaryParts.push(`${data.io.uarts} UART${data.io.uarts === 1 ? '' : 's'}`);
}
if (i2cCount > 0) {
  ioSummaryParts.push(`${i2cCount} I²C`);
}
if (spiCount > 0) {
  ioSummaryParts.push(`${spiCount} SPI`);
}
if (typeof data.io.can === 'number' && data.io.can > 0) {
  ioSummaryParts.push(`${data.io.can} CAN`);
}
const ioSummary = ioSummaryParts.length > 0 ? ioSummaryParts.join(' • ') : '—';

const pwmSummaryParts: string[] = [];
if (typeof data.io.pwm === 'number') {
  pwmSummaryParts.push(`${data.io.pwm} PWM ${data.io.pwm === 1 ? 'output' : 'outputs'}`);
}
pwmSummaryParts.push(data.io.sd_card ? 'microSD logging' : 'no microSD slot');
const pwmSummary = pwmSummaryParts.join(' • ');

const sumSensorCount = (list?: Array<{ count?: number }>) =>
  list?.reduce((total, entry) => total + (typeof entry.count === 'number' ? entry.count : 1), 0) ?? 0;

const imuCount = sumSensorCount(data.sensors?.imu);
const barometerCount = sumSensorCount(data.sensors?.barometer);
const magnetometerCount = sumSensorCount(data.sensors?.magnetometer);

const sensorSummaryParts: string[] = [];
if (imuCount > 0) sensorSummaryParts.push(`${imuCount}× IMU`);
if (barometerCount > 0) sensorSummaryParts.push(`${barometerCount}× Barometer`);
if (magnetometerCount > 0) sensorSummaryParts.push(`${magnetometerCount}× Magnetometer`);
const sensorSummary =
  sensorSummaryParts.length > 0 ? sensorSummaryParts.join(' • ') : 'No onboard sensors catalogued';

let powerSummary = data.power.voltage_in ?? '';
const primaryPowerInput = data.power.inputs?.[0];
if (!powerSummary && primaryPowerInput) {
  const voltageDescription = formatVoltageRange(primaryPowerInput.voltage);
  const typeLabel = getPowerTypeLabel(primaryPowerInput.type);
  const combined = [voltageDescription, typeLabel].filter(Boolean).join(' • ');
  powerSummary = combined || primaryPowerInput.notes || '';
}
if (!powerSummary && data.power.notes) {
  powerSummary = data.power.notes;
}
powerSummary = powerSummary || 'See detailed power specifications';

const severityStyles = {
  info: { label: 'Info', className: 'bg-sky-500/10 text-sky-600 border-sky-500/20' },
  low: { label: 'Low', className: 'bg-emerald-500/10 text-emerald-600 border-emerald-500/30' },
  medium: { label: 'Medium', className: 'bg-amber-500/10 text-amber-600 border-amber-500/30' },
  high: { label: 'High', className: 'bg-rose-500/10 text-rose-500 border-rose-500/30' },
  critical: { label: 'Critical', className: 'bg-red-600/10 text-red-600 border-red-600/30' },
} as const;

const sensorCategoryLabels = {
  imu: 'IMU',
  barometer: 'Barometer',
  magnetometer: 'Magnetometer',
} as const;

type SeverityKey = keyof typeof severityStyles;
type IssueOrigin =
  | { type: 'controller' }
  | {
      type: 'sensor';
      sensorId: string;
      sensorName: string;
      sensorCategory: keyof typeof sensorCategoryLabels;
    };

type DisplayIssue = KnownIssue & {
  severityKey: SeverityKey;
  severityMeta: (typeof severityStyles)[SeverityKey];
  sourceTitle: string;
  sourceUrl: string | null;
  displayDate: string | null;
  origin: IssueOrigin;
};

const resolveIssue = (issue: KnownIssue, origin: IssueOrigin): DisplayIssue => {
  const severityKey: SeverityKey =
    issue.severity in severityStyles ? (issue.severity as SeverityKey) : 'medium';
  const severityMeta = severityStyles[severityKey];
  const sourceEntry = sourcesMap.get(issue.source) ?? null;
  const sourceTitle = sourceEntry?.data.title ?? issue.source;
  const sourceUrl = issue.url ?? sourceEntry?.data.url ?? null;
  let displayDate: string | null = null;
  if (issue.date) {
    const parsed = new Date(issue.date);
    displayDate = Number.isNaN(parsed.valueOf())
      ? issue.date
      : parsed.toLocaleDateString('en-US', {
          year: 'numeric',
          month: 'short',
          day: 'numeric',
        });
  }

  return {
    ...issue,
    severityKey,
    severityMeta,
    sourceTitle,
    sourceUrl,
    displayDate,
    origin,
  };
};

const variantIssueBuckets = revisionVariantsWithSensors.map((variant) => {
  const seen = new Set<string>();
  const issues: DisplayIssue[] = [];

  const addIssue = (issue: KnownIssue, origin: IssueOrigin) => {
    const dedupeKey = [
      origin.type,
      origin.type === 'sensor'
        ? `${origin.sensorId}:${origin.sensorCategory}`
        : 'controller',
      issue.id ?? issue.title,
      issue.date,
    ].join('|');

    if (seen.has(dedupeKey)) {
      return;
    }

    seen.add(dedupeKey);
    issues.push(resolveIssue(issue, origin));
  };

  (variant.spec.known_issues ?? []).forEach((issue) => {
    addIssue(issue, { type: 'controller' });
  });

  (['imu', 'barometer', 'magnetometer'] as const).forEach((category) => {
    variant.spec.sensors?.[category]?.forEach((sensor) => {
      const metadata = registerSensorMetadata(sensor.id);
      const sensorIssues = metadata.issues ?? [];
      sensorIssues.forEach((sensorIssue) => {
        addIssue(sensorIssue, {
          type: 'sensor',
          sensorId: sensor.id,
          sensorName: metadata.name,
          sensorCategory: category,
        });
      });
    });
  });

  issues.sort((a, b) => (a.date > b.date ? -1 : a.date < b.date ? 1 : 0));

  return {
    id: variant.id,
    label: variant.label,
    issues,
  };
});

type ResolvedLink = { url: string; label: string | null; description: string | null } | null;
const resolveLinkEntry = (entry: unknown): ResolvedLink => {
  if (!entry) return null;
  if (typeof entry === 'string') {
    return { url: entry, label: null, description: null };
  }
  if (typeof entry === 'object' && entry !== null && 'url' in entry) {
    const { url, label, description } = entry as {
      url: string;
      label?: string | null;
      description?: string | null;
    };
    return { url, label: label ?? null, description: description ?? null };
  }

  return null;
};

const controllerLinks = {
  docs: resolveLinkEntry(data.links?.docs),
  pinout: resolveLinkEntry(data.links?.pinout),
  vendor: resolveLinkEntry(data.links?.vendor),
  github: resolveLinkEntry(data.links?.github),
};

type LinkItem = {
  key: string;
  label: string;
  description: string;
  href: string;
  icon: typeof BookOpen;
};

const linkItems: LinkItem[] = [];

if (controllerLinks.docs?.url) {
  linkItems.push({
    key: 'docs',
    label: controllerLinks.docs.label ?? 'Documentation',
    description:
      controllerLinks.docs.description ?? 'Official setup guides and reference manuals.',
    href: controllerLinks.docs.url,
    icon: BookOpen,
  });
}

if (controllerLinks.pinout?.url) {
  linkItems.push({
    key: 'pinout',
    label: controllerLinks.pinout.label ?? 'Pinout Diagram',
    description:
      controllerLinks.pinout.description ?? 'Connector maps and wiring references.',
    href: controllerLinks.pinout.url,
    icon: CircuitBoard,
  });
}

if (controllerLinks.vendor?.url) {
  linkItems.push({
    key: 'vendor',
    label: controllerLinks.vendor.label ?? 'Vendor Page',
    description:
      controllerLinks.vendor.description ?? 'Official product listings and purchasing options.',
    href: controllerLinks.vendor.url,
    icon: Store,
  });
}

if (controllerLinks.github?.url) {
  linkItems.push({
    key: 'github',
    label: controllerLinks.github.label ?? 'GitHub Repository',
    description:
      controllerLinks.github.description ?? 'Hardware design files or firmware resources.',
    href: controllerLinks.github.url,
    icon: Github,
  });
}

if (editUrl) {
  linkItems.push({
    key: 'edit',
    label: 'Edit on GitHub',
    description: 'Propose improvements to this controller entry.',
    href: editUrl,
    icon: Pencil,
  });
}

const hasLinkItems = linkItems.length > 0;
---

<DetailPageLayout
  title={pageTitle}
  description={pageDescription}
  editPath={editPath}
  breadcrumbs={[
    { href: `${basePath}/`, label: 'Home' },
    { href: `${basePath}/controllers`, label: 'Controllers' },
    { label: data.title },
  ]}
>
  <Fragment slot="head">
    <link rel="canonical" href={canonicalUrl} />
    <meta property="og:title" content={ogTitle} />
    <meta property="og:description" content={pageDescription} />
    <meta property="og:type" content="product" />
    <meta property="og:url" content={canonicalUrl} />
    <meta property="og:image" content={ogImageUrl} />
    <meta property="og:image:alt" content={ogImageAlt} />
    <meta property="og:image:width" content="1200" />
    <meta property="og:image:height" content="630" />
    <meta property="og:site_name" content="FCBase" />
    <meta name="twitter:card" content="summary_large_image" />
    <meta name="twitter:title" content={ogTitle} />
    <meta name="twitter:description" content={pageDescription} />
    <meta name="twitter:image" content={ogImageUrl} />
    <meta name="twitter:image:alt" content={ogImageAlt} />
    <script type="application/ld+json" is:inline>{productLdJson}</script>
  </Fragment>
  <DetailHeader
    slot="header"
    title={data.title}
    subtitle={`by ${manufacturerName}`}
    description={data.notes}
    compareId={controller.id}
  >
    <StatusBadge 
      slot="badges" 
      variant="verification" 
      status={data.verification.level}
      showIcon
      size="sm"
    />
    <StatusBadge 
      slot="badges" 
      variant="hardware" 
      status={data.hardware.openness}
      size="sm"
    >
      {data.hardware.openness.charAt(0).toUpperCase() + data.hardware.openness.slice(1)} Hardware
    </StatusBadge>
  </DetailHeader>

  <!-- Hero Split-Screen Banner -->
  {previewImage && (
    <div class="relative w-full mb-8 overflow-hidden rounded-xl border border-border shadow-lg bg-background">
      <div class="grid grid-cols-1 lg:grid-cols-5 gap-0">
        <!-- Image Section - 60% width on desktop -->
        <div class="lg:col-span-3 bg-gradient-to-br from-muted/50 via-background to-muted/30 p-8 lg:p-12 flex items-center justify-center">
          <div class="relative w-full max-h-[400px] flex items-center justify-center">
            {heroImage ? (
              <Picture
                src={heroImage}
                widths={[320, 640, 960]}
                formats={["avif", "webp"]}
                sizes={heroSizes}
                alt={heroAlt}
                loading="lazy"
                decoding="async"
                pictureClass="w-full h-full"
                imgClass="w-full h-full object-contain max-h-[400px]"
              />
            ) : remotePreview ? (
              <img
                src={remotePreview.src}
                alt={heroAlt}
                loading="lazy"
                decoding="async"
                width={remotePreview.width}
                height={remotePreview.height}
                class="w-full h-full object-contain max-h-[400px]"
              />
            ) : (
              <div class="flex h-full w-full items-center justify-center text-sm font-medium text-muted-foreground min-h-[300px]">
                {heroAlt}
              </div>
            )}
          </div>
        </div>

        <!-- Quick Specs Section - 40% width on desktop -->
        <div class="lg:col-span-2 bg-muted/20 p-6 lg:p-8 border-t lg:border-t-0 lg:border-l border-border/40">
          <div class="space-y-6">
            <div>
              <h3 class="text-sm uppercase tracking-wide font-bold text-foreground mb-4 pb-2 border-b border-border/40">Key Specifications</h3>
              <div class="space-y-4">
                {/* MCU */}
                <SpecItem 
                  icon={Cpu} 
                  label="MCU" 
                  value={mcuName}
                  iconClass="text-muted-foreground"
                />
                
                {/* Mounting */}
                <SpecItem 
                  icon={Package} 
                  label="Mounting Pattern" 
                  value={formattedMounting}
                  iconClass="text-muted-foreground"
                />
                
                {/* I/O Summary */}
                {ioSummary !== '—' && (
                  <SpecItem
                    icon={Cable}
                    label="Connectivity"
                    value={ioSummary}
                    iconClass="text-muted-foreground"
                  />
                )}

                {/* Power */}
                <SpecItem
                  icon={Zap}
                  label="Power"
                  value={powerSummary}
                  iconClass="text-muted-foreground"
                />

                {/* Sensors Summary */}
                <SpecItem
                  icon={Layers}
                  label="Onboard Sensors"
                  value={sensorSummary}
                  iconClass="text-muted-foreground"
                />
              </div>
            </div>

            {/* Firmware Support Badges */}
            {firmware.length > 0 && (
              <div class="pt-4 border-t border-border/40">
                <div class="text-xs uppercase tracking-wide font-semibold text-muted-foreground mb-3">
                  Firmware Support
                </div>
                <div class="flex flex-wrap gap-2">
                  {firmware.map((fw) => (
                    <StatusBadge 
                      key={fw.id}
                      variant="firmware" 
                      status={fw.status}
                      size="sm"
                    >
                      {fw.name}
                    </StatusBadge>
                  ))}
                </div>
              </div>
            )}

            {/* Image Credit */}
            {previewImage.credit && (
              <div class="pt-4 border-t border-border/40">
                {previewImage.sourceUrl ? (
                  <a
                    href={previewImage.sourceUrl}
                    target="_blank"
                    rel="noopener noreferrer"
                    class="text-xs text-muted-foreground hover:text-foreground transition-colors inline-flex items-center gap-1.5"
                  >
                    <span>Image: {previewImage.credit}</span>
                    <span class="text-primary">↗</span>
                  </a>
                ) : (
                  <span class="text-xs text-muted-foreground">
                    Image: {previewImage.credit}
                  </span>
                )}
              </div>
            )}
          </div>
        </div>
      </div>
    </div>
  )}

  <div
    class="mt-10"
    data-tabs-root
    data-default-tab="specs"
    id={tabsIdBase}
  >
    <div
      role="tablist"
      aria-label="Controller detail sections"
      class="grid w-full max-w-xl grid-cols-3 gap-2 rounded-lg border border-border/60 bg-muted/40 p-1"
    >
      <button
        type="button"
        role="tab"
        data-tab="specs"
        aria-selected="true"
        aria-controls={`${tabsIdBase}-panel-specs`}
        id={`${tabsIdBase}-tab-specs`}
        class="controller-tab-trigger inline-flex min-w-[80px] items-center justify-center whitespace-nowrap rounded-md px-3 py-1.5 text-xs font-semibold uppercase tracking-wide transition-all focus-visible:outline-hidden focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 bg-background text-foreground shadow-xs"
      >
        Specs
      </button>
      <button
        type="button"
        role="tab"
        data-tab="issues"
        aria-selected="false"
        aria-controls={`${tabsIdBase}-panel-issues`}
        id={`${tabsIdBase}-tab-issues`}
        class="controller-tab-trigger inline-flex min-w-[80px] items-center justify-center whitespace-nowrap rounded-md px-3 py-1.5 text-xs font-semibold uppercase tracking-wide transition-all focus-visible:outline-hidden focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 text-muted-foreground"
      >
        Issues
      </button>
      <button
        type="button"
        role="tab"
        data-tab="links"
        aria-selected="false"
        aria-controls={`${tabsIdBase}-panel-links`}
        id={`${tabsIdBase}-tab-links`}
        class="controller-tab-trigger inline-flex min-w-[80px] items-center justify-center whitespace-nowrap rounded-md px-3 py-1.5 text-xs font-semibold uppercase tracking-wide transition-all focus-visible:outline-hidden focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 text-muted-foreground"
      >
        Links
      </button>
    </div>

    <div
      role="tabpanel"
      data-tab-panel="specs"
      id={`${tabsIdBase}-panel-specs`}
      aria-labelledby={`${tabsIdBase}-tab-specs`}
      class="space-y-6"
    >
      <Card className="border border-border/60 bg-background/80 shadow-xs">
        <CardHeader className="pb-4">
          <CardTitle className="text-base font-semibold">Core Specifications</CardTitle>
          <CardDescription>
            Quick reference for the primary hardware capabilities.
          </CardDescription>
        </CardHeader>
        <CardContent className="pt-0">
          <ProfessionalTable class="text-sm">
            <tbody>
              <TableRow2Col
                label1="MCU"
                value1={mcuName}
                label2="Mounting"
                value2={formattedMounting}
                mono1
                mono2
              />
              <TableRow2Col
                label1="Power"
                value1={powerSummary}
                label2="I/O Overview"
                value2={ioSummary}
              />
              <TableRow2Col
                label1="PWM & Storage"
                value1={pwmSummary}
                label2="Sensors"
                value2={sensorSummary}
              />
            </tbody>
          </ProfessionalTable>
        </CardContent>
      </Card>

      <div class="grid grid-cols-1 gap-4 mb-8 lg:grid-cols-4">
    <!-- Left Column - Complete Specs Table -->
    <div class="lg:col-span-3">
      <Card>
        <CardHeader>
          <CardTitle className="text-lg">Technical Specifications</CardTitle>
        </CardHeader>
        <CardContent>
          <div
            class="space-y-4"
            data-revision-root
            data-default-variant={defaultVariantId}
          >
            {hasMultipleVariants && (
              <div class="flex flex-col gap-3 sm:flex-row sm:items-center sm:justify-between">
                <div class="sm:hidden w-full space-y-1">
                  <label
                    for="hardware-revision-select"
                    class="text-[10px] uppercase tracking-wide font-semibold text-muted-foreground"
                  >
                    Hardware revision
                  </label>
                  <select
                    id="hardware-revision-select"
                    data-revision-select
                    class="w-full rounded-sm border border-border/60 bg-background px-3 py-2 text-sm text-foreground focus:outline-hidden focus:ring-2 focus:ring-primary/40"
                  >
                    {revisionVariantsWithSensors.map((variant) => (
                      <option value={variant.id}>{variant.label}</option>
                    ))}
                  </select>
                </div>
                <div
                  class="hidden sm:flex flex-wrap gap-2"
                  role="tablist"
                  aria-label="Hardware revisions"
                >
                  {revisionVariantsWithSensors.map((variant, idx) => (
                    <button
                      type="button"
                      data-revision-tab={variant.id}
                      class={`border rounded-sm px-3 py-1.5 text-sm font-medium transition-colors ${idx === 0 ? 'bg-primary/10 border-primary/40 text-primary' : 'bg-muted/30 border-border/60 text-muted-foreground'}`}
                      aria-selected={idx === 0 ? 'true' : 'false'}
                    >
                      {variant.label}
                    </button>
                  ))}
                </div>
              </div>
            )}
              {revisionVariantsWithSensors.map((variant, idx) => (
                <section
                  key={variant.id}
                  data-revision-panel={variant.id}
                  class={`space-y-4 ${idx === 0 ? '' : 'hidden'}`}
                  aria-hidden={idx === 0 ? 'false' : 'true'}
                >
                  {variant.revision ? (
                    <div class="rounded-sm border border-border/40 bg-muted/30 p-3 space-y-2">
                      <div class="flex flex-wrap items-center justify-between gap-2">
                        <div class="flex flex-wrap items-center gap-2">
                          <Badge className="text-[10px] uppercase tracking-wide bg-primary/10 text-primary border-primary/20">
                            {variant.label}
                          </Badge>
                          {variant.revision.released && (
                            <span class="text-xs font-mono text-muted-foreground">
                              {variant.revision.released}
                            </span>
                          )}
                        </div>
                        <span class="text-xs font-semibold text-muted-foreground">
                          Revision overview
                        </span>
                      </div>
                      {variant.revision.notes && (
                        <p class="text-xs leading-snug text-muted-foreground">
                          {variant.revision.notes}
                        </p>
                      )}
                      {variant.revision.changes && variant.revision.changes.length > 0 && (
                        <ul class="space-y-1">
                          {variant.revision.changes.map((change, changeIdx) => (
                            <li
                              key={`${variant.id}-change-${changeIdx}`}
                              class="flex items-start gap-2 text-xs text-muted-foreground"
                            >
                              <span class="text-primary font-bold mt-0.5">•</span>
                              <span class="leading-snug text-foreground">{change}</span>
                            </li>
                          ))}
                        </ul>
                      )}
                      {variant.revision.overrides && (
                        <div class="flex flex-wrap gap-1.5">
                          {variant.revision.overrides.sensors && (
                            <Badge className="text-[10px] uppercase tracking-wide bg-purple-500/10 text-purple-500 border-purple-500/30">
                              Sensor overrides
                            </Badge>
                          )}
                          {variant.revision.overrides.io && (
                            <Badge className="text-[10px] uppercase tracking-wide bg-blue-500/10 text-blue-500 border-blue-500/30">
                              I/O overrides
                            </Badge>
                          )}
                          {variant.revision.overrides.power && (
                            <Badge className="text-[10px] uppercase tracking-wide bg-amber-500/10 text-amber-500 border-amber-500/30">
                              Power overrides
                            </Badge>
                          )}
                        </div>
                      )}
                      {variant.sourceEntries.length > 0 && (
                        <div class="flex flex-wrap gap-1.5">
                          {variant.sourceEntries.map((source) =>
                            source.url ? (
                              <a
                                key={source.id}
                                href={source.url}
                                target="_blank"
                                rel="noopener noreferrer"
                                class="text-[10px] uppercase tracking-wide font-semibold inline-flex items-center gap-1 rounded-sm border border-primary/30 bg-primary/5 px-2 py-1 text-primary hover:bg-primary/10 transition-colors"
                              >
                                {source.title}
                                <span>↗</span>
                              </a>
                            ) : (
                              <span
                                key={source.id}
                                class="text-[10px] uppercase tracking-wide font-semibold inline-flex items-center gap-1 rounded-sm border border-border/40 bg-muted/30 px-2 py-1 text-muted-foreground"
                              >
                                {source.title}
                              </span>
                            )
                          )}
                        </div>
                      )}
                    </div>
                  ) : (
                    <div class="rounded-sm border border-border/40 bg-muted/20 p-3 space-y-2">
                      <div class="flex flex-wrap items-center justify-between gap-2">
                        <span class="text-sm font-semibold text-foreground">
                          Base hardware specification
                        </span>
                        <Badge className="text-[10px] uppercase tracking-wide bg-primary/10 text-primary border-primary/20">
                          Default
                        </Badge>
                      </div>
                      {data.hardware.notes && (
                        <p class="text-xs leading-snug text-muted-foreground">{data.hardware.notes}</p>
                      )}
                    </div>
                  )}
                  <ProfessionalTable>
                    <TableSection title="Core Hardware" />
                    
                    <TableRow2Col
                      label1="MCU"
                      value1={mcu?.data.title || mcu?.data.name || variant.spec.mcu}
                      label2="Mounting"
                      value2={formatMounting(variant.spec.mounting)}
                      mono1
                      mono2
                    />
                    
                    {variant.spec.dimensions && (
                      <TableRow2Col
                        label1="Dimensions"
                        value1={formatDimensions(variant.spec.dimensions)}
                        label2="Weight"
                        value2={formatWeight(variant.spec.dimensions.weight_g) || '—'}
                        mono1
                        mono2
                      />
                    )}
                    <TableSection title="Power" />
                    
                    {variant.spec.power.inputs && variant.spec.power.inputs.length > 0 ? (
                      <>
                        <TableRow label="Power Inputs">
                          <div class="space-y-2">
                            {variant.spec.power.inputs.map((input, idx) => {
                              const voltageLabel = formatVoltageRange(input.voltage);
                              const typeLabel = getPowerTypeLabel(input.type);
                              return (
                                <div
                                  key={`${input.name}-${idx}`}
                                  class="rounded-sm border border-border/40 bg-muted/20 p-3 space-y-1"
                                >
                                  <div class="flex flex-wrap items-center justify-between gap-2">
                                    <span class="font-mono font-semibold text-sm text-foreground">
                                      {input.name}
                                    </span>
                                    {typeLabel && (
                                      <span class="text-[10px] uppercase tracking-wide text-muted-foreground">
                                        {typeLabel}
                                      </span>
                                    )}
                                  </div>
                                  {input.connector && (
                                    <div class="text-xs text-muted-foreground">
                                      Connector:&nbsp;
                                      <span class="font-mono text-foreground">{input.connector}</span>
                                    </div>
                                  )}
                                  {voltageLabel && (
                                    <div class="text-xs text-muted-foreground">
                                      Voltage:&nbsp;
                                      <span class="font-semibold text-foreground">{voltageLabel}</span>
                                    </div>
                                  )}
                                  {input.notes && (
                                    <p class="text-xs text-muted-foreground leading-snug">{input.notes}</p>
                                  )}
                                </div>
                              );
                            })}
                          </div>
                        </TableRow>
                        {variant.spec.power.redundant && (
                          <TableRow 
                            label="Redundancy" 
                            value="✓ Yes"
                            class="font-semibold text-green-600 dark:text-green-400"
                          />
                        )}
                      </>
                    ) : (
                      <>
                        <TableRow2Col
                          label1="Input Voltage"
                          value1={variant.spec.power.voltage_in ?? '—'}
                          label2="Redundancy"
                          value2={variant.spec.power.redundant ? '✓ Yes' : '—'}
                          mono1
                        />
                      </>
                    )}
                    {variant.spec.power.notes && (
                      <TableRow label=" " class="text-xs text-muted-foreground italic">
                        {variant.spec.power.notes}
                      </TableRow>
                    )}
                    <TableSection title="Connectivity & I/O" />
                    
                    <TableRow2Col
                      label1="UARTs"
                      value1={variant.spec.io.uarts}
                      label2="CAN Bus"
                      value2={variant.spec.io.can}
                    />
                    
                    <TableRow2Col
                      label1="PWM Outputs"
                      value1={variant.spec.io.pwm}
                      label2="SD Card"
                      value2={variant.spec.io.sd_card ? '✓ Yes' : '✗ No'}
                    />
                    
                    {variant.spec.io.ethernet !== undefined && (
                      <TableRow
                        label="Ethernet"
                        value={variant.spec.io.ethernet ? '✓ Yes' : '✗ No'}
                      />
                    )}
                    
                    {variant.spec.io.peripherals && variant.spec.io.peripherals.length > 0 && (
                      <TableRow label="Peripheral Ports">
                        <div class="grid gap-3 sm:grid-cols-2">
                          {variant.spec.io.peripherals.map((peripheral, idx) => (
                            <div
                              class="rounded-sm border border-border/40 bg-background/70 p-3 shadow-xs"
                              key={`${peripheral.name}-${idx}`}
                            >
                              <div class="flex items-center justify-between gap-2">
                                <span class="font-semibold text-sm text-foreground">
                                  {peripheral.name}
                                  {peripheral.count && (
                                    <span class="ml-1 text-xs text-muted-foreground font-medium">
                                      ×{peripheral.count}
                                    </span>
                                  )}
                                </span>
                                <Badge className="text-[10px] tracking-wide font-medium">
                                  {formatPeripheralType(peripheral.type)}
                                </Badge>
                              </div>
                              {(() => {
                                const interfaceBadges = normalizePeripheralInterfaces(
                                  peripheral.interfaces,
                                );
                                if (interfaceBadges.length === 0) return null;
                                return (
                                  <div class="mt-2 flex flex-wrap gap-1.5">
                                    {interfaceBadges.map(({ label, count }) => (
                                      <Badge
                                        variant="secondary"
                                        className="text-[10px] tracking-wide font-medium"
                                        key={`${peripheral.name}-${label}`}
                                      >
                                        <span>{label}</span>
                                        {count > 1 && (
                                          <span className="ml-1 text-[10px] text-muted-foreground font-semibold">
                                            ×{count}
                                          </span>
                                        )}
                                      </Badge>
                                    ))}
                                  </div>
                                );
                              })()}
                              {peripheral.connector && (
                                <p class="mt-2 text-xs text-muted-foreground">
                                  <span class="font-medium text-foreground">Connector:</span>&nbsp;{peripheral.connector}
                                </p>
                              )}
                              {peripheral.voltage && (
                                <p class="text-xs text-muted-foreground">
                                  <span class="font-medium text-foreground">Voltage:</span> {peripheral.voltage}
                                </p>
                              )}
                              {peripheral.notes && (
                                <p class="text-xs text-muted-foreground leading-snug mt-1">
                                  {peripheral.notes}
                                </p>
                              )}
                            </div>
                          ))}
                        </div>
                      </TableRow>
                    )}
                    <TableSection title="Onboard Sensors" />
                    
                    {variant.sensorDetails.imu.length > 0 && (
                      <TableRow label="IMU">
                        <SensorList 
                          sensors={variant.sensorDetails.imu.map(s => ({
                            id: s.id,
                            name: s.name ?? s.id,
                            instances: s.count
                          }))}
                          linkable={true}
                          size="sm"
                        />
                      </TableRow>
                    )}
                    
                    {variant.sensorDetails.barometer.length > 0 && (
                      <TableRow label="Barometer">
                        <SensorList 
                          sensors={variant.sensorDetails.barometer.map(s => ({
                            id: s.id,
                            name: s.name ?? s.id,
                            instances: s.count
                          }))}
                          linkable={true}
                          size="sm"
                        />
                      </TableRow>
                    )}
                    
                    {variant.sensorDetails.magnetometer.length > 0 && (
                      <TableRow label="Magnetometer">
                        <SensorList 
                          sensors={variant.sensorDetails.magnetometer.map(s => ({
                            id: s.id,
                            name: s.name ?? s.id,
                            instances: s.count
                          }))}
                          linkable={true}
                          size="sm"
                        />
                      </TableRow>
                    )}
                    {data.features && data.features.length > 0 && (
                      <>
                        <TableSection title="Additional Features" />
                        <TableRow label=" ">
                          <ul class="grid grid-cols-2 gap-x-4 gap-y-1.5 text-sm">
                            {data.features.map((feature) => (
                              <li class="flex items-start gap-2" key={feature}>
                                <span class="text-emerald-600 dark:text-emerald-400 font-bold text-sm mt-0.5">✓</span>
                                <span class="font-medium">{feature}</span>
                              </li>
                            ))}
                          </ul>
                        </TableRow>
                      </>
                    )}
                  </ProfessionalTable>
                </section>
              ))}
            </div>
            {hasMultipleVariants && (
              <script type="module">
                const script = document.currentScript;
                const root = script?.parentElement?.querySelector('[data-revision-root]');
                if (!root) return;
                const defaultId = root.dataset.defaultVariant;
                const tabs = Array.from(root.querySelectorAll('[data-revision-tab]'));
                const panels = Array.from(root.querySelectorAll('[data-revision-panel]'));
                const issueSections = Array.from(
                  document.querySelectorAll('[data-variant-issues]')
                ).filter((el) => el instanceof HTMLElement);
                const select = root.querySelector('[data-revision-select]');
                const activeClasses = ['bg-primary/10', 'border-primary/40', 'text-primary'];
                const inactiveClasses = ['bg-muted/30', 'border-border/60', 'text-muted-foreground'];
                const setActive = (id) => {
                  panels.forEach((panel) => {
                    const isActive = panel.dataset.revisionPanel === id;
                    panel.classList.toggle('hidden', !isActive);
                    panel.setAttribute('aria-hidden', isActive ? 'false' : 'true');
                  });
                  issueSections.forEach((section) => {
                    const el = section;
                    const isActive = el.dataset.variantIssues === id;
                    el.classList.toggle('hidden', !isActive);
                    el.setAttribute('aria-hidden', isActive ? 'false' : 'true');
                  });
                  tabs.forEach((tab) => {
                    const isActive = tab.dataset.revisionTab === id;
                    tab.setAttribute('aria-selected', isActive ? 'true' : 'false');
                    activeClasses.forEach((cls) => tab.classList.toggle(cls, isActive));
                    inactiveClasses.forEach((cls) => tab.classList.toggle(cls, !isActive));
                  });
                  if (select && select.value !== id) {
                    select.value = id;
                  }
                };
                tabs.forEach((tab) => {
                  tab.addEventListener('click', () => setActive(tab.dataset.revisionTab));
                });
                if (select) {
                  select.addEventListener('change', (event) => setActive(event.target.value));
                }
                if (defaultId) {
                  setActive(defaultId);
                }
              </script>
            )}
          </CardContent>
        </Card>
      </div>

      <!-- Right Column - Professional Sidebar -->
      <div class="space-y-4">
        <!-- Firmware & Info Combined -->
        <Card>
          <CardHeader>
            <CardTitle className="text-base font-bold uppercase tracking-wide text-primary">Quick Reference</CardTitle>
          </CardHeader>
          <CardContent>
            <ProfessionalTable class="text-xs">
              <TableSection title="Firmware Support" colspan={2} />
              {firmware.map((fw) => (
                <tr class="even:bg-muted/30 hover:bg-muted/50 transition-colors" key={fw.id}>
                  <td class="px-2 py-1.5 font-semibold">{fw.name}</td>
                  <td class="px-2 py-1.5 text-right">
                    <StatusBadge 
                      variant="firmware" 
                      status={fw.status}
                      size="xs"
                    />
                  </td>
                </tr>
              ))}
              
              <TableSection title="Information" colspan={2} />
              <tr class="even:bg-muted/30 hover:bg-muted/50 transition-colors">
                <td class="px-2 py-1.5 text-muted-foreground font-medium">Verification</td>
                <td class="px-2 py-1.5 text-right">
                  <StatusBadge 
                    variant="verification" 
                    status={data.verification.level}
                    size="xs"
                  />
                </td>
              </tr>
              <tr class="even:bg-muted/30 hover:bg-muted/50 transition-colors">
                <td class="px-2 py-1.5 text-muted-foreground font-medium">Hardware</td>
                <td class="px-2 py-1.5 text-right">
                  <StatusBadge 
                    variant="hardware" 
                    status={data.hardware.openness}
                    size="xs"
                  />
                </td>
              </tr>
              <tr class="even:bg-muted/30 hover:bg-muted/50 transition-colors">
                <td class="px-2 py-1.5 text-muted-foreground font-medium">Updated</td>
                <td class="px-2 py-1.5 font-mono font-semibold text-right">{data.verification.last_updated}</td>
              </tr>
              <tr class="even:bg-muted/30 hover:bg-muted/50 transition-colors">
                <td class="px-2 py-1.5 text-muted-foreground font-medium">Sources</td>
                <td class="px-2 py-1.5 font-mono font-semibold text-right">{data.sources.length}</td>
              </tr>
              {manufacturerName && (
                <tr class="even:bg-muted/30 hover:bg-muted/50 transition-colors">
                  <td class="px-2 py-1.5 text-muted-foreground font-medium">Manufacturer</td>
                  <td class="px-2 py-1.5 text-right">
                    {manufacturerUrl ? (
                      <a
                        href={manufacturerUrl}
                        class="font-semibold hover:text-primary transition-colors text-xs inline-flex items-center gap-1"
                      >
                        {manufacturerName}
                        <span class="text-primary">→</span>
                      </a>
                    ) : (
                      <span class="font-semibold text-xs">{manufacturerName}</span>
                    )}
                  </td>
                </tr>
              )}
            </ProfessionalTable>
          </CardContent>
        </Card>
        {hardwareRevisionSummaries.length > 0 && (
          <Card>
            <CardHeader>
              <CardTitle className="text-base font-bold uppercase tracking-wide text-primary">
                Hardware Revisions
              </CardTitle>
              {data.hardware.notes && (
                <CardDescription className="text-xs text-muted-foreground leading-relaxed">
                  {data.hardware.notes}
                </CardDescription>
              )}
            </CardHeader>
            <CardContent>
              <div class="space-y-3">
                {hardwareRevisionSummaries.map((variant) => {
                  const revision = variant.revision!;
                  return (
                    <div
                      key={variant.id}
                      class="rounded-sm border border-border/40 bg-background/70 p-3 shadow-xs"
                    >
                      <div class="flex flex-wrap items-center justify-between gap-2">
                        <span class="font-semibold text-sm text-foreground">{variant.label}</span>
                        {revision.released && (
                          <Badge className="text-[10px] uppercase tracking-wide bg-primary/10 text-primary border-primary/20">
                            {revision.released}
                          </Badge>
                        )}
                      </div>
                      {revision.notes && (
                        <p class="mt-1 text-xs leading-snug text-muted-foreground">{revision.notes}</p>
                      )}
                      {revision.changes && revision.changes.length > 0 && (
                        <ul class="mt-2 space-y-1">
                          {revision.changes.map((change, changeIdx) => (
                            <li
                              key={`${variant.id}-change-${changeIdx}`}
                              class="flex items-start gap-2 text-xs text-muted-foreground"
                            >
                              <span class="text-primary font-bold mt-0.5">•</span>
                              <span class="leading-snug text-foreground">{change}</span>
                            </li>
                          ))}
                        </ul>
                      )}
                      {revision.overrides && (
                        <div class="mt-2 flex flex-wrap gap-1.5">
                          {revision.overrides.sensors && (
                            <Badge className="text-[10px] uppercase tracking-wide bg-purple-500/10 text-purple-500 border-purple-500/30">
                              Sensor overrides
                            </Badge>
                          )}
                          {revision.overrides.io && (
                            <Badge className="text-[10px] uppercase tracking-wide bg-blue-500/10 text-blue-500 border-blue-500/30">
                              I/O overrides
                            </Badge>
                          )}
                          {revision.overrides.power && (
                            <Badge className="text-[10px] uppercase tracking-wide bg-amber-500/10 text-amber-500 border-amber-500/30">
                              Power overrides
                            </Badge>
                          )}
                        </div>
                      )}
                      {variant.sourceEntries.length > 0 && (
                        <div class="mt-2 flex flex-wrap gap-1.5">
                          {variant.sourceEntries.map((source) =>
                            source.url ? (
                              <a
                                key={source.id}
                                href={source.url}
                                target="_blank"
                                rel="noopener noreferrer"
                                class="text-[10px] uppercase tracking-wide font-semibold inline-flex items-center gap-1 rounded-sm border border-primary/30 bg-primary/5 px-2 py-1 text-primary hover:bg-primary/10 transition-colors"
                              >
                                {source.title}
                                <span>↗</span>
                              </a>
                            ) : (
                              <span
                                key={source.id}
                                class="text-[10px] uppercase tracking-wide font-semibold inline-flex items-center gap-1 rounded-sm border border-border/40 bg-muted/30 px-2 py-1 text-muted-foreground"
                              >
                                {source.title}
                              </span>
                            )
                          )}
                        </div>
                      )}
                    </div>
                  );
                })}
              </div>
            </CardContent>
          </Card>
        )}
      </div>
    </div>
    </div>

    <div
      role="tabpanel"
      data-tab-panel="issues"
      id={`${tabsIdBase}-panel-issues`}
      aria-labelledby={`${tabsIdBase}-tab-issues`}
      class="space-y-4"
    >
      {variantIssueBuckets.map((bucket, idx) => (
        <div
          data-variant-issues={bucket.id}
          class={`space-y-4 ${idx === 0 ? '' : 'hidden'}`}
          aria-hidden={idx === 0 ? 'false' : 'true'}
        >
          {bucket.issues.length > 0 ? (
            bucket.issues.map((issue, index) => (
              <Card
                key={`${bucket.id}-${issue.id ?? `${issue.date}-${issue.title}-${index}`}`}
                className="border border-border/60 bg-background/80 shadow-xs"
              >
                <CardHeader className="flex flex-col gap-3 border-b border-border/40 pb-4 sm:flex-row sm:items-start sm:justify-between">
                  <div class="flex items-start gap-3">
                    <span class="mt-1 inline-flex h-8 w-8 items-center justify-center rounded-full bg-amber-500/10 text-amber-500">
                      <AlertTriangle className="h-4 w-4" />
                    </span>
                    <div class="space-y-1">
                      <CardTitle className="text-base leading-tight">{issue.title}</CardTitle>
                      {issue.description && (
                        <CardDescription className="text-sm leading-snug text-muted-foreground">
                          {issue.description}
                        </CardDescription>
                      )}
                    </div>
                  </div>
                  <Badge
                    variant="outline"
                    className={`text-[10px] uppercase tracking-wide ${issue.severityMeta.className}`}
                  >
                    {issue.severityMeta.label}
                  </Badge>
                </CardHeader>
                <CardContent className="flex flex-col gap-3 pt-4 text-sm text-muted-foreground sm:flex-row sm:flex-wrap sm:items-center sm:justify-between">
                  <div class="flex items-center gap-2 text-xs uppercase tracking-wide text-muted-foreground">
                    <span class="font-semibold text-foreground">Reported</span>
                    {issue.displayDate ? (
                      <time dateTime={issue.date} class="font-mono text-foreground">
                        {issue.displayDate}
                      </time>
                    ) : (
                      <span class="font-mono text-foreground">{issue.date}</span>
                    )}
                  </div>
                  <div class="flex items-center gap-2 text-xs uppercase tracking-wide text-muted-foreground">
                    <span class="font-semibold text-foreground">Source</span>
                    {issue.sourceUrl ? (
                      <a
                        href={issue.sourceUrl}
                        target="_blank"
                        rel="noopener noreferrer"
                        class="inline-flex items-center gap-1 font-semibold text-primary transition hover:text-primary/80"
                      >
                        {issue.sourceTitle}
                        <ExternalLink className="h-3.5 w-3.5" />
                      </a>
                    ) : (
                      <span class="font-semibold text-foreground">{issue.sourceTitle}</span>
                    )}
                  </div>
                  <div class="flex items-center gap-2 text-xs uppercase tracking-wide text-muted-foreground">
                    <span class="font-semibold text-foreground">Affects</span>
                    {issue.origin.type === 'sensor' ? (
                      <span class="inline-flex items-center gap-2 text-foreground">
                        <a
                          href={`${basePath}/sensors/${issue.origin.sensorId}`}
                          class="inline-flex items-center gap-1 font-semibold text-primary transition hover:text-primary/80"
                        >
                          {issue.origin.sensorName}
                          <ExternalLink className="h-3.5 w-3.5" />
                        </a>
                        <Badge
                          variant="outline"
                          className="text-[10px] uppercase tracking-wide"
                        >
                          {`Onboard ${sensorCategoryLabels[issue.origin.sensorCategory]}`}
                        </Badge>
                      </span>
                    ) : (
                      <Badge variant="outline" className="text-[10px] uppercase tracking-wide">
                        Controller Platform
                      </Badge>
                    )}
                  </div>
                </CardContent>
              </Card>
            ))
          ) : (
            <Card className="border border-dashed border-border/60 bg-muted/20">
              <CardHeader>
                <CardTitle className="text-base font-semibold">
                  No documented issues for {bucket.label}
                </CardTitle>
                <CardDescription>
                  Sensor advisories and controller errata for this revision will appear here once reported.
                </CardDescription>
              </CardHeader>
            </Card>
          )}
        </div>
      ))}
    </div>

    <div
      role="tabpanel"
      data-tab-panel="links"
      id={`${tabsIdBase}-panel-links`}
      aria-labelledby={`${tabsIdBase}-tab-links`}
      class="space-y-4"
    >
      {hasLinkItems ? (
        <div class="grid gap-3 md:grid-cols-2">
          {linkItems.map((link) => {
            const Icon = link.icon;
            return (
              <a
                key={link.key}
                href={link.href}
                target="_blank"
                rel="noopener noreferrer"
                class="group flex items-center justify-between gap-4 rounded-lg border border-border/60 bg-background/80 p-4 transition hover:border-primary/50 hover:shadow-sm"
              >
                <div class="flex items-start gap-3">
                  <span class="flex h-10 w-10 items-center justify-center rounded-md bg-muted/60 text-muted-foreground transition group-hover:text-primary">
                    <Icon className="h-5 w-5" />
                  </span>
                  <div class="space-y-1">
                    <p class="text-sm font-semibold text-foreground">{link.label}</p>
                    <p class="text-xs text-muted-foreground">{link.description}</p>
                  </div>
                </div>
                <span class="text-sm text-primary">↗</span>
              </a>
            );
          })}
        </div>
      ) : (
        <Card className="border border-dashed border-border/60 bg-muted/20">
          <CardHeader>
            <CardTitle className="text-base font-semibold">No external links available</CardTitle>
            <CardDescription>
              Documentation, pinout diagrams, and vendor resources will appear here once they are added to the dataset.
            </CardDescription>
          </CardHeader>
        </Card>
      )}
    </div>
  </div>

  <script is:inline>
    (() => {
      const scriptEl = document.currentScript;
      if (!scriptEl) return;
      const root = scriptEl.previousElementSibling;
      if (!root || !(root instanceof HTMLElement)) return;

      const defaultTab = root.dataset.defaultTab;
      const tabButtons = Array.from(
        root.querySelectorAll('button[data-tab]')
      ).filter((el) => el instanceof HTMLElement);
      const panels = Array.from(
        root.querySelectorAll('[data-tab-panel]')
      ).filter((el) => el instanceof HTMLElement);

      if (tabButtons.length === 0 || panels.length === 0) return;

      const activate = (targetId) => {
        tabButtons.forEach((button) => {
          const isActive = button.dataset.tab === targetId;
          button.setAttribute('aria-selected', isActive ? 'true' : 'false');
          button.tabIndex = isActive ? 0 : -1;
          button.classList.toggle('bg-background', isActive);
          button.classList.toggle('text-foreground', isActive);
          button.classList.toggle('shadow-xs', isActive);
          button.classList.toggle('text-muted-foreground', !isActive);
        });

        panels.forEach((panel) => {
          const isActive = panel.dataset.tabPanel === targetId;
          panel.toggleAttribute('hidden', !isActive);
          panel.setAttribute('aria-hidden', isActive ? 'false' : 'true');
          if (isActive) {
            panel.removeAttribute('tabindex');
          } else {
            panel.setAttribute('tabindex', '-1');
          }
        });
      };

      const cycleTabs = (currentIndex, delta) => {
        const total = tabButtons.length;
        const nextIndex = (currentIndex + delta + total) % total;
        const nextButton = tabButtons[nextIndex];
        if (nextButton?.dataset.tab) {
          activate(nextButton.dataset.tab);
          nextButton.focus();
        }
      };

      tabButtons.forEach((button, index) => {
        button.addEventListener('click', () => {
          if (button.dataset.tab) {
            activate(button.dataset.tab);
          }
        });

        button.addEventListener('keydown', (event) => {
          if (event.key === 'ArrowRight' || event.key === 'ArrowDown') {
            event.preventDefault();
            cycleTabs(index, 1);
            return;
          }
          if (event.key === 'ArrowLeft' || event.key === 'ArrowUp') {
            event.preventDefault();
            cycleTabs(index, -1);
            return;
          }
          if (event.key === 'Home') {
            event.preventDefault();
            const first = tabButtons[0];
            first?.focus();
            if (first?.dataset.tab) {
              activate(first.dataset.tab);
            }
            return;
          }
          if (event.key === 'End') {
            event.preventDefault();
            const last = tabButtons[tabButtons.length - 1];
            last?.focus();
            if (last?.dataset.tab) {
              activate(last.dataset.tab);
            }
          }
        });
      });

      const initial =
        defaultTab && tabButtons.some((btn) => btn.dataset.tab === defaultTab)
          ? defaultTab
          : tabButtons[0]?.dataset.tab;
      if (initial) {
        activate(initial);
      }
    })();
  </script>
</DetailPageLayout>
