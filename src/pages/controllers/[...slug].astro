---
import { getCollection, getEntry } from 'astro:content';
import BaseLayout from '@/layouts/BaseLayout.astro';
import MainLayout from '@/layouts/MainLayout.astro';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/Card';
import { Badge } from '@/components/ui/Badge';
import { 
  Cpu, 
  Gauge, 
  Package, 
  Zap, 
  Database, 
  Wifi, 
  HardDrive,
  CheckCircle2,
  AlertCircle,
  Scale,
  Ruler,
  Box,
  Layers,
} from 'lucide-react';

export async function getStaticPaths() {
  const controllers = await getCollection('controllers');
  return controllers.map((controller) => ({
    params: { slug: controller.id },
    props: { controller },
  }));
}

const { controller } = Astro.props;
const { data } = controller;

// Fetch related data
const manufacturer = data.brand ? await getEntry('manufacturers', data.brand) : null;
const mcu = data.mcu ? await getEntry('mcu', data.mcu) : null;
const firmware = await Promise.all(
  data.firmware_support.map(async (fw) => {
    const entry = await getEntry('firmware', fw.id);
    return { ...fw, name: entry?.data.title || entry?.data.name || fw.id };
  })
);

// Fetch sensor details
const sensorDetails = {
  imu: data.sensors?.imu
    ? await Promise.all(
        data.sensors.imu.map(async (s) => {
          const entry = await getEntry('sensors', s.id);
          return { ...s, name: entry?.data.title || entry?.data.name || s.id };
        })
      )
    : [],
  barometer: data.sensors?.barometer
    ? await Promise.all(
        data.sensors.barometer.map(async (s) => {
          const entry = await getEntry('sensors', s.id);
          return { ...s, name: entry?.data.title || entry?.data.name || s.id };
        })
      )
    : [],
  magnetometer: data.sensors?.magnetometer
    ? await Promise.all(
        data.sensors.magnetometer.map(async (s) => {
          const entry = await getEntry('sensors', s.id);
          return { ...s, name: entry?.data.title || entry?.data.name || s.id };
        })
      )
    : [],
};

// Format mounting type
const mountingDisplay = {
  '20x20': '20×20mm',
  '25.5x25.5': '25.5×25.5mm',
  '30.5x30.5': '30.5×30.5mm',
  '35x35': '35×35mm',
  'cube': 'Cube Carrier Board',
  'wing': 'Wing Form Factor',
  'custom': 'Custom',
};

// Verification badge color
const verificationColor = {
  unverified: 'bg-yellow-500/10 text-yellow-500 border-yellow-500/20',
  community: 'bg-blue-500/10 text-blue-500 border-blue-500/20',
  reviewed: 'bg-green-500/10 text-green-500 border-green-500/20',
};

// Firmware status color
const firmwareStatusColor = {
  beta: 'bg-orange-500/10 text-orange-500 border-orange-500/20',
  stable: 'bg-green-500/10 text-green-500 border-green-500/20',
  deprecated: 'bg-red-500/10 text-red-500 border-red-500/20',
  community: 'bg-blue-500/10 text-blue-500 border-blue-500/20',
};

const basePath = import.meta.env.BASE_URL.replace(/\/$/, '');
const editPath = `content/controllers/${controller.id}.yaml`;

const powerTypeLabels = {
  power_module: 'Power Module',
  usb: 'USB',
  battery: 'Battery',
  regulator: 'Regulator',
  servo_rail: 'Servo Rail',
  other: 'Other',
} as const;

const getPowerTypeLabel = (type?: string) => {
  if (!type) return null;
  return powerTypeLabels[type as keyof typeof powerTypeLabels] ?? type;
};

const formatVoltageRange = (voltage?: {
  min?: number;
  max?: number;
  nominal?: number;
  unit?: string;
  notes?: string;
  cells?: { min?: number; max?: number };
}) => {
  if (!voltage) return null;
  const unit = voltage.unit ?? 'V';
  const parts: string[] = [];

  if (typeof voltage.min === 'number' && typeof voltage.max === 'number') {
    parts.push(`${voltage.min}–${voltage.max} ${unit}`);
  } else if (typeof voltage.min === 'number') {
    parts.push(`≥${voltage.min} ${unit}`);
  } else if (typeof voltage.max === 'number') {
    parts.push(`≤${voltage.max} ${unit}`);
  } else if (typeof voltage.nominal === 'number') {
    parts.push(`${voltage.nominal} ${unit}`);
  }

  if (voltage.cells && (voltage.cells.min || voltage.cells.max)) {
    if (
      typeof voltage.cells.min === 'number' &&
      typeof voltage.cells.max === 'number' &&
      voltage.cells.min !== voltage.cells.max
    ) {
      parts.push(`${voltage.cells.min}–${voltage.cells.max}S`);
    } else if (typeof voltage.cells.min === 'number') {
      parts.push(`${voltage.cells.min}S`);
    } else if (typeof voltage.cells.max === 'number') {
      parts.push(`${voltage.cells.max}S`);
    }
  }

  const baseDescription = parts.join(' / ');
  if (voltage.notes) {
    return baseDescription ? `${baseDescription} (${voltage.notes})` : voltage.notes;
  }

  return baseDescription || null;
};
---

<BaseLayout
  title={`${data.title} - Flight Controller Database`}
  description={`${data.title} by ${manufacturer?.data.name || data.brand} - ${data.mounting} mounting, ${data.mcu} MCU. Supports ${firmware.map(f => f.name).join(', ')}.`}
>
  <MainLayout editPath={editPath}>
    <div class="container py-8">
      <!-- Breadcrumb -->
      <nav class="mb-6 flex items-center gap-2 text-sm text-muted-foreground">
        <a href={`${basePath}/`} class="hover:text-foreground transition-colors">Home</a>
        <span>/</span>
        <a href={`${basePath}/controllers`} class="hover:text-foreground transition-colors">Controllers</a>
        <span>/</span>
        <span class="text-foreground">{data.title}</span>
      </nav>

      <!-- Header -->
    <div class="mb-6">
      <div class="flex flex-col sm:flex-row sm:items-start sm:justify-between gap-3 mb-3">
        <div>
          <h1 class="text-3xl font-bold tracking-tight mb-1">{data.title}</h1>
          <p class="text-base text-muted-foreground">
            by {manufacturer?.data.name || data.brand}
          </p>
        </div>
        <div class="flex flex-wrap gap-1.5">
          <Badge className={`${verificationColor[data.verification.level]} px-2 py-0.5 text-xs`}>
            {data.verification.level === 'reviewed' && <CheckCircle2 className="w-3 h-3 mr-1" />}
            {data.verification.level === 'community' && <AlertCircle className="w-3 h-3 mr-1" />}
            {data.verification.level.charAt(0).toUpperCase() + data.verification.level.slice(1)}
          </Badge>
          <Badge className="bg-primary/10 text-primary border-primary/20 px-2 py-0.5 text-xs">
            {data.hardware.openness.charAt(0).toUpperCase() + data.hardware.openness.slice(1)} Hardware
          </Badge>
        </div>
      </div>
      
      {data.notes && (
        <p class="text-sm text-muted-foreground leading-relaxed">{data.notes}</p>
      )}
    </div>

    <!-- Main Content - Ultra Compact Layout -->
    <div class="grid grid-cols-1 lg:grid-cols-4 gap-4 mb-8">
      <!-- Left Column - Complete Specs Table -->
      <div class="lg:col-span-3">
        <Card>
          <CardHeader>
            <CardTitle className="text-lg">Technical Specifications</CardTitle>
          </CardHeader>
          <CardContent>
            <table class="w-full text-sm border-collapse">
              <tbody>
                <!-- Core Hardware -->
                <tr class="border-b-2 border-primary/20">
                  <td colspan="4" class="py-2 px-3 font-bold text-xs uppercase tracking-wider bg-primary/5">
                    <div class="flex items-center gap-2">
                      <Cpu className="w-4 h-4 text-primary" />
                      <span class="text-primary">Core Hardware</span>
                    </div>
                  </td>
                </tr>
                <tr class="border-b border-border hover:bg-muted/50 transition-colors">
                  <td class="py-2 px-3 text-muted-foreground font-medium w-1/4 text-xs uppercase">MCU</td>
                  <td class="py-2 px-3 font-mono font-semibold w-1/4 text-foreground">{mcu?.data.title || mcu?.data.name || data.mcu}</td>
                  <td class="py-2 px-3 text-muted-foreground font-medium w-1/4 text-xs uppercase">Mounting</td>
                  <td class="py-2 px-3 font-mono font-semibold w-1/4">{mountingDisplay[data.mounting]}</td>
                </tr>
                {data.dimensions && (
                  <tr class="border-b border-border bg-muted/20 hover:bg-muted/40 transition-colors">
                    <td class="py-2 px-3 text-muted-foreground font-medium text-xs uppercase">Dimensions</td>
                    <td class="py-2 px-3 font-mono font-semibold">
                      {data.dimensions.width_mm} × {data.dimensions.length_mm}
                      {data.dimensions.height_mm && ` × ${data.dimensions.height_mm}`} mm
                    </td>
                    {data.dimensions.weight_g && (
                      <>
                        <td class="py-2 px-3 text-muted-foreground font-medium text-xs uppercase">Weight</td>
                        <td class="py-2 px-3 font-mono font-semibold">{data.dimensions.weight_g}g</td>
                      </>
                    )}
                  </tr>
                )}

                <!-- Power -->
                <tr class="border-b-2 border-primary/20">
                  <td colspan="4" class="py-2 px-3 font-bold text-xs uppercase tracking-wider bg-primary/5">
                    <div class="flex items-center gap-2">
                      <Zap className="w-4 h-4 text-amber-500" />
                      <span class="text-amber-600 dark:text-amber-500">Power</span>
                    </div>
                  </td>
                </tr>
                {data.power.inputs && data.power.inputs.length > 0 ? (
                  <>
                    <tr class="border-b border-border hover:bg-muted/50 transition-colors">
                      <td class="py-2 px-3 text-muted-foreground font-medium text-xs uppercase align-top">
                        Power Inputs
                      </td>
                      <td colspan="3" class="py-2 px-3">
                        <div class="space-y-2">
                          {data.power.inputs.map((input, idx) => {
                            const voltageLabel = formatVoltageRange(input.voltage);
                            const typeLabel = getPowerTypeLabel(input.type);
                            return (
                              <div
                                key={`${input.name}-${idx}`}
                                class="rounded-sm border border-border/40 bg-muted/20 p-3 space-y-1"
                              >
                                <div class="flex flex-wrap items-center justify-between gap-2">
                                  <span class="font-mono font-semibold text-sm text-foreground">
                                    {input.name}
                                  </span>
                                  {typeLabel && (
                                    <span class="text-[10px] uppercase tracking-wide text-muted-foreground">
                                      {typeLabel}
                                    </span>
                                  )}
                                </div>
                                {input.connector && (
                                  <div class="text-xs text-muted-foreground">
                                    Connector:&nbsp;
                                    <span class="font-mono text-foreground">{input.connector}</span>
                                  </div>
                                )}
                                {voltageLabel && (
                                  <div class="text-xs text-muted-foreground">
                                    Voltage:&nbsp;
                                    <span class="font-semibold text-foreground">{voltageLabel}</span>
                                  </div>
                                )}
                                {input.notes && (
                                  <p class="text-xs text-muted-foreground leading-snug">{input.notes}</p>
                                )}
                              </div>
                            );
                          })}
                        </div>
                      </td>
                    </tr>
                    {data.power.redundant && (
                      <tr class="border-b border-border bg-muted/20">
                        <td class="py-2 px-3 text-muted-foreground font-medium text-xs uppercase">Redundancy</td>
                        <td class="py-2 px-3 font-semibold text-green-600 dark:text-green-400">✓ Yes</td>
                        <td colspan="2"></td>
                      </tr>
                    )}
                  </>
                ) : (
                  <tr class="border-b border-border hover:bg-muted/50 transition-colors">
                    <td class="py-2 px-3 text-muted-foreground font-medium text-xs uppercase">Input Voltage</td>
                    <td class="py-2 px-3 font-mono font-semibold">{data.power.voltage_in ?? '—'}</td>
                    {data.power.redundant && (
                      <>
                        <td class="py-2 px-3 text-muted-foreground font-medium text-xs uppercase">Redundancy</td>
                        <td class="py-2 px-3 font-semibold text-green-600 dark:text-green-400">✓ Yes</td>
                      </>
                    )}
                  </tr>
                )}
                {data.power.notes && (
                  <tr class="border-b border-border bg-muted/20">
                    <td colspan="4" class="py-1.5 px-3 text-xs text-muted-foreground italic">{data.power.notes}</td>
                  </tr>
                )}

                <!-- I/O Ports -->
                <tr class="border-b-2 border-primary/20">
                  <td colspan="4" class="py-2 px-3 font-bold text-xs uppercase tracking-wider bg-primary/5">
                    <div class="flex items-center gap-2">
                      <Package className="w-4 h-4 text-blue-500" />
                      <span class="text-blue-600 dark:text-blue-400">Connectivity & I/O</span>
                    </div>
                  </td>
                </tr>
                <tr class="border-b border-border hover:bg-muted/50 transition-colors">
                  <td class="py-2 px-3 text-muted-foreground font-medium text-xs uppercase">UARTs</td>
                  <td class="py-2 px-3 font-mono font-semibold">{data.io.uarts}</td>
                  <td class="py-2 px-3 text-muted-foreground font-medium text-xs uppercase">CAN Bus</td>
                  <td class="py-2 px-3 font-mono font-semibold">{data.io.can}</td>
                </tr>
                <tr class="border-b border-border bg-muted/20 hover:bg-muted/40 transition-colors">
                  <td class="py-2 px-3 text-muted-foreground font-medium text-xs uppercase">PWM Outputs</td>
                  <td class="py-2 px-3 font-mono font-semibold">{data.io.pwm}</td>
                  <td class="py-2 px-3 text-muted-foreground font-medium text-xs uppercase">SD Card</td>
                  <td class="py-2 px-3 font-semibold">{data.io.sd_card ? '✓ Yes' : '✗ No'}</td>
                </tr>
                {data.io.ethernet !== undefined && (
                  <tr class="border-b border-border hover:bg-muted/50 transition-colors">
                    <td class="py-2 px-3 text-muted-foreground font-medium text-xs uppercase">Ethernet</td>
                    <td class="py-2 px-3 font-semibold">{data.io.ethernet ? '✓ Yes' : '✗ No'}</td>
                    <td colspan="2"></td>
                  </tr>
                )}

                <!-- Sensors -->
                <tr class="border-b-2 border-primary/20">
                  <td colspan="4" class="py-2 px-3 font-bold text-xs uppercase tracking-wider bg-primary/5">
                    <div class="flex items-center gap-2">
                      <Box className="w-4 h-4 text-purple-500" />
                      <span class="text-purple-600 dark:text-purple-400">Onboard Sensors</span>
                    </div>
                  </td>
                </tr>
                {sensorDetails.imu.length > 0 && (
                  <tr class="border-b border-border hover:bg-muted/50 transition-colors">
                    <td class="py-2 px-3 text-muted-foreground font-medium align-top text-xs uppercase">IMU</td>
                    <td colspan="3" class="py-2 px-3">
                      {sensorDetails.imu.map((sensor, idx) => (
                        <a
                          key={`${sensor.id}-${idx}`}
                          href={`${basePath}/sensors/${sensor.id}`}
                          class="inline-flex items-center mr-4 mb-1 text-foreground hover:text-primary transition-colors"
                        >
                          <span class="font-mono font-semibold text-sm">{sensor.name ?? sensor.id}</span>
                          {sensor.count && sensor.count > 1 && (
                            <span class="text-xs text-muted-foreground ml-1.5 font-medium">×{sensor.count}</span>
                          )}
                        </a>
                      ))}
                    </td>
                  </tr>
                )}
                {sensorDetails.barometer.length > 0 && (
                  <tr class="border-b border-border bg-muted/20 hover:bg-muted/40 transition-colors">
                    <td class="py-2 px-3 text-muted-foreground font-medium align-top text-xs uppercase">Barometer</td>
                    <td colspan="3" class="py-2 px-3">
                      {sensorDetails.barometer.map((sensor, idx) => (
                        <a
                          key={`${sensor.id}-${idx}`}
                          href={`${basePath}/sensors/${sensor.id}`}
                          class="inline-flex items-center mr-4 mb-1 text-foreground hover:text-primary transition-colors"
                        >
                          <span class="font-mono font-semibold text-sm">{sensor.name ?? sensor.id}</span>
                          {sensor.count && sensor.count > 1 && (
                            <span class="text-xs text-muted-foreground ml-1.5 font-medium">×{sensor.count}</span>
                          )}
                        </a>
                      ))}
                    </td>
                  </tr>
                )}
                {sensorDetails.magnetometer.length > 0 && (
                  <tr class="border-b border-border hover:bg-muted/50 transition-colors">
                    <td class="py-2 px-3 text-muted-foreground font-medium align-top text-xs uppercase">Magnetometer</td>
                    <td colspan="3" class="py-2 px-3">
                      {sensorDetails.magnetometer.map((sensor, idx) => (
                        <a
                          key={`${sensor.id}-${idx}`}
                          href={`${basePath}/sensors/${sensor.id}`}
                          class="inline-flex items-center mr-4 mb-1 text-foreground hover:text-primary transition-colors"
                        >
                          <span class="font-mono font-semibold text-sm">{sensor.name ?? sensor.id}</span>
                          {sensor.count && sensor.count > 1 && (
                            <span class="text-xs text-muted-foreground ml-1.5 font-medium">×{sensor.count}</span>
                          )}
                        </a>
                      ))}
                    </td>
                  </tr>
                )}

                <!-- Features -->
                {data.features && data.features.length > 0 && (
                  <>
                    <tr class="border-b-2 border-primary/20">
                      <td colspan="4" class="py-2 px-3 font-bold text-xs uppercase tracking-wider bg-primary/5">
                        <div class="flex items-center gap-2">
                          <Layers className="w-4 h-4 text-emerald-500" />
                          <span class="text-emerald-600 dark:text-emerald-400">Additional Features</span>
                        </div>
                      </td>
                    </tr>
                    <tr class="border-b border-border">
                      <td colspan="4" class="py-3 px-3">
                        <ul class="grid grid-cols-2 gap-x-4 gap-y-1.5 text-sm">
                          {data.features.map((feature) => (
                            <li class="flex items-start gap-2">
                              <span class="text-emerald-600 dark:text-emerald-400 font-bold text-sm mt-0.5">✓</span>
                              <span class="font-medium">{feature}</span>
                            </li>
                          ))}
                        </ul>
                      </td>
                    </tr>
                  </>
                )}
              </tbody>
            </table>
          </CardContent>
        </Card>
      </div>

      <!-- Right Column - Professional Sidebar -->
      <div class="space-y-4">
        <!-- Firmware & Info Combined -->
        <Card>
          <CardHeader>
            <CardTitle className="text-base font-bold uppercase tracking-wide text-primary">Quick Reference</CardTitle>
          </CardHeader>
          <CardContent>
            <table class="w-full text-xs border-collapse">
              <tbody>
                <!-- Firmware Section -->
                <tr class="border-b-2 border-primary/20">
                  <td colspan="2" class="py-1.5 px-2 font-bold text-xs uppercase tracking-wider bg-primary/5 text-primary">Firmware Support</td>
                </tr>
                {firmware.map((fw, idx) => (
                  <tr class={`border-b border-border ${idx % 2 === 0 ? 'bg-muted/10' : ''} hover:bg-muted/30 transition-colors`}>
                    <td class="py-1.5 px-2 font-semibold">{fw.name}</td>
                    <td class="py-1.5 px-2 text-right">
                      <Badge className={firmwareStatusColor[fw.status] + " text-xs px-1.5 py-0.5 font-medium"}>
                        {fw.status}
                      </Badge>
                    </td>
                  </tr>
                ))}
                
                <!-- Info Section -->
                <tr class="border-b-2 border-primary/20">
                  <td colspan="2" class="py-1.5 px-2 font-bold text-xs uppercase tracking-wider bg-primary/5 text-primary">Information</td>
                </tr>
                <tr class="border-b border-border hover:bg-muted/30 transition-colors">
                  <td class="py-1.5 px-2 text-muted-foreground font-medium">Verification</td>
                  <td class="py-1.5 px-2 text-right">
                    <Badge className={verificationColor[data.verification.level] + " text-xs px-1.5 py-0.5 font-medium"}>
                      {data.verification.level.charAt(0).toUpperCase() + data.verification.level.slice(1)}
                    </Badge>
                  </td>
                </tr>
                <tr class="border-b border-border bg-muted/10 hover:bg-muted/30 transition-colors">
                  <td class="py-1.5 px-2 text-muted-foreground font-medium">Hardware</td>
                  <td class="py-1.5 px-2 text-right">
                    <Badge className="bg-primary/10 text-primary border-primary/20 text-xs px-1.5 py-0.5 font-medium">
                      {data.hardware.openness.charAt(0).toUpperCase() + data.hardware.openness.slice(1)}
                    </Badge>
                  </td>
                </tr>
                <tr class="border-b border-border hover:bg-muted/30 transition-colors">
                  <td class="py-1.5 px-2 text-muted-foreground font-medium">Updated</td>
                  <td class="py-1.5 px-2 font-mono font-semibold text-right text-xs">{data.verification.last_updated}</td>
                </tr>
                <tr class="border-b border-border bg-muted/10 hover:bg-muted/30 transition-colors">
                  <td class="py-1.5 px-2 text-muted-foreground font-medium">Sources</td>
                  <td class="py-1.5 px-2 font-mono font-semibold text-right">{data.sources.length}</td>
                </tr>
                {manufacturer?.data.website && (
                  <tr class="hover:bg-muted/30 transition-colors">
                    <td class="py-1.5 px-2 text-muted-foreground font-medium">Manufacturer</td>
                    <td class="py-1.5 px-2 text-right">
                      <a 
                        href={manufacturer.data.website} 
                        target="_blank" 
                        rel="noopener noreferrer"
                        class="font-semibold hover:text-primary transition-colors text-xs inline-flex items-center gap-1"
                      >
                        {manufacturer.data.name}
                        <span class="text-primary">→</span>
                      </a>
                    </td>
                  </tr>
                )}
              </tbody>
            </table>
          </CardContent>
        </Card>
      </div>
    </div>
    </div>
  </MainLayout>
</BaseLayout>
