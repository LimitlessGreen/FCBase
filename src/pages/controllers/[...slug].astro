---
import { getCollection, getEntry } from 'astro:content';
import { buildRevisionVariants } from '@/content/config';
import DetailHeader from '@/components/detail/DetailHeader.astro';
import DetailPageLayout from '@/components/detail/DetailPageLayout.astro';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/Card';
import { Badge } from '@/components/ui/Badge';
import StatusBadge from '@/components/ui/StatusBadge.astro';
import ProfessionalTable from '@/components/table/ProfessionalTable.astro';
import TableSection from '@/components/table/TableSection.astro';
import TableRow from '@/components/table/TableRow.astro';
import TableRow2Col from '@/components/table/TableRow2Col.astro';
import SensorList from '@/components/SensorList.astro';
import {
  extractUniqueSensorIds,
  fetchSensorNameMap,
  mapSensorsWithNames,
  getManufacturerName,
  formatMounting,
  formatVoltageRange,
  formatDimensions,
  formatWeight,
  getPowerTypeLabel,
  formatPeripheralType,
} from '@/lib/data-utils';
import { 
  Cpu, 
  Package,
  Zap,
  Cable,
  Box,
  Layers,
} from 'lucide-react';

export async function getStaticPaths() {
  const controllers = await getCollection('controllers');
  return controllers.map((controller) => ({
    params: { slug: controller.id },
    props: { controller },
  }));
}

const { controller } = Astro.props;
const { data } = controller;

// Fetch related data
const manufacturer = data.brand ? await getEntry('manufacturers', data.brand) : null;
const manufacturerName = getManufacturerName(manufacturer, data.brand);
const mcu = data.mcu ? await getEntry('mcu', data.mcu) : null;
const firmware = await Promise.all(
  data.firmware_support.map(async (fw) => {
    const entry = await getEntry('firmware', fw.id);
    return { ...fw, name: entry?.data.title || entry?.data.name || fw.id };
  })
);

const revisionVariants = buildRevisionVariants(data);

// Use data-utils for sensor deduplication
const uniqueSensorIds = extractUniqueSensorIds(revisionVariants);
const sensorNameMap = await fetchSensorNameMap(uniqueSensorIds);

const revisionVariantsWithSensors = await Promise.all(
  revisionVariants.map(async (variant) => {
    const revision = variant.revision;
    const sourceEntries = revision?.sources
      ? await Promise.all(
          revision.sources.map(async (sourceId) => {
            const entry = await getEntry('sources', sourceId);
            return {
              id: sourceId,
              title: entry?.data.title ?? sourceId,
              url: entry?.data.url ?? null,
            };
          })
        )
      : [];

    const sensorDetails = {
      imu: mapSensorsWithNames(variant.spec.sensors?.imu, sensorNameMap),
      barometer: mapSensorsWithNames(variant.spec.sensors?.barometer, sensorNameMap),
      magnetometer: mapSensorsWithNames(variant.spec.sensors?.magnetometer, sensorNameMap),
    };

    return {
      ...variant,
      sourceEntries,
      sensorDetails,
    };
  })
);

const defaultVariantId = revisionVariantsWithSensors[0]?.id ?? 'base';
const hasMultipleVariants = revisionVariantsWithSensors.length > 1;
const hardwareRevisionSummaries = revisionVariantsWithSensors.filter(
  (variant) => variant.revision
);

const basePath = import.meta.env.BASE_URL.replace(/\/$/, '');
const controllerSlug = (controller as { slug?: string }).slug ?? controller.id;
const editPath = `src/content/controllers/${controllerSlug}.yaml`;
---

<DetailPageLayout
  title={`${data.title} - Flight Controller Database`}
  description={`${data.title} by ${manufacturerName} - ${data.mounting} mounting, ${data.mcu} MCU. Supports ${firmware.map(f => f.name).join(', ')}.`}
  editPath={editPath}
  breadcrumbs={[
    { href: `${basePath}/`, label: 'Home' },
    { href: `${basePath}/controllers`, label: 'Controllers' },
    { label: data.title },
  ]}
>
  <DetailHeader
    slot="header"
    title={data.title}
    subtitle={`by ${manufacturerName}`}
    description={data.notes}
  >
    <StatusBadge 
      slot="badges" 
      variant="verification" 
      status={data.verification.level}
      showIcon
      size="sm"
    />
    <StatusBadge 
      slot="badges" 
      variant="hardware" 
      status={data.hardware.openness}
      size="sm"
    >
      {data.hardware.openness.charAt(0).toUpperCase() + data.hardware.openness.slice(1)} Hardware
    </StatusBadge>
  </DetailHeader>

  <!-- Main Content - Ultra Compact Layout -->
  <div class="grid grid-cols-1 gap-4 mb-8 lg:grid-cols-4">
    <!-- Left Column - Complete Specs Table -->
    <div class="lg:col-span-3">
      <Card>
        <CardHeader>
          <CardTitle className="text-lg">Technical Specifications</CardTitle>
        </CardHeader>
        <CardContent>
          <div
            class="space-y-4"
            data-revision-root
            data-default-variant={defaultVariantId}
          >
            {hasMultipleVariants && (
              <div class="flex flex-col gap-3 sm:flex-row sm:items-center sm:justify-between">
                <div class="sm:hidden w-full space-y-1">
                  <label
                    for="hardware-revision-select"
                    class="text-[10px] uppercase tracking-wide font-semibold text-muted-foreground"
                  >
                    Hardware revision
                  </label>
                  <select
                    id="hardware-revision-select"
                    data-revision-select
                    class="w-full rounded-sm border border-border/60 bg-background px-3 py-2 text-sm text-foreground focus:outline-hidden focus:ring-2 focus:ring-primary/40"
                  >
                    {revisionVariantsWithSensors.map((variant) => (
                      <option value={variant.id}>{variant.label}</option>
                    ))}
                  </select>
                </div>
                <div
                  class="hidden sm:flex flex-wrap gap-2"
                  role="tablist"
                  aria-label="Hardware revisions"
                >
                  {revisionVariantsWithSensors.map((variant, idx) => (
                    <button
                      type="button"
                      data-revision-tab={variant.id}
                      class={`border rounded-sm px-3 py-1.5 text-sm font-medium transition-colors ${idx === 0 ? 'bg-primary/10 border-primary/40 text-primary' : 'bg-muted/30 border-border/60 text-muted-foreground'}`}
                      aria-selected={idx === 0 ? 'true' : 'false'}
                    >
                      {variant.label}
                    </button>
                  ))}
                </div>
              </div>
            )}
              {revisionVariantsWithSensors.map((variant, idx) => (
                <section
                  key={variant.id}
                  data-revision-panel={variant.id}
                  class={`space-y-4 ${idx === 0 ? '' : 'hidden'}`}
                  aria-hidden={idx === 0 ? 'false' : 'true'}
                >
                  {variant.revision ? (
                    <div class="rounded-sm border border-border/40 bg-muted/30 p-3 space-y-2">
                      <div class="flex flex-wrap items-center justify-between gap-2">
                        <div class="flex flex-wrap items-center gap-2">
                          <Badge className="text-[10px] uppercase tracking-wide bg-primary/10 text-primary border-primary/20">
                            {variant.label}
                          </Badge>
                          {variant.revision.released && (
                            <span class="text-xs font-mono text-muted-foreground">
                              {variant.revision.released}
                            </span>
                          )}
                        </div>
                        <span class="text-xs font-semibold text-muted-foreground">
                          Revision overview
                        </span>
                      </div>
                      {variant.revision.notes && (
                        <p class="text-xs leading-snug text-muted-foreground">
                          {variant.revision.notes}
                        </p>
                      )}
                      {variant.revision.changes && variant.revision.changes.length > 0 && (
                        <ul class="space-y-1">
                          {variant.revision.changes.map((change, changeIdx) => (
                            <li
                              key={`${variant.id}-change-${changeIdx}`}
                              class="flex items-start gap-2 text-xs text-muted-foreground"
                            >
                              <span class="text-primary font-bold mt-0.5">â€¢</span>
                              <span class="leading-snug text-foreground">{change}</span>
                            </li>
                          ))}
                        </ul>
                      )}
                      {variant.revision.overrides && (
                        <div class="flex flex-wrap gap-1.5">
                          {variant.revision.overrides.sensors && (
                            <Badge className="text-[10px] uppercase tracking-wide bg-purple-500/10 text-purple-500 border-purple-500/30">
                              Sensor overrides
                            </Badge>
                          )}
                          {variant.revision.overrides.io && (
                            <Badge className="text-[10px] uppercase tracking-wide bg-blue-500/10 text-blue-500 border-blue-500/30">
                              I/O overrides
                            </Badge>
                          )}
                          {variant.revision.overrides.power && (
                            <Badge className="text-[10px] uppercase tracking-wide bg-amber-500/10 text-amber-500 border-amber-500/30">
                              Power overrides
                            </Badge>
                          )}
                        </div>
                      )}
                      {variant.sourceEntries.length > 0 && (
                        <div class="flex flex-wrap gap-1.5">
                          {variant.sourceEntries.map((source) =>
                            source.url ? (
                              <a
                                key={source.id}
                                href={source.url}
                                target="_blank"
                                rel="noopener noreferrer"
                                class="text-[10px] uppercase tracking-wide font-semibold inline-flex items-center gap-1 rounded-sm border border-primary/30 bg-primary/5 px-2 py-1 text-primary hover:bg-primary/10 transition-colors"
                              >
                                {source.title}
                                <span>â†—</span>
                              </a>
                            ) : (
                              <span
                                key={source.id}
                                class="text-[10px] uppercase tracking-wide font-semibold inline-flex items-center gap-1 rounded-sm border border-border/40 bg-muted/30 px-2 py-1 text-muted-foreground"
                              >
                                {source.title}
                              </span>
                            )
                          )}
                        </div>
                      )}
                    </div>
                  ) : (
                    <div class="rounded-sm border border-border/40 bg-muted/20 p-3 space-y-2">
                      <div class="flex flex-wrap items-center justify-between gap-2">
                        <span class="text-sm font-semibold text-foreground">
                          Base hardware specification
                        </span>
                        <Badge className="text-[10px] uppercase tracking-wide bg-primary/10 text-primary border-primary/20">
                          Default
                        </Badge>
                      </div>
                      {data.hardware.notes && (
                        <p class="text-xs leading-snug text-muted-foreground">{data.hardware.notes}</p>
                      )}
                    </div>
                  )}
                  <ProfessionalTable>
                    <TableSection title="Core Hardware" color="blue" />
                    
                    <TableRow2Col
                      label1="MCU"
                      value1={mcu?.data.title || mcu?.data.name || variant.spec.mcu}
                      label2="Mounting"
                      value2={formatMounting(variant.spec.mounting)}
                      mono1
                      mono2
                    />
                    
                    {variant.spec.dimensions && (
                      <TableRow2Col
                        label1="Dimensions"
                        value1={formatDimensions(variant.spec.dimensions)}
                        label2="Weight"
                        value2={formatWeight(variant.spec.dimensions.weight_g) || 'â€”'}
                        mono1
                        mono2
                      />
                    )}
                    <TableSection title="Power" color="orange" />
                    
                    {variant.spec.power.inputs && variant.spec.power.inputs.length > 0 ? (
                      <>
                        <TableRow label="Power Inputs">
                          <div class="space-y-2">
                            {variant.spec.power.inputs.map((input, idx) => {
                              const voltageLabel = formatVoltageRange(input.voltage);
                              const typeLabel = getPowerTypeLabel(input.type);
                              return (
                                <div
                                  key={`${input.name}-${idx}`}
                                  class="rounded-sm border border-border/40 bg-muted/20 p-3 space-y-1"
                                >
                                  <div class="flex flex-wrap items-center justify-between gap-2">
                                    <span class="font-mono font-semibold text-sm text-foreground">
                                      {input.name}
                                    </span>
                                    {typeLabel && (
                                      <span class="text-[10px] uppercase tracking-wide text-muted-foreground">
                                        {typeLabel}
                                      </span>
                                    )}
                                  </div>
                                  {input.connector && (
                                    <div class="text-xs text-muted-foreground">
                                      Connector:&nbsp;
                                      <span class="font-mono text-foreground">{input.connector}</span>
                                    </div>
                                  )}
                                  {voltageLabel && (
                                    <div class="text-xs text-muted-foreground">
                                      Voltage:&nbsp;
                                      <span class="font-semibold text-foreground">{voltageLabel}</span>
                                    </div>
                                  )}
                                  {input.notes && (
                                    <p class="text-xs text-muted-foreground leading-snug">{input.notes}</p>
                                  )}
                                </div>
                              );
                            })}
                          </div>
                        </TableRow>
                        {variant.spec.power.redundant && (
                          <TableRow 
                            label="Redundancy" 
                            value="âœ“ Yes"
                            class="font-semibold text-green-600 dark:text-green-400"
                          />
                        )}
                      </>
                    ) : (
                      <>
                        <TableRow2Col
                          label1="Input Voltage"
                          value1={variant.spec.power.voltage_in ?? 'â€”'}
                          label2="Redundancy"
                          value2={variant.spec.power.redundant ? 'âœ“ Yes' : 'â€”'}
                          mono1
                        />
                      </>
                    )}
                    {variant.spec.power.notes && (
                      <TableRow label=" " class="text-xs text-muted-foreground italic">
                        {variant.spec.power.notes}
                      </TableRow>
                    )}
                    <TableSection title="Connectivity & I/O" color="green" />
                    
                    <TableRow2Col
                      label1="UARTs"
                      value1={variant.spec.io.uarts}
                      label2="CAN Bus"
                      value2={variant.spec.io.can}
                    />
                    
                    <TableRow2Col
                      label1="PWM Outputs"
                      value1={variant.spec.io.pwm}
                      label2="SD Card"
                      value2={variant.spec.io.sd_card ? 'âœ“ Yes' : 'âœ— No'}
                    />
                    
                    {variant.spec.io.ethernet !== undefined && (
                      <TableRow
                        label="Ethernet"
                        value={variant.spec.io.ethernet ? 'âœ“ Yes' : 'âœ— No'}
                      />
                    )}
                    
                    {variant.spec.io.peripherals && variant.spec.io.peripherals.length > 0 && (
                      <TableRow label="Peripheral Ports">
                        <div class="grid gap-3 sm:grid-cols-2">
                          {variant.spec.io.peripherals.map((peripheral, idx) => (
                            <div
                              class="rounded-sm border border-border/40 bg-background/70 p-3 shadow-xs"
                              key={`${peripheral.name}-${idx}`}
                            >
                              <div class="flex items-center justify-between gap-2">
                                <span class="font-semibold text-sm text-foreground">
                                  {peripheral.name}
                                  {peripheral.count && (
                                    <span class="ml-1 text-xs text-muted-foreground font-medium">
                                      Ã—{peripheral.count}
                                    </span>
                                  )}
                                </span>
                                <Badge className="text-[10px] uppercase tracking-wide">
                                  {formatPeripheralType(peripheral.type)}
                                </Badge>
                              </div>
                              {peripheral.interfaces && peripheral.interfaces.length > 0 && (
                                <div class="mt-2 flex flex-wrap gap-1.5">
                                  {peripheral.interfaces.map((iface) => (
                                    <Badge
                                      variant="secondary"
                                      className="text-[10px] uppercase tracking-wide"
                                      key={`${peripheral.name}-${iface}`}
                                    >
                                      {iface.replace(/_/g, ' ')}
                                    </Badge>
                                  ))}
                                </div>
                              )}
                              {peripheral.connector && (
                                <p class="mt-2 text-xs text-muted-foreground">
                                  <span class="font-medium text-foreground">Connector:</span>&nbsp;{peripheral.connector}
                                </p>
                              )}
                              {peripheral.voltage && (
                                <p class="text-xs text-muted-foreground">
                                  <span class="font-medium text-foreground">Voltage:</span> {peripheral.voltage}
                                </p>
                              )}
                              {peripheral.notes && (
                                <p class="text-xs text-muted-foreground leading-snug mt-1">
                                  {peripheral.notes}
                                </p>
                              )}
                            </div>
                          ))}
                        </div>
                      </TableRow>
                    )}
                    <TableSection title="Onboard Sensors" color="purple" />
                    
                    {variant.sensorDetails.imu.length > 0 && (
                      <TableRow label="IMU">
                        <SensorList 
                          sensors={variant.sensorDetails.imu.map(s => ({
                            id: s.id,
                            name: s.name ?? s.id,
                            instances: s.count
                          }))}
                          linkable={true}
                          size="sm"
                        />
                      </TableRow>
                    )}
                    
                    {variant.sensorDetails.barometer.length > 0 && (
                      <TableRow label="Barometer">
                        <SensorList 
                          sensors={variant.sensorDetails.barometer.map(s => ({
                            id: s.id,
                            name: s.name ?? s.id,
                            instances: s.count
                          }))}
                          linkable={true}
                          size="sm"
                        />
                      </TableRow>
                    )}
                    
                    {variant.sensorDetails.magnetometer.length > 0 && (
                      <TableRow label="Magnetometer">
                        <SensorList 
                          sensors={variant.sensorDetails.magnetometer.map(s => ({
                            id: s.id,
                            name: s.name ?? s.id,
                            instances: s.count
                          }))}
                          linkable={true}
                          size="sm"
                        />
                      </TableRow>
                    )}
                    {data.features && data.features.length > 0 && (
                      <>
                        <TableSection title="Additional Features" color="green" />
                        <TableRow label=" ">
                          <ul class="grid grid-cols-2 gap-x-4 gap-y-1.5 text-sm">
                            {data.features.map((feature) => (
                              <li class="flex items-start gap-2" key={feature}>
                                <span class="text-emerald-600 dark:text-emerald-400 font-bold text-sm mt-0.5">âœ“</span>
                                <span class="font-medium">{feature}</span>
                              </li>
                            ))}
                          </ul>
                        </TableRow>
                      </>
                    )}
                  </ProfessionalTable>
                </section>
              ))}
            </div>
            {hasMultipleVariants && (
              <script type="module">
                const script = document.currentScript;
                const root = script?.parentElement?.querySelector('[data-revision-root]');
                if (!root) return;
                const defaultId = root.dataset.defaultVariant;
                const tabs = Array.from(root.querySelectorAll('[data-revision-tab]'));
                const panels = Array.from(root.querySelectorAll('[data-revision-panel]'));
                const select = root.querySelector('[data-revision-select]');
                const activeClasses = ['bg-primary/10', 'border-primary/40', 'text-primary'];
                const inactiveClasses = ['bg-muted/30', 'border-border/60', 'text-muted-foreground'];
                const setActive = (id) => {
                  panels.forEach((panel) => {
                    const isActive = panel.dataset.revisionPanel === id;
                    panel.classList.toggle('hidden', !isActive);
                    panel.setAttribute('aria-hidden', isActive ? 'false' : 'true');
                  });
                  tabs.forEach((tab) => {
                    const isActive = tab.dataset.revisionTab === id;
                    tab.setAttribute('aria-selected', isActive ? 'true' : 'false');
                    activeClasses.forEach((cls) => tab.classList.toggle(cls, isActive));
                    inactiveClasses.forEach((cls) => tab.classList.toggle(cls, !isActive));
                  });
                  if (select && select.value !== id) {
                    select.value = id;
                  }
                };
                tabs.forEach((tab) => {
                  tab.addEventListener('click', () => setActive(tab.dataset.revisionTab));
                });
                if (select) {
                  select.addEventListener('change', (event) => setActive(event.target.value));
                }
                if (defaultId) {
                  setActive(defaultId);
                }
              </script>
            )}
          </CardContent>
        </Card>
      </div>

      <!-- Right Column - Professional Sidebar -->
      <div class="space-y-4">
        <!-- Firmware & Info Combined -->
        <Card>
          <CardHeader>
            <CardTitle className="text-base font-bold uppercase tracking-wide text-primary">Quick Reference</CardTitle>
          </CardHeader>
          <CardContent>
            <ProfessionalTable class="text-xs">
              <TableSection title="Firmware Support" color="blue" colspan={2} />
              {firmware.map((fw) => (
                <tr class="even:bg-muted/30 hover:bg-muted/50 transition-colors" key={fw.id}>
                  <td class="px-2 py-1.5 font-semibold">{fw.name}</td>
                  <td class="px-2 py-1.5 text-right">
                    <StatusBadge 
                      variant="firmware" 
                      status={fw.status}
                      size="xs"
                    />
                  </td>
                </tr>
              ))}
              
              <TableSection title="Information" color="gray" colspan={2} />
              <tr class="even:bg-muted/30 hover:bg-muted/50 transition-colors">
                <td class="px-2 py-1.5 text-muted-foreground font-medium">Verification</td>
                <td class="px-2 py-1.5 text-right">
                  <StatusBadge 
                    variant="verification" 
                    status={data.verification.level}
                    size="xs"
                  />
                </td>
              </tr>
              <tr class="even:bg-muted/30 hover:bg-muted/50 transition-colors">
                <td class="px-2 py-1.5 text-muted-foreground font-medium">Hardware</td>
                <td class="px-2 py-1.5 text-right">
                  <StatusBadge 
                    variant="hardware" 
                    status={data.hardware.openness}
                    size="xs"
                  />
                </td>
              </tr>
              <tr class="even:bg-muted/30 hover:bg-muted/50 transition-colors">
                <td class="px-2 py-1.5 text-muted-foreground font-medium">Updated</td>
                <td class="px-2 py-1.5 font-mono font-semibold text-right">{data.verification.last_updated}</td>
              </tr>
              <tr class="even:bg-muted/30 hover:bg-muted/50 transition-colors">
                <td class="px-2 py-1.5 text-muted-foreground font-medium">Sources</td>
                <td class="px-2 py-1.5 font-mono font-semibold text-right">{data.sources.length}</td>
              </tr>
              {manufacturer?.data.website && (
                <tr class="even:bg-muted/30 hover:bg-muted/50 transition-colors">
                  <td class="px-2 py-1.5 text-muted-foreground font-medium">Manufacturer</td>
                  <td class="px-2 py-1.5 text-right">
                    <a 
                      href={manufacturer.data.website} 
                      target="_blank" 
                      rel="noopener noreferrer"
                      class="font-semibold hover:text-primary transition-colors text-xs inline-flex items-center gap-1"
                    >
                      {manufacturer.data.name}
                      <span class="text-primary">â†’</span>
                    </a>
                  </td>
                </tr>
              )}
            </ProfessionalTable>
          </CardContent>
        </Card>
        {hardwareRevisionSummaries.length > 0 && (
          <Card>
            <CardHeader>
              <CardTitle className="text-base font-bold uppercase tracking-wide text-primary">
                Hardware Revisions
              </CardTitle>
              {data.hardware.notes && (
                <CardDescription className="text-xs text-muted-foreground leading-relaxed">
                  {data.hardware.notes}
                </CardDescription>
              )}
            </CardHeader>
            <CardContent>
              <div class="space-y-3">
                {hardwareRevisionSummaries.map((variant) => {
                  const revision = variant.revision!;
                  return (
                    <div
                      key={variant.id}
                      class="rounded-sm border border-border/40 bg-background/70 p-3 shadow-xs"
                    >
                      <div class="flex flex-wrap items-center justify-between gap-2">
                        <span class="font-semibold text-sm text-foreground">{variant.label}</span>
                        {revision.released && (
                          <Badge className="text-[10px] uppercase tracking-wide bg-primary/10 text-primary border-primary/20">
                            {revision.released}
                          </Badge>
                        )}
                      </div>
                      {revision.notes && (
                        <p class="mt-1 text-xs leading-snug text-muted-foreground">{revision.notes}</p>
                      )}
                      {revision.changes && revision.changes.length > 0 && (
                        <ul class="mt-2 space-y-1">
                          {revision.changes.map((change, changeIdx) => (
                            <li
                              key={`${variant.id}-change-${changeIdx}`}
                              class="flex items-start gap-2 text-xs text-muted-foreground"
                            >
                              <span class="text-primary font-bold mt-0.5">â€¢</span>
                              <span class="leading-snug text-foreground">{change}</span>
                            </li>
                          ))}
                        </ul>
                      )}
                      {revision.overrides && (
                        <div class="mt-2 flex flex-wrap gap-1.5">
                          {revision.overrides.sensors && (
                            <Badge className="text-[10px] uppercase tracking-wide bg-purple-500/10 text-purple-500 border-purple-500/30">
                              Sensor overrides
                            </Badge>
                          )}
                          {revision.overrides.io && (
                            <Badge className="text-[10px] uppercase tracking-wide bg-blue-500/10 text-blue-500 border-blue-500/30">
                              I/O overrides
                            </Badge>
                          )}
                          {revision.overrides.power && (
                            <Badge className="text-[10px] uppercase tracking-wide bg-amber-500/10 text-amber-500 border-amber-500/30">
                              Power overrides
                            </Badge>
                          )}
                        </div>
                      )}
                      {variant.sourceEntries.length > 0 && (
                        <div class="mt-2 flex flex-wrap gap-1.5">
                          {variant.sourceEntries.map((source) =>
                            source.url ? (
                              <a
                                key={source.id}
                                href={source.url}
                                target="_blank"
                                rel="noopener noreferrer"
                                class="text-[10px] uppercase tracking-wide font-semibold inline-flex items-center gap-1 rounded-sm border border-primary/30 bg-primary/5 px-2 py-1 text-primary hover:bg-primary/10 transition-colors"
                              >
                                {source.title}
                                <span>â†—</span>
                              </a>
                            ) : (
                              <span
                                key={source.id}
                                class="text-[10px] uppercase tracking-wide font-semibold inline-flex items-center gap-1 rounded-sm border border-border/40 bg-muted/30 px-2 py-1 text-muted-foreground"
                              >
                                {source.title}
                              </span>
                            )
                          )}
                        </div>
                      )}
                    </div>
                  );
                })}
              </div>
            </CardContent>
          </Card>
        )}
      </div>
    </div>
  </div>
</DetailPageLayout>
