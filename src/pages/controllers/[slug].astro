---
import { getCollection, getEntry } from 'astro:content';
import BaseLayout from '@/layouts/BaseLayout.astro';
import MainLayout from '@/layouts/MainLayout.astro';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/Card';
import { Badge } from '@/components/ui/Badge';
import { 
  Cpu, 
  Gauge, 
  Package, 
  Zap, 
  Database, 
  Wifi, 
  HardDrive,
  CheckCircle2,
  AlertCircle,
  Scale,
  Ruler,
  Box,
  Layers,
} from 'lucide-react';

export async function getStaticPaths() {
  const controllers = await getCollection('controllers');
  return controllers.map((controller) => ({
    params: { slug: controller.id },
    props: { controller },
  }));
}

const { controller } = Astro.props;
const { data } = controller;

// Fetch related data
const manufacturer = data.brand ? await getEntry('manufacturers', data.brand) : null;
const mcu = data.mcu ? await getEntry('mcu', data.mcu) : null;
const firmware = await Promise.all(
  data.firmware_support.map(async (fw) => {
    const entry = await getEntry('firmware', fw.id);
    return { ...fw, name: entry?.data.title || entry?.data.name || fw.id };
  })
);

// Fetch sensor details
const sensorDetails = {
  imu: data.sensors.imu ? await Promise.all(
    data.sensors.imu.map(async (s) => {
      const entry = await getEntry('sensors', s.id);
      return { ...s, name: entry?.data.title || entry?.data.name || s.id };
    })
  ) : [],
  barometer: data.sensors.barometer ? await Promise.all(
    data.sensors.barometer.map(async (s) => {
      const entry = await getEntry('sensors', s.id);
      return { ...s, name: entry?.data.title || entry?.data.name || s.id };
    })
  ) : [],
  magnetometer: data.sensors.magnetometer ? await Promise.all(
    data.sensors.magnetometer.map(async (s) => {
      const entry = await getEntry('sensors', s.id);
      return { ...s, name: entry?.data.title || entry?.data.name || s.id };
    })
  ) : [],
};

// Format mounting type
const mountingDisplay = {
  '20x20': '20×20mm',
  '25.5x25.5': '25.5×25.5mm',
  '30.5x30.5': '30.5×30.5mm',
  '35x35': '35×35mm',
  'cube': 'Cube Carrier Board',
  'wing': 'Wing Form Factor',
  'custom': 'Custom',
};

// Verification badge color
const verificationColor = {
  unverified: 'bg-yellow-500/10 text-yellow-500 border-yellow-500/20',
  community: 'bg-blue-500/10 text-blue-500 border-blue-500/20',
  reviewed: 'bg-green-500/10 text-green-500 border-green-500/20',
};

// Firmware status color
const firmwareStatusColor = {
  beta: 'bg-orange-500/10 text-orange-500 border-orange-500/20',
  stable: 'bg-green-500/10 text-green-500 border-green-500/20',
  deprecated: 'bg-red-500/10 text-red-500 border-red-500/20',
  community: 'bg-blue-500/10 text-blue-500 border-blue-500/20',
};

const basePath = import.meta.env.BASE_URL.replace(/\/$/, '');
---

<BaseLayout
  title={`${data.title} - Flight Controller Database`}
  description={`${data.title} by ${manufacturer?.data.name || data.brand} - ${data.mounting} mounting, ${data.mcu} MCU. Supports ${firmware.map(f => f.name).join(', ')}.`}
>
  <MainLayout>
    <div class="container py-8">
      <!-- Breadcrumb -->
      <nav class="mb-6 flex items-center gap-2 text-sm text-muted-foreground">
        <a href={`${basePath}/`} class="hover:text-foreground transition-colors">Home</a>
        <span>/</span>
        <a href={`${basePath}/controllers`} class="hover:text-foreground transition-colors">Controllers</a>
        <span>/</span>
        <span class="text-foreground">{data.title}</span>
      </nav>

      <!-- Header -->
    <div class="mb-6">
      <div class="flex flex-col sm:flex-row sm:items-start sm:justify-between gap-3 mb-3">
        <div>
          <h1 class="text-3xl font-bold tracking-tight mb-1">{data.title}</h1>
          <p class="text-base text-muted-foreground">
            by {manufacturer?.data.name || data.brand}
          </p>
        </div>
        <div class="flex flex-wrap gap-1.5">
          <Badge className={`${verificationColor[data.verification.level]} px-2 py-0.5 text-xs`}>
            {data.verification.level === 'reviewed' && <CheckCircle2 className="w-3 h-3 mr-1" />}
            {data.verification.level === 'community' && <AlertCircle className="w-3 h-3 mr-1" />}
            {data.verification.level.charAt(0).toUpperCase() + data.verification.level.slice(1)}
          </Badge>
          <Badge className="bg-primary/10 text-primary border-primary/20 px-2 py-0.5 text-xs">
            {data.hardware.openness.charAt(0).toUpperCase() + data.hardware.openness.slice(1)} Hardware
          </Badge>
        </div>
      </div>
      
      {data.notes && (
        <p class="text-sm text-muted-foreground leading-relaxed">{data.notes}</p>
      )}
    </div>

    <!-- Main Content - Ultra Compact Layout -->
    <div class="grid grid-cols-1 lg:grid-cols-4 gap-4 mb-8">
      <!-- Left Column - Complete Specs Table -->
      <div class="lg:col-span-3">
        <Card>
          <CardHeader>
            <CardTitle className="text-lg">Technical Specifications</CardTitle>
          </CardHeader>
          <CardContent>
            <table class="w-full text-sm">
              <tbody class="divide-y divide-border">
                <!-- Core Hardware -->
                <tr class="bg-muted/30">
                  <td colspan="4" class="py-1.5 px-2 font-semibold text-xs uppercase tracking-wide flex items-center gap-2">
                    <Cpu className="w-3.5 h-3.5" />
                    Core Hardware
                  </td>
                </tr>
                <tr>
                  <td class="py-1.5 px-2 text-muted-foreground w-1/4">MCU</td>
                  <td class="py-1.5 px-2 font-medium w-1/4">{mcu?.data.title || mcu?.data.name || data.mcu}</td>
                  <td class="py-1.5 px-2 text-muted-foreground w-1/4">Mounting</td>
                  <td class="py-1.5 px-2 font-medium w-1/4">{mountingDisplay[data.mounting]}</td>
                </tr>
                {data.dimensions && (
                  <tr>
                    <td class="py-1.5 px-2 text-muted-foreground">Dimensions</td>
                    <td class="py-1.5 px-2 font-medium">
                      {data.dimensions.width_mm} × {data.dimensions.length_mm}
                      {data.dimensions.height_mm && ` × ${data.dimensions.height_mm}`} mm
                    </td>
                    {data.dimensions.weight_g && (
                      <>
                        <td class="py-1.5 px-2 text-muted-foreground">Weight</td>
                        <td class="py-1.5 px-2 font-medium">{data.dimensions.weight_g}g</td>
                      </>
                    )}
                  </tr>
                )}

                <!-- Power -->
                <tr class="bg-muted/30">
                  <td colspan="4" class="py-1.5 px-2 font-semibold text-xs uppercase tracking-wide flex items-center gap-2">
                    <Zap className="w-3.5 h-3.5" />
                    Power
                  </td>
                </tr>
                <tr>
                  <td class="py-1.5 px-2 text-muted-foreground">Input Voltage</td>
                  <td class="py-1.5 px-2 font-medium">{data.power.voltage_in}</td>
                  {data.power.redundant && (
                    <>
                      <td class="py-1.5 px-2 text-muted-foreground">Redundancy</td>
                      <td class="py-1.5 px-2 font-medium text-green-600 dark:text-green-400">✓ Yes</td>
                    </>
                  )}
                </tr>
                {data.power.notes && (
                  <tr>
                    <td colspan="4" class="py-1 px-2 text-xs text-muted-foreground italic">{data.power.notes}</td>
                  </tr>
                )}

                <!-- I/O Ports -->
                <tr class="bg-muted/30">
                  <td colspan="4" class="py-1.5 px-2 font-semibold text-xs uppercase tracking-wide flex items-center gap-2">
                    <Package className="w-3.5 h-3.5" />
                    Connectivity & I/O
                  </td>
                </tr>
                <tr>
                  <td class="py-1.5 px-2 text-muted-foreground">UARTs</td>
                  <td class="py-1.5 px-2 font-medium">{data.io.uarts}</td>
                  <td class="py-1.5 px-2 text-muted-foreground">CAN Bus</td>
                  <td class="py-1.5 px-2 font-medium">{data.io.can}</td>
                </tr>
                <tr>
                  <td class="py-1.5 px-2 text-muted-foreground">PWM Outputs</td>
                  <td class="py-1.5 px-2 font-medium">{data.io.pwm}</td>
                  <td class="py-1.5 px-2 text-muted-foreground">SD Card</td>
                  <td class="py-1.5 px-2 font-medium">{data.io.sd_card ? '✓ Yes' : '✗ No'}</td>
                </tr>
                {data.io.ethernet !== undefined && (
                  <tr>
                    <td class="py-1.5 px-2 text-muted-foreground">Ethernet</td>
                    <td class="py-1.5 px-2 font-medium">{data.io.ethernet ? '✓ Yes' : '✗ No'}</td>
                    <td colspan="2"></td>
                  </tr>
                )}

                <!-- Sensors -->
                <tr class="bg-muted/30">
                  <td colspan="4" class="py-1.5 px-2 font-semibold text-xs uppercase tracking-wide flex items-center gap-2">
                    <Box className="w-3.5 h-3.5" />
                    Onboard Sensors
                  </td>
                </tr>
                {sensorDetails.imu.length > 0 && (
                  <tr>
                    <td class="py-1.5 px-2 text-muted-foreground align-top">IMU</td>
                    <td colspan="3" class="py-1.5 px-2">
                      {sensorDetails.imu.map((sensor, idx) => (
                        <span class="inline-flex items-center mr-3">
                          <span class="font-medium">{sensor.name}</span>
                          {sensor.count && sensor.count > 1 && (
                            <span class="text-xs text-muted-foreground ml-1">×{sensor.count}</span>
                          )}
                        </span>
                      ))}
                    </td>
                  </tr>
                )}
                {sensorDetails.barometer.length > 0 && (
                  <tr>
                    <td class="py-1.5 px-2 text-muted-foreground align-top">Barometer</td>
                    <td colspan="3" class="py-1.5 px-2">
                      {sensorDetails.barometer.map((sensor, idx) => (
                        <span class="inline-flex items-center mr-3">
                          <span class="font-medium">{sensor.name}</span>
                          {sensor.count && sensor.count > 1 && (
                            <span class="text-xs text-muted-foreground ml-1">×{sensor.count}</span>
                          )}
                        </span>
                      ))}
                    </td>
                  </tr>
                )}
                {sensorDetails.magnetometer.length > 0 && (
                  <tr>
                    <td class="py-1.5 px-2 text-muted-foreground align-top">Magnetometer</td>
                    <td colspan="3" class="py-1.5 px-2">
                      {sensorDetails.magnetometer.map((sensor, idx) => (
                        <span class="inline-flex items-center mr-3">
                          <span class="font-medium">{sensor.name}</span>
                          {sensor.count && sensor.count > 1 && (
                            <span class="text-xs text-muted-foreground ml-1">×{sensor.count}</span>
                          )}
                        </span>
                      ))}
                    </td>
                  </tr>
                )}

                <!-- Features -->
                {data.features && data.features.length > 0 && (
                  <>
                    <tr class="bg-muted/30">
                      <td colspan="4" class="py-1.5 px-2 font-semibold text-xs uppercase tracking-wide flex items-center gap-2">
                        <Layers className="w-3.5 h-3.5" />
                        Additional Features
                      </td>
                    </tr>
                    <tr>
                      <td colspan="4" class="py-2 px-2">
                        <ul class="grid grid-cols-2 gap-x-4 gap-y-1 text-sm">
                          {data.features.map((feature) => (
                            <li class="flex items-start gap-1.5">
                              <span class="text-green-600 dark:text-green-400 text-xs mt-0.5">✓</span>
                              <span>{feature}</span>
                            </li>
                          ))}
                        </ul>
                      </td>
                    </tr>
                  </>
                )}
              </tbody>
            </table>
          </CardContent>
        </Card>
      </div>

      <!-- Right Column - Compact Sidebar -->
      <div class="space-y-4">
        <!-- Firmware & Info Combined -->
        <Card>
          <CardHeader>
            <CardTitle className="text-base">Quick Reference</CardTitle>
          </CardHeader>
          <CardContent>
            <table class="w-full text-xs">
              <tbody class="divide-y divide-border">
                <!-- Firmware Section -->
                <tr class="bg-muted/30">
                  <td colspan="2" class="py-1 px-1 font-semibold text-xs uppercase tracking-wide">Firmware</td>
                </tr>
                {firmware.map((fw) => (
                  <tr>
                    <td class="py-1 px-1 font-medium">{fw.name}</td>
                    <td class="py-1 px-1 text-right">
                      <Badge className={firmwareStatusColor[fw.status] + " text-xs px-1.5 py-0"}>
                        {fw.status}
                      </Badge>
                    </td>
                  </tr>
                ))}
                
                <!-- Info Section -->
                <tr class="bg-muted/30">
                  <td colspan="2" class="py-1 px-1 font-semibold text-xs uppercase tracking-wide">Information</td>
                </tr>
                <tr>
                  <td class="py-1 px-1 text-muted-foreground">Verification</td>
                  <td class="py-1 px-1 text-right">
                    <Badge className={verificationColor[data.verification.level] + " text-xs px-1.5 py-0"}>
                      {data.verification.level.charAt(0).toUpperCase() + data.verification.level.slice(1)}
                    </Badge>
                  </td>
                </tr>
                <tr>
                  <td class="py-1 px-1 text-muted-foreground">Hardware</td>
                  <td class="py-1 px-1 text-right">
                    <Badge className="bg-primary/10 text-primary border-primary/20 text-xs px-1.5 py-0"}>
                      {data.hardware.openness.charAt(0).toUpperCase() + data.hardware.openness.slice(1)}
                    </Badge>
                  </td>
                </tr>
                <tr>
                  <td class="py-1 px-1 text-muted-foreground">Updated</td>
                  <td class="py-1 px-1 font-medium text-right text-xs">{data.verification.last_updated}</td>
                </tr>
                <tr>
                  <td class="py-1 px-1 text-muted-foreground">Sources</td>
                  <td class="py-1 px-1 font-medium text-right">{data.sources.length}</td>
                </tr>
                {manufacturer?.data.website && (
                  <tr>
                    <td class="py-1 px-1 text-muted-foreground">Manufacturer</td>
                    <td class="py-1 px-1 text-right">
                      <a 
                        href={manufacturer.data.website} 
                        target="_blank" 
                        rel="noopener noreferrer"
                        class="font-medium hover:text-primary transition-colors text-xs inline-flex items-center gap-0.5"
                      >
                        {manufacturer.data.name}
                        <span>→</span>
                      </a>
                    </td>
                  </tr>
                )}
              </tbody>
            </table>
          </CardContent>
        </Card>
      </div>
    </div>
    </div>
  </MainLayout>
</BaseLayout>
