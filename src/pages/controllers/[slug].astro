---
import { getCollection, getEntry } from 'astro:content';
import BaseLayout from '@/layouts/BaseLayout.astro';
import MainLayout from '@/layouts/MainLayout.astro';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/Card';
import { Badge } from '@/components/ui/Badge';
import { 
  Cpu, 
  Gauge, 
  Package, 
  Zap, 
  Database, 
  Wifi, 
  HardDrive,
  CheckCircle2,
  AlertCircle,
  Scale,
  Ruler,
  Box,
  Layers,
} from 'lucide-react';

export async function getStaticPaths() {
  const controllers = await getCollection('controllers');
  return controllers.map((controller) => ({
    params: { slug: controller.id },
    props: { controller },
  }));
}

const { controller } = Astro.props;
const { data } = controller;

// Fetch related data
const manufacturer = data.brand ? await getEntry('manufacturers', data.brand) : null;
const mcu = data.mcu ? await getEntry('mcu', data.mcu) : null;
const firmware = await Promise.all(
  data.firmware_support.map(async (fw) => {
    const entry = await getEntry('firmware', fw.id);
    return { ...fw, name: entry?.data.title || entry?.data.name || fw.id };
  })
);

// Fetch sensor details
const sensorDetails = {
  imu: data.sensors.imu ? await Promise.all(
    data.sensors.imu.map(async (s) => {
      const entry = await getEntry('sensors', s.id);
      return { ...s, name: entry?.data.title || entry?.data.name || s.id };
    })
  ) : [],
  barometer: data.sensors.barometer ? await Promise.all(
    data.sensors.barometer.map(async (s) => {
      const entry = await getEntry('sensors', s.id);
      return { ...s, name: entry?.data.title || entry?.data.name || s.id };
    })
  ) : [],
  magnetometer: data.sensors.magnetometer ? await Promise.all(
    data.sensors.magnetometer.map(async (s) => {
      const entry = await getEntry('sensors', s.id);
      return { ...s, name: entry?.data.title || entry?.data.name || s.id };
    })
  ) : [],
};

// Format mounting type
const mountingDisplay = {
  '20x20': '20×20mm',
  '25.5x25.5': '25.5×25.5mm',
  '30.5x30.5': '30.5×30.5mm',
  '35x35': '35×35mm',
  'cube': 'Cube Carrier Board',
  'wing': 'Wing Form Factor',
  'custom': 'Custom',
};

// Verification badge color
const verificationColor = {
  unverified: 'bg-yellow-500/10 text-yellow-500 border-yellow-500/20',
  community: 'bg-blue-500/10 text-blue-500 border-blue-500/20',
  reviewed: 'bg-green-500/10 text-green-500 border-green-500/20',
};

// Firmware status color
const firmwareStatusColor = {
  beta: 'bg-orange-500/10 text-orange-500 border-orange-500/20',
  stable: 'bg-green-500/10 text-green-500 border-green-500/20',
  deprecated: 'bg-red-500/10 text-red-500 border-red-500/20',
  community: 'bg-blue-500/10 text-blue-500 border-blue-500/20',
};
---

<BaseLayout
  title={`${data.title} - Flight Controller Database`}
  description={`${data.title} by ${manufacturer?.data.name || data.brand} - ${data.mounting} mounting, ${data.mcu} MCU. Supports ${firmware.map(f => f.name).join(', ')}.`}
>
  <MainLayout>
    <!-- Breadcrumb -->
    <nav class="mb-6 flex items-center gap-2 text-sm text-muted-foreground">
      <a href="/" class="hover:text-foreground transition-colors">Home</a>
      <span>/</span>
      <a href="/controllers" class="hover:text-foreground transition-colors">Controllers</a>
      <span>/</span>
      <span class="text-foreground">{data.title}</span>
    </nav>

    <!-- Header -->
    <div class="mb-8">
      <div class="flex flex-col sm:flex-row sm:items-start sm:justify-between gap-4 mb-4">
        <div>
          <h1 class="text-4xl font-bold tracking-tight mb-2">{data.title}</h1>
          <p class="text-xl text-muted-foreground">
            by {manufacturer?.data.name || data.brand}
          </p>
        </div>
        <div class="flex flex-wrap gap-2">
          <Badge className={`${verificationColor[data.verification.level]} px-3 py-1`}>
            {data.verification.level === 'reviewed' && <CheckCircle2 className="w-3 h-3 mr-1" />}
            {data.verification.level === 'community' && <AlertCircle className="w-3 h-3 mr-1" />}
            {data.verification.level.charAt(0).toUpperCase() + data.verification.level.slice(1)}
          </Badge>
          <Badge className="bg-primary/10 text-primary border-primary/20 px-3 py-1">
            {data.hardware.openness.charAt(0).toUpperCase() + data.hardware.openness.slice(1)} Hardware
          </Badge>
        </div>
      </div>
      
      {data.notes && (
        <p class="text-muted-foreground leading-relaxed">{data.notes}</p>
      )}
    </div>

    <!-- Main Grid -->
    <div class="grid grid-cols-1 lg:grid-cols-3 gap-6 mb-8">
      <!-- Left Column - Specs -->
      <div class="lg:col-span-2 space-y-6">
        <!-- Core Specs -->
        <Card>
          <CardHeader>
            <CardTitle className="flex items-center gap-2">
              <Cpu className="w-5 h-5" />
              Core Specifications
            </CardTitle>
          </CardHeader>
          <CardContent>
            <dl class="grid grid-cols-1 sm:grid-cols-2 gap-4">
              <div>
                <dt class="text-sm font-medium text-muted-foreground mb-1">MCU</dt>
                <dd class="text-base font-semibold">{mcu?.data.title || mcu?.data.name || data.mcu}</dd>
              </div>
              <div>
                <dt class="text-sm font-medium text-muted-foreground mb-1">Mounting</dt>
                <dd class="text-base font-semibold">{mountingDisplay[data.mounting]}</dd>
              </div>
              {data.dimensions && (
                <>
                  <div>
                    <dt class="text-sm font-medium text-muted-foreground mb-1 flex items-center gap-1">
                      <Ruler className="w-3 h-3" />
                      Dimensions
                    </dt>
                    <dd class="text-base font-semibold">
                      {data.dimensions.width_mm} × {data.dimensions.length_mm}
                      {data.dimensions.height_mm && ` × ${data.dimensions.height_mm}`} mm
                    </dd>
                  </div>
                  {data.dimensions.weight_g && (
                    <div>
                      <dt class="text-sm font-medium text-muted-foreground mb-1 flex items-center gap-1">
                        <Scale className="w-3 h-3" />
                        Weight
                      </dt>
                      <dd class="text-base font-semibold">{data.dimensions.weight_g}g</dd>
                    </div>
                  )}
                </>
              )}
            </dl>
          </CardContent>
        </Card>

        <!-- Power -->
        <Card>
          <CardHeader>
            <CardTitle className="flex items-center gap-2">
              <Zap className="w-5 h-5" />
              Power
            </CardTitle>
          </CardHeader>
          <CardContent>
            <dl class="space-y-4">
              <div>
                <dt class="text-sm font-medium text-muted-foreground mb-1">Input Voltage</dt>
                <dd class="text-base font-semibold">{data.power.voltage_in}</dd>
              </div>
              {data.power.redundant && (
                <div>
                  <dt class="text-sm font-medium text-muted-foreground mb-1">Redundancy</dt>
                  <dd class="flex items-center gap-2 text-base font-semibold text-green-600 dark:text-green-400">
                    <CheckCircle2 className="w-4 h-4" />
                    Redundant Power Inputs
                  </dd>
                </div>
              )}
              {data.power.notes && (
                <div>
                  <dt class="text-sm font-medium text-muted-foreground mb-1">Notes</dt>
                  <dd class="text-sm text-muted-foreground leading-relaxed">{data.power.notes}</dd>
                </div>
              )}
            </dl>
          </CardContent>
        </Card>

        <!-- I/O -->
        <Card>
          <CardHeader>
            <CardTitle className="flex items-center gap-2">
              <Package className="w-5 h-5" />
              Connectivity & I/O
            </CardTitle>
          </CardHeader>
          <CardContent>
            <div class="grid grid-cols-2 sm:grid-cols-3 gap-4">
              <div class="flex flex-col items-center p-3 bg-muted/50 rounded-lg">
                <Database className="w-6 h-6 mb-2 text-primary" />
                <dt class="text-xs text-muted-foreground mb-1">UARTs</dt>
                <dd class="text-2xl font-bold">{data.io.uarts}</dd>
              </div>
              <div class="flex flex-col items-center p-3 bg-muted/50 rounded-lg">
                <Wifi className="w-6 h-6 mb-2 text-primary" />
                <dt class="text-xs text-muted-foreground mb-1">CAN</dt>
                <dd class="text-2xl font-bold">{data.io.can}</dd>
              </div>
              <div class="flex flex-col items-center p-3 bg-muted/50 rounded-lg">
                <Gauge className="w-6 h-6 mb-2 text-primary" />
                <dt class="text-xs text-muted-foreground mb-1">PWM</dt>
                <dd class="text-2xl font-bold">{data.io.pwm}</dd>
              </div>
              <div class="flex flex-col items-center p-3 bg-muted/50 rounded-lg">
                <HardDrive className="w-6 h-6 mb-2 text-primary" />
                <dt class="text-xs text-muted-foreground mb-1">SD Card</dt>
                <dd class="text-lg font-bold">{data.io.sd_card ? '✓' : '✗'}</dd>
              </div>
              {data.io.ethernet !== undefined && (
                <div class="flex flex-col items-center p-3 bg-muted/50 rounded-lg">
                  <Wifi className="w-6 h-6 mb-2 text-primary" />
                  <dt class="text-xs text-muted-foreground mb-1">Ethernet</dt>
                  <dd class="text-lg font-bold">{data.io.ethernet ? '✓' : '✗'}</dd>
                </div>
              )}
            </div>
          </CardContent>
        </Card>

        <!-- Sensors -->
        <Card>
          <CardHeader>
            <CardTitle className="flex items-center gap-2">
              <Box className="w-5 h-5" />
              Onboard Sensors
            </CardTitle>
          </CardHeader>
          <CardContent>
            <div class="space-y-4">
              {sensorDetails.imu.length > 0 && (
                <div>
                  <dt class="text-sm font-medium text-muted-foreground mb-2">IMU</dt>
                  <dd class="space-y-1">
                    {sensorDetails.imu.map((sensor) => (
                      <div class="flex items-center justify-between p-2 bg-muted/50 rounded">
                        <span class="font-medium">{sensor.name}</span>
                        {sensor.count && sensor.count > 1 && (
                          <Badge variant="secondary">×{sensor.count}</Badge>
                        )}
                      </div>
                    ))}
                  </dd>
                </div>
              )}
              {sensorDetails.barometer.length > 0 && (
                <div>
                  <dt class="text-sm font-medium text-muted-foreground mb-2">Barometer</dt>
                  <dd class="space-y-1">
                    {sensorDetails.barometer.map((sensor) => (
                      <div class="flex items-center justify-between p-2 bg-muted/50 rounded">
                        <span class="font-medium">{sensor.name}</span>
                        {sensor.count && sensor.count > 1 && (
                          <Badge variant="secondary">×{sensor.count}</Badge>
                        )}
                      </div>
                    ))}
                  </dd>
                </div>
              )}
              {sensorDetails.magnetometer.length > 0 && (
                <div>
                  <dt class="text-sm font-medium text-muted-foreground mb-2">Magnetometer</dt>
                  <dd class="space-y-1">
                    {sensorDetails.magnetometer.map((sensor) => (
                      <div class="flex items-center justify-between p-2 bg-muted/50 rounded">
                        <span class="font-medium">{sensor.name}</span>
                        {sensor.count && sensor.count > 1 && (
                          <Badge variant="secondary">×{sensor.count}</Badge>
                        )}
                      </div>
                    ))}
                  </dd>
                </div>
              )}
            </div>
          </CardContent>
        </Card>

        {data.features && data.features.length > 0 && (
          <Card>
            <CardHeader>
              <CardTitle className="flex items-center gap-2">
                <Layers className="w-5 h-5" />
                Features
              </CardTitle>
            </CardHeader>
            <CardContent>
              <ul class="space-y-2">
                {data.features.map((feature) => (
                  <li class="flex items-start gap-2">
                    <CheckCircle2 className="w-4 h-4 mt-0.5 text-green-600 dark:text-green-400 flex-shrink-0" />
                    <span class="text-sm">{feature}</span>
                  </li>
                ))}
              </ul>
            </CardContent>
          </Card>
        )}
      </div>

      <!-- Right Column - Firmware & Meta -->
      <div class="space-y-6">
        <!-- Firmware Support -->
        <Card>
          <CardHeader>
            <CardTitle>Firmware Support</CardTitle>
            <CardDescription>Compatible autopilot software</CardDescription>
          </CardHeader>
          <CardContent>
            <div class="space-y-3">
              {firmware.map((fw) => (
                <div class="flex items-center justify-between p-3 bg-muted/50 rounded-lg">
                  <span class="font-semibold">{fw.name}</span>
                  <Badge className={firmwareStatusColor[fw.status]}>
                    {fw.status}
                  </Badge>
                </div>
              ))}
            </div>
          </CardContent>
        </Card>

        <!-- Verification Info -->
        <Card>
          <CardHeader>
            <CardTitle>Data Verification</CardTitle>
          </CardHeader>
          <CardContent>
            <dl class="space-y-3">
              <div>
                <dt class="text-sm text-muted-foreground mb-1">Status</dt>
                <dd>
                  <Badge className={verificationColor[data.verification.level]}>
                    {data.verification.level.charAt(0).toUpperCase() + data.verification.level.slice(1)}
                  </Badge>
                </dd>
              </div>
              <div>
                <dt class="text-sm text-muted-foreground mb-1">Last Updated</dt>
                <dd class="text-sm font-medium">{data.verification.last_updated}</dd>
              </div>
              <div>
                <dt class="text-sm text-muted-foreground mb-1">Sources</dt>
                <dd class="text-sm font-medium">{data.sources.length} reference(s)</dd>
              </div>
            </dl>
          </CardContent>
        </Card>

        {manufacturer?.data.website && (
          <Card>
            <CardHeader>
              <CardTitle>Manufacturer</CardTitle>
            </CardHeader>
            <CardContent>
              <a 
                href={manufacturer.data.website} 
                target="_blank" 
                rel="noopener noreferrer"
                class="flex items-center justify-between p-3 bg-muted/50 hover:bg-muted rounded-lg transition-colors group"
              >
                <span class="font-semibold">{manufacturer.data.name}</span>
                <span class="text-xs text-muted-foreground group-hover:text-foreground">Visit →</span>
              </a>
            </CardContent>
          </Card>
        )}
      </div>
    </div>
  </MainLayout>
</BaseLayout>
