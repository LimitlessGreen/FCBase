---
import "@/styles/globals.css";

export interface Props {
  title?: string;
  description?: string;
}

const { 
  title = "FCBase - Flight Controller Database",
  description = "Your comprehensive flight controller database with detailed specifications, firmware support, and sensor information."
} = Astro.props;

const basePath = import.meta.env.BASE_URL.replace(/\/$/, '');
---

<!doctype html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="description" content={description} />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <link rel="icon" type="image/svg+xml" href={`${basePath}/favicon.svg`} />
    <meta name="generator" content={Astro.generator} />
    <title>{title}</title>
    <slot name="head" />

    <!-- Theme initialization script - prevents FOUC -->
    <script is:inline>
      const THEME_STORAGE_KEY = 'theme';
      const THEME_MODES = ['light', 'dark', 'system'];

      const getStoredTheme = () => {
        if (typeof localStorage === 'undefined') return null;
        const value = localStorage.getItem(THEME_STORAGE_KEY);
        return THEME_MODES.includes(value) ? value : null;
      };

      const resolveTheme = (mode) => {
        if (mode === 'dark' || mode === 'light') {
          return mode;
        }
        return window.matchMedia('(prefers-color-scheme: dark)').matches ? 'dark' : 'light';
      };

      const themeMode = getStoredTheme() ?? 'system';
      const resolvedTheme = resolveTheme(themeMode);

      const root = document.documentElement;
      root.dataset.themeMode = themeMode;
      root.dataset.themeResolved = resolvedTheme;

      if (resolvedTheme === 'dark') {
        root.classList.add('dark');
      } else {
        root.classList.remove('dark');
      }
    </script>
  </head>
  <body class="min-h-screen flex flex-col">
    <slot />
  </body>
</html>
