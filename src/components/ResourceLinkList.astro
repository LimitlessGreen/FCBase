---
import type { HTMLAttributes } from 'astro/types';
import { BookOpen, CircuitBoard, FileText, Map } from 'lucide-react';

type ResourceKind = 'datasheet' | 'ardupilot' | 'px4' | 'hardware';

export interface ResourceLink {
  kind: ResourceKind;
  url: string;
  title?: string;
}

interface Props extends HTMLAttributes<'div'> {
  links: ResourceLink[];
  size?: 'xs' | 'sm';
}

const { links, size = 'sm', class: className, ...rest } = Astro.props as Props;
const filteredLinks = Array.isArray(links)
  ? links.filter((link): link is ResourceLink => Boolean(link?.url))
  : [];

const iconSizeClass = size === 'xs' ? 'h-3 w-3' : 'h-3.5 w-3.5';
const gapClass = size === 'xs' ? 'gap-1' : 'gap-1.5';

const defaultLabels: Record<ResourceKind, string> = {
  datasheet: 'Open datasheet',
  ardupilot: 'View ArduPilot hardware docs',
  px4: 'View PX4 hardware docs',
  hardware: 'Open hardware reference',
};

const iconMap: Record<ResourceKind, typeof FileText> = {
  datasheet: FileText,
  ardupilot: BookOpen,
  px4: Map,
  hardware: CircuitBoard,
};
---

{filteredLinks.length > 0 && (
  <div class={`flex items-center ${gapClass} ${className || ''}`} {...rest}>
    {filteredLinks.map((link) => {
      const Icon = iconMap[link.kind] ?? FileText;
      const label = link.title ?? defaultLabels[link.kind];

      return (
        <a
          href={link.url}
          target="_blank"
          rel="noopener noreferrer"
          class="inline-flex h-7 w-7 items-center justify-center rounded-full bg-muted/40 text-muted-foreground transition hover:bg-muted hover:text-primary"
          title={label}
        >
          <span class="sr-only">{label}</span>
          <Icon className={iconSizeClass} />
        </a>
      );
    })}
  </div>
)}
