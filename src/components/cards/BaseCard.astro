---
/**
 * BaseCard - Foundation component for all entity cards
 * 
 * Provides consistent structure for cards across the site:
 * - Optional image banner with credit overlay
 * - Title/subtitle header
 * - Content area with specs
 * - Badge area for tags/categories
 * - Hover effects and animations
 * 
 * Can be extended/composed for specific entities:
 * - ControllerCard
 * - TransmitterCard
 * - SensorCard
 * - etc.
 * 
 * @usage
 * <BaseCard
 *   href="/path/to/entity"
 *   title="Entity Name"
 *   subtitle="Manufacturer"
 *   image={{ src: '...', credit: '...', sourceUrl: '...' }}
 *   showImage={true}
 * >
 *   <Fragment slot="specs">
 *     <!-- Custom specs content -->
 *   </Fragment>
 *   <Fragment slot="badges">
 *     <!-- Custom badges -->
 *   </Fragment>
 * </BaseCard>
 */

import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/Card';
import { getImage } from 'astro:assets';
import type { ImageMetadata } from 'astro';

interface Props {
  // Navigation
  href: string;
  
  // Header
  title: string;
  subtitle?: string;
  
  // Image
  image?: {
    src: ImageMetadata | string;
    alt?: string;
    credit?: string;
    sourceUrl?: string;
    width?: number;
    height?: number;
  };
  
  // Layout options
  showImage?: boolean;
  imageAspect?: 'video' | 'square' | 'wide';
  
  // Styling
  class?: string;
  cardClass?: string;
  
  // Hover behavior
  hoverBorder?: boolean;
}

const {
  href,
  title,
  subtitle,
  image,
  showImage = true,
  imageAspect = 'video',
  class: className,
  cardClass,
  hoverBorder = false,
} = Astro.props;

const aspectClasses = {
  video: 'aspect-video',
  square: 'aspect-square',
  wide: 'aspect-[21/9]',
};

const imageAlt = image?.alt || title;

const buildResponsivePicture = async (imageMeta: ImageMetadata, sizes: string) => {
  const widths = [320, 640, 960, 1280];
  const formats: Array<'avif' | 'webp'> = ['avif', 'webp'];
  const sources = await Promise.all(
    formats.map(async (format) => {
      const result = await getImage({ src: imageMeta, format, widths, sizes });
      const srcset = result.srcSet.attribute || result.src;
      return { type: `image/${format}`, srcset };
    })
  );

  const fallbackFormat = imageMeta.format === 'png' ? 'png' : 'jpeg';
  const fallback = await getImage({ src: imageMeta, format: fallbackFormat, widths, sizes });
  const fallbackWidth = Number(fallback.attributes.width ?? fallback.options.width ?? imageMeta.width);
  const fallbackHeight = Number(fallback.attributes.height ?? fallback.options.height ?? imageMeta.height);

  return {
    sources,
    img: {
      src: fallback.src,
      srcset: fallback.srcSet.attribute || undefined,
      width: fallbackWidth,
      height: fallbackHeight,
    },
  };
};

const localPicture = image?.src && typeof image.src !== 'string'
  ? await buildResponsivePicture(image.src, '(max-width: 1024px) 100vw, 360px')
  : null;

const remoteImage = image?.src && typeof image.src === 'string'
  ? {
      src: image.src,
      width: image.width ?? 640,
      height: image.height ?? 360,
    }
  : null;
---

<a href={href} class={`group block ${className || ''}`}>
  <Card 
    class={`h-full transition-all hover:shadow-lg hover:-translate-y-1 border-2 hover:border-primary/30 ${cardClass || ''}`}
  >
    {/* Image Banner (optional) */}
    {showImage && (
      <div class={`relative ${aspectClasses[imageAspect]} w-full overflow-hidden rounded-t-xl bg-gradient-to-br from-muted via-background to-muted`}>
        {image?.src ? (
          <>
            {localPicture ? (
              <picture class="block h-full w-full">
                {localPicture.sources.map((source) => (
                  <source srcset={source.srcset} type={source.type} sizes="(max-width: 1024px) 100vw, 360px" />
                ))}
                <img
                  src={localPicture.img.src}
                  alt={imageAlt}
                  loading="lazy"
                  decoding="async"
                  width={localPicture.img.width}
                  height={localPicture.img.height}
                  srcset={localPicture.img.srcset}
                  sizes="(max-width: 1024px) 100vw, 360px"
                  class="h-full w-full object-cover transition-transform duration-500 ease-out group-hover:scale-105"
                />
              </picture>
            ) : remoteImage ? (
              <img
                src={remoteImage.src}
                alt={imageAlt}
                loading="lazy"
                decoding="async"
                width={remoteImage.width}
                height={remoteImage.height}
                sizes="(max-width: 1024px) 100vw, 360px"
                class="h-full w-full object-cover transition-transform duration-500 ease-out group-hover:scale-105"
              />
            ) : (
              <div class="flex h-full w-full items-center justify-center bg-muted/30 text-xs font-medium text-muted-foreground">
                {imageAlt}
              </div>
            )}
            {image.credit && (
              <span class="absolute bottom-2 right-2 rounded bg-background/80 px-2 py-0.5 text-[10px] font-medium uppercase tracking-wide text-muted-foreground">
                {image.sourceUrl ? (
                  <a
                    href={image.sourceUrl}
                    target="_blank"
                    rel="noopener noreferrer"
                    class="hover:underline"
                    onclick="event.stopPropagation()"
                  >
                    {image.credit}
                  </a>
                ) : (
                  image.credit
                )}
              </span>
            )}
          </>
        ) : (
          <span class="absolute inset-0 flex items-center justify-center px-6 text-center text-sm font-medium text-muted-foreground">
            {imageAlt}
          </span>
        )}
      </div>
    )}

    {/* Header: Title + Subtitle */}
    <CardHeader>
      <CardTitle class="group-hover:text-primary transition-colors">
        {title}
      </CardTitle>
      {subtitle && <CardDescription>{subtitle}</CardDescription>}
    </CardHeader>

    {/* Content: Specs + Badges */}
    <CardContent>
      <div class="space-y-3">
        {/* Specs Slot */}
        <slot name="specs" />
        
        {/* Badges Slot */}
        <div class="flex flex-wrap gap-1.5 pt-2">
          <slot name="badges" />
        </div>
      </div>
    </CardContent>
  </Card>
</a>
