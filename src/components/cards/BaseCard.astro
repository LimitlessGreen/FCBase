---
/**
 * BaseCard - Foundation component for all entity cards
 * 
 * Provides consistent structure for cards across the site:
 * - Optional image banner with credit overlay
 * - Title/subtitle header
 * - Content area with specs
 * - Badge area for tags/categories
 * - Hover effects and animations
 * 
 * Can be extended/composed for specific entities:
 * - ControllerCard
 * - TransmitterCard
 * - SensorCard
 * - etc.
 * 
 * @usage
 * <BaseCard
 *   href="/path/to/entity"
 *   title="Entity Name"
 *   subtitle="Manufacturer"
 *   image={{ src: '...', credit: '...', sourceUrl: '...' }}
 *   showImage={true}
 * >
 *   <Fragment slot="specs">
 *     <!-- Custom specs content -->
 *   </Fragment>
 *   <Fragment slot="badges">
 *     <!-- Custom badges -->
 *   </Fragment>
 * </BaseCard>
 */

import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/Card';
import { Picture } from 'astro:assets';
import type { ImageMetadata } from 'astro';

interface Props {
  // Navigation
  href: string;
  
  // Header
  title: string;
  subtitle?: string;
  
  // Image
  image?: {
    src: ImageMetadata | string;
    alt?: string;
    credit?: string;
    sourceUrl?: string;
    width?: number;
    height?: number;
  };
  
  // Layout options
  showImage?: boolean;
  imageAspect?: 'video' | 'square' | 'wide';
  
  // Styling
  class?: string;
  cardClass?: string;

  // Header visibility
  showHeader?: boolean;

  // Hover behavior
  hoverBorder?: boolean;
}

const {
  href,
  title,
  subtitle,
  image,
  showImage = true,
  imageAspect = 'video',
  class: className,
  cardClass,
  showHeader = true,
  hoverBorder = false,
} = Astro.props;

const aspectClasses = {
  video: 'aspect-video',
  square: 'aspect-square',
  wide: 'aspect-[21/9]',
};

const imageAlt = image?.alt || title;
const responsiveSizes = '(max-width: 1024px) 100vw, 360px';

const localImage = image?.src && typeof image.src !== 'string' ? (image.src as ImageMetadata) : null;

const remoteImage = image?.src && typeof image.src === 'string'
  ? {
      src: image.src,
      width: image.width ?? 640,
      height: image.height ?? 360,
    }
  : null;

const hasImageOverlay = Astro.slots.has('imageOverlay');
const hasImageFallback = Astro.slots.has('imageFallback');
---

<div class={`group relative ${className || ''}`}>
  <Card
    class={`relative h-full border transition-all duration-300 ease-out group-hover:-translate-y-0.5 group-hover:border-primary/40 group-hover:shadow-md group-focus-visible:-translate-y-0.5 group-focus-visible:border-primary/40 group-focus-visible:shadow-md ${cardClass || ''}`}
  >
    {/* Image Banner (optional) */}
    {showImage && (
      <div class={`relative ${aspectClasses[imageAspect]} w-full overflow-hidden rounded-t-xl bg-gradient-to-br from-muted/80 via-background to-muted/80`}>
        {image?.src ? (
          <>
            {localImage ? (
              <Picture
                src={localImage}
                widths={[320, 640, 960, 1280]}
                formats={["avif", "webp"]}
                sizes={responsiveSizes}
                alt={imageAlt}
                loading="lazy"
                decoding="async"
                pictureClass="block h-full w-full"
                imgClass="h-full w-full object-cover transition-transform duration-500 ease-out group-hover:scale-105"
              />
            ) : remoteImage ? (
              <img
                src={remoteImage.src}
                alt={imageAlt}
                loading="lazy"
                decoding="async"
                width={remoteImage.width}
                height={remoteImage.height}
                sizes={responsiveSizes}
                class="h-full w-full object-cover transition-transform duration-500 ease-out group-hover:scale-105"
              />
            ) : (
              <div class="flex h-full w-full items-center justify-center bg-muted/30 text-xs font-medium text-muted-foreground">
                {imageAlt}
              </div>
            )}
          </>
        ) : hasImageFallback ? (
          <div class="absolute inset-0 flex items-center justify-center">
            <slot name="imageFallback" />
          </div>
        ) : (
          <span class="absolute inset-0 flex items-center justify-center px-6 text-center text-sm font-medium text-muted-foreground">
            {imageAlt}
          </span>
        )}

        {hasImageOverlay && (
          <div class="absolute inset-0 z-10">
            <slot name="imageOverlay" />
          </div>
        )}

        {image?.credit && (
          <span class="absolute bottom-2 right-2 z-20 rounded bg-background/80 px-2 py-0.5 text-[10px] font-medium uppercase tracking-wide text-muted-foreground">
            {image.sourceUrl ? (
              <a
                href={image.sourceUrl}
                target="_blank"
                rel="noopener noreferrer"
                class="pointer-events-auto hover:underline"
              >
                {image.credit}
              </a>
            ) : (
              image.credit
            )}
          </span>
        )}
      </div>
    )}

    {/* Header: Title + Subtitle */}
    {showHeader && (
      <CardHeader class="gap-1.5 p-4 pb-3 sm:p-5 sm:pb-4">
        <CardTitle class="text-base font-semibold leading-tight transition-colors group-hover:text-primary">
          {title}
        </CardTitle>
        {subtitle && <CardDescription class="text-xs text-muted-foreground sm:text-sm">{subtitle}</CardDescription>}
      </CardHeader>
    )}

    {/* Content: Specs + Badges */}
    <CardContent class="p-4 pt-0 sm:p-5 sm:pt-0">
      <div class="space-y-1.5">
        {/* Specs Slot */}
        <slot name="specs" />

        {/* Badges Slot */}
        <div class="flex flex-wrap gap-1.5 pt-1.5">
          <slot name="badges" />
        </div>
      </div>
    </CardContent>
  </Card>
  <a
    href={href}
    class="absolute inset-0 z-10 rounded-xl focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-primary"
    aria-label={`View ${title}`}
  >
    <span class="sr-only">View {title}</span>
  </a>
</div>
