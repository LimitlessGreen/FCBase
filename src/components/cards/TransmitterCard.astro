---
import type { ImageMetadata } from 'astro';
import BaseCard from './BaseCard.astro';

type SupportLevel = 'official' | 'manufacturer' | 'community';
type SupportStatus = 'supported' | 'limited' | 'sunset' | 'planned';

interface SupportMeta {
  level: SupportLevel;
  status: SupportStatus;
  sinceVersion: string;
  lastVersion?: string;
  notes?: string;
}

interface HardwareRevision {
  id: string;
  name: string;
}

interface ComplianceEntry {
  id: string;
  type?: string;
  url?: string | null;
}

type SupportBadge = { id: string; label: string };
type TimelineEntry = { id: string; label: string; value: string };

interface Props {
  id: string;
  slug: string;
  title: string;
  manufacturer?: string;
  support: SupportMeta;
  hardwareRevisions?: HardwareRevision[];
  compliance?: ComplianceEntry[];
  image?: {
    src: ImageMetadata | string;
    alt?: string;
    credit?: string;
    sourceUrl?: string;
    width?: number;
    height?: number;
  };
  basePath?: string;
  showImage?: boolean;
  variant: 'grid' | 'compact';
  class?: string;
}

const {
  id,
  slug,
  title,
  manufacturer,
  support,
  hardwareRevisions = [],
  compliance = [],
  image,
  basePath = '',
  variant: variantProp = 'grid',
  showImage: showImageProp = true,
  class: className,
} = Astro.props;

const variant = variantProp;
const isCompact = variant === 'compact';
const showImage = isCompact ? false : showImageProp;
const cardClass = isCompact ? 'p-3.5 sm:p-4' : 'pb-4';

const targetSlug = slug || id;

const supportLevelLabels: Record<SupportLevel, string> = {
  official: 'Official EdgeTX Support',
  manufacturer: 'Manufacturer Maintained',
  community: 'Community Maintained',
};

const supportStatusLabels: Record<SupportStatus, string> = {
  supported: 'Active Support',
  limited: 'Limited Support',
  sunset: 'Support Ending',
  planned: 'Planned Support',
};

const supportLevelLabel = supportLevelLabels[support.level];
const supportStatusLabel = supportStatusLabels[support.status];
const supportBadges: SupportBadge[] = [];

if (supportLevelLabel) {
  supportBadges.push({ id: 'level', label: supportLevelLabel });
}

if (supportStatusLabel) {
  supportBadges.push({ id: 'status', label: supportStatusLabel });
}

const revisionCount = hardwareRevisions.length;
const complianceCount = compliance.length;

const trimmedRevisions = hardwareRevisions.slice(0, 4);
const remainingRevisions = Math.max(0, revisionCount - trimmedRevisions.length);

const trimmedCompliance = compliance.slice(0, 4);
const remainingCompliance = Math.max(0, complianceCount - trimmedCompliance.length);
const supportTimeline: TimelineEntry[] = [
  { id: 'since', label: 'Since', value: support.sinceVersion },
];

if (support.lastVersion) {
  supportTimeline.push({ id: 'last', label: 'Last', value: support.lastVersion });
}

const href = `${basePath}/transmitters/${targetSlug}`;
const shouldShowSupportBadges = supportBadges.length > 0;
const hasFallbackIcon = !image?.src;
const showBadgeFooter = !isCompact && !showImage && shouldShowSupportBadges;
---
<BaseCard
  href={href}
  title={title}
  subtitle={manufacturer}
  image={image}
  showImage={showImage}
  showHeader={!showImage}
  cardClass={cardClass}
  class={className}
>
  {showImage && (
    <Fragment slot="imageOverlay">
      <div class="pointer-events-none relative h-full w-full">
        <div class="absolute inset-0 bg-gradient-to-t from-black/60 via-black/30 to-transparent" aria-hidden="true" />
        <div class="relative flex h-full flex-col justify-between p-2">
          <div class="max-w-[70%] space-y-1">
            <h3 class="rounded-sm border bg-background/95 px-1.5 py-0.5 text-xs font-semibold leading-snug text-foreground shadow-sm transition-colors group-hover:text-primary">
              {title}
            </h3>
            {manufacturer && (
              <p class="inline-flex rounded-sm border bg-background/95 px-1.5 py-0.5 text-[11px] font-medium text-muted-foreground shadow-sm">
                {manufacturer}
              </p>
            )}
          </div>
          {shouldShowSupportBadges && (
            <div class="flex flex-wrap justify-end gap-1.5">
              {supportBadges.map((badge) => (
                <span
                  key={badge.id}
                  class="inline-flex items-center rounded-sm border bg-background/90 px-1.5 py-0.5 text-[10px] font-semibold uppercase tracking-wide text-foreground shadow-sm"
                >
                  {badge.label}
                </span>
              ))}
            </div>
          )}
        </div>
      </div>
    </Fragment>
  )}

  {showImage && hasFallbackIcon && (
    <Fragment slot="imageFallback">
      <div class="flex h-full w-full items-center justify-center text-muted-foreground/50">
        <svg
          xmlns="http://www.w3.org/2000/svg"
          viewBox="0 0 24 24"
          fill="none"
          stroke="currentColor"
          stroke-width="1.5"
          class="h-12 w-12"
        >
          <path
            stroke-linecap="round"
            stroke-linejoin="round"
            d="M4.5 8.25v7.5a2.25 2.25 0 0 0 2.25 2.25h10.5A2.25 2.25 0 0 0 19.5 15.75v-7.5A2.25 2.25 0 0 0 17.25 6H6.75A2.25 2.25 0 0 0 4.5 8.25Zm6.75 7.5a.75.75 0 1 1-1.5 0 .75.75 0 0 1 1.5 0Zm3 0a.75.75 0 1 1-1.5 0 .75.75 0 0 1 1.5 0ZM8.25 9.75h7.5m-3.75-3.75v-1.5"
          />
        </svg>
      </div>
    </Fragment>
  )}

  <Fragment slot="specs">
    {isCompact ? (
      <div class="space-y-2 text-[10px] leading-snug">
        <div class="flex flex-wrap items-start justify-between gap-2">
          {supportBadges.length > 0 && (
            <div class="flex flex-wrap gap-1.5">
              {supportBadges.map((badge) => (
                <span
                  key={badge.id}
                  class="inline-flex items-center rounded-sm border px-1.5 py-0.5 text-[9px] font-semibold uppercase tracking-wide"
                >
                  {badge.label}
                </span>
              ))}
            </div>
          )}
          {supportTimeline.length > 0 && (
            <dl class="flex flex-wrap justify-end gap-2 text-right text-[9px] uppercase tracking-wide text-muted-foreground">
              {supportTimeline.map((entry) => (
                <div key={entry.id} class="flex items-baseline gap-1">
                  <dt>{entry.label}</dt>
                  <dd class="text-sm font-semibold leading-none text-foreground">{entry.value}</dd>
                </div>
              ))}
            </dl>
          )}
        </div>

        {support.notes && (
          <p class="text-[10px] leading-snug text-muted-foreground">{support.notes}</p>
        )}

        <div class="flex flex-col gap-2">
          {revisionCount > 0 && (
            <div class="space-y-1">
              <span class="text-[9px] font-semibold uppercase tracking-wide text-muted-foreground">Hardware variants</span>
              <div class="flex flex-wrap gap-1.5">
                {trimmedRevisions.map((revision) => (
                  <span
                    key={revision.id}
                    class="inline-flex items-center rounded-sm border px-1.5 py-0.5 text-[9px] font-medium"
                  >
                    {revision.name}
                  </span>
                ))}
                {remainingRevisions > 0 && (
                  <span class="inline-flex items-center rounded-sm border bg-muted/40 px-1.5 py-0.5 text-[9px] font-semibold">
                    +{remainingRevisions} more
                  </span>
                )}
              </div>
            </div>
          )}

          {complianceCount > 0 && (
            <div class="space-y-1">
              <span class="text-[9px] font-semibold uppercase tracking-wide text-muted-foreground">Compliance IDs</span>
              <div class="flex flex-wrap gap-1.5">
                {trimmedCompliance.map((entry) => (
                  <span
                    key={entry.id}
                    class="inline-flex items-center rounded-sm border px-1.5 py-0.5 text-[9px] font-semibold text-primary"
                  >
                    {entry.id}
                  </span>
                ))}
                {remainingCompliance > 0 && (
                  <span class="inline-flex items-center rounded-sm border bg-muted/40 px-1.5 py-0.5 text-[9px] font-semibold">
                    +{remainingCompliance} more
                  </span>
                )}
              </div>
            </div>
          )}
        </div>
      </div>
    ) : (
      <div class="space-y-2.5 text-[10px] leading-snug">
        <div class="flex flex-wrap items-center justify-between gap-2">
          {supportBadges.length > 0 && (
            <div class="flex flex-wrap gap-1.5 text-[10px] uppercase tracking-wide text-muted-foreground">
              {supportBadges.map((badge) => (
                <span
                  key={badge.id}
                  class="inline-flex items-center rounded-sm border px-1.5 py-0.5 font-semibold"
                >
                  {badge.label}
                </span>
              ))}
            </div>
          )}
          {supportTimeline.length > 0 && (
            <dl class="flex flex-wrap justify-end gap-3 text-right text-[9px] uppercase tracking-wide text-muted-foreground">
              {supportTimeline.map((entry) => (
                <div key={entry.id} class="flex items-baseline gap-1">
                  <dt>{entry.label}</dt>
                  <dd class="text-base font-semibold leading-tight text-foreground">{entry.value}</dd>
                </div>
              ))}
            </dl>
          )}
        </div>

        {support.notes && (
          <p class="text-sm leading-snug text-muted-foreground">{support.notes}</p>
        )}

        {(revisionCount > 0 || complianceCount > 0) && (
          <div class="grid gap-2 sm:grid-cols-2">
            {revisionCount > 0 && (
              <div class="space-y-1.5 rounded-sm border px-2.5 py-2">
                <div class="flex items-center justify-between text-[9px] uppercase tracking-wide text-muted-foreground">
                  <span>Hardware variants</span>
                  <span class="font-semibold text-muted-foreground/80">{revisionCount}</span>
                </div>
                <div class="flex flex-wrap gap-1.5">
                  {trimmedRevisions.map((revision) => (
                    <span
                      key={revision.id}
                      class="inline-flex items-center rounded-sm border px-1.5 py-0.5 text-[10px] font-medium"
                    >
                      {revision.name}
                    </span>
                  ))}
                  {remainingRevisions > 0 && (
                    <span class="inline-flex items-center rounded-sm border bg-muted/40 px-1.5 py-0.5 text-[10px] font-semibold">
                      +{remainingRevisions} more
                    </span>
                  )}
                </div>
              </div>
            )}
            {complianceCount > 0 && (
              <div class="space-y-1.5 rounded-sm border px-2.5 py-2">
                <div class="flex items-center justify-between text-[9px] uppercase tracking-wide text-muted-foreground">
                  <span>Compliance IDs</span>
                  <span class="font-semibold text-muted-foreground/80">{complianceCount}</span>
                </div>
                <div class="flex flex-wrap gap-1.5">
                  {trimmedCompliance.map((entry) => (
                    <span
                      key={entry.id}
                      class="inline-flex items-center rounded-sm border px-1.5 py-0.5 text-[10px] font-semibold text-primary"
                    >
                      {entry.id}
                    </span>
                  ))}
                  {remainingCompliance > 0 && (
                    <span class="inline-flex items-center rounded-sm border bg-muted/40 px-1.5 py-0.5 text-[10px] font-semibold">
                      +{remainingCompliance} more
                    </span>
                  )}
                </div>
              </div>
            )}
          </div>
        )}
      </div>
    )}
  </Fragment>

  {showBadgeFooter && (
    <Fragment slot="badges">
      {supportBadges.map((badge) => (
        <span
          key={badge.id}
          class="inline-flex items-center rounded-sm border bg-muted/40 px-1.5 py-0.5 text-[10px] font-semibold uppercase tracking-wide"
        >
          {badge.label}
        </span>
      ))}
    </Fragment>
  )}
</BaseCard>
