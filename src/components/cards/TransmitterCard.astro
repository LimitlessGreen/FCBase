---
import type { ImageMetadata } from 'astro';
import { Picture } from 'astro:assets';

type SupportLevel = 'official' | 'manufacturer' | 'community';
type SupportStatus = 'supported' | 'limited' | 'sunset' | 'planned';

interface SupportMeta {
  level: SupportLevel;
  status: SupportStatus;
  sinceVersion: string;
  lastVersion?: string;
  notes?: string;
}

interface HardwareRevision {
  id: string;
  name: string;
}

interface ComplianceEntry {
  id: string;
  type?: string;
  url?: string | null;
}

interface ImageMeta {
  src: ImageMetadata | string;
  alt?: string;
  credit?: string;
  sourceUrl?: string;
  width?: number;
  height?: number;
}

interface Props {
  id: string;
  slug: string;
  title: string;
  manufacturer?: string;
  support: SupportMeta;
  hardwareRevisions?: HardwareRevision[];
  compliance?: ComplianceEntry[];
  image?: ImageMeta;
  basePath?: string;
  showImage?: boolean;
  class?: string;
}

const {
  id,
  slug,
  title,
  manufacturer,
  support,
  hardwareRevisions = [],
  compliance = [],
  image,
  basePath = '',
  showImage = true,
  class: className,
} = Astro.props;

const targetSlug = slug || id;

const supportLevelLabels: Record<SupportLevel, string> = {
  official: 'Official EdgeTX Support',
  manufacturer: 'Manufacturer Maintained',
  community: 'Community Maintained',
};

const supportStatusLabels: Record<SupportStatus, string> = {
  supported: 'Active Support',
  limited: 'Limited Support',
  sunset: 'Support Ending',
  planned: 'Planned Support',
};

const supportLevelLabel = supportLevelLabels[support.level];
const supportStatusLabel = supportStatusLabels[support.status];

const revisionCount = hardwareRevisions.length;
const complianceCount = compliance.length;

const trimmedRevisions = hardwareRevisions.slice(0, 4);
const remainingRevisions = Math.max(0, revisionCount - trimmedRevisions.length);

const trimmedCompliance = compliance.slice(0, 4);
const remainingCompliance = Math.max(0, complianceCount - trimmedCompliance.length);

const imageAlt = image?.alt ?? title;
const responsiveSizes = '(max-width: 1024px) 100vw, 360px';

const localImage = image?.src && typeof image.src !== 'string' ? (image.src as ImageMetadata) : null;

const remoteImage = image?.src && typeof image.src === 'string'
  ? {
      src: image.src,
      width: image.width ?? 640,
      height: image.height ?? 360,
    }
  : null;
---

<div class={`group relative ${className || ''}`}>
  <div
    class="relative h-full overflow-hidden rounded-xl border bg-card text-card-foreground shadow-sm transition-all group-hover:-translate-y-1 group-hover:shadow-lg group-focus-visible:-translate-y-1 group-focus-visible:shadow-lg group-hover:border-primary/30 group-focus-visible:border-primary/30"
  >
    {showImage && (
      <div class="relative aspect-video w-full overflow-hidden bg-gradient-to-br from-muted via-background to-muted">
        {image?.src ? (
          <>
            {localImage ? (
              <Picture
                src={localImage}
                widths={[320, 640, 960, 1280]}
                formats={["avif", "webp"]}
                sizes={responsiveSizes}
                alt={imageAlt}
                loading="lazy"
                decoding="async"
                pictureClass="block h-full w-full"
                imgClass="h-full w-full object-cover transition-transform duration-500 ease-out group-hover:scale-105"
              />
            ) : remoteImage ? (
              <img
                src={remoteImage.src}
                alt={imageAlt}
                loading="lazy"
                decoding="async"
                width={remoteImage.width}
                height={remoteImage.height}
                sizes={responsiveSizes}
                class="h-full w-full object-cover transition-transform duration-500 ease-out group-hover:scale-105"
              />
            ) : null}

            <div class="pointer-events-none absolute inset-0 flex flex-col justify-between p-2">
              <div class="max-w-[65%] space-y-1">
                <h3 class="rounded-sm border bg-background/95 px-2 py-1 text-sm font-bold leading-tight text-foreground shadow transition-colors group-hover:text-primary">
                  {title}
                </h3>
                {manufacturer && (
                  <p class="inline-flex rounded-sm border bg-background/95 px-2 py-0.5 text-xs font-medium text-muted-foreground shadow">
                    {manufacturer}
                  </p>
                )}
              </div>
              <div class="flex flex-wrap justify-end gap-1.5">
                <span class="inline-flex items-center rounded-sm border bg-background/90 px-2 py-0.5 text-[10px] font-semibold uppercase tracking-wide text-foreground shadow">
                  {supportLevelLabel}
                </span>
                <span class="inline-flex items-center rounded-sm border bg-background/90 px-2 py-0.5 text-[10px] font-semibold uppercase tracking-wide text-foreground shadow">
                  {supportStatusLabel}
                </span>
              </div>
            </div>

            {image?.credit && (
              <span class="absolute bottom-2 right-2 z-20 rounded border bg-background/85 px-2 py-0.5 text-[10px] font-medium uppercase tracking-wide text-muted-foreground shadow-sm">
                {image.sourceUrl ? (
                  <a
                    href={image.sourceUrl}
                    target="_blank"
                    rel="noopener noreferrer"
                    class="pointer-events-auto hover:underline"
                  >
                    {image.credit}
                  </a>
                ) : (
                  image.credit
                )}
              </span>
            )}
          </>
        ) : (
          <>
            <div class="absolute inset-0 flex items-center justify-center text-muted-foreground/50">
              <svg
                xmlns="http://www.w3.org/2000/svg"
                viewBox="0 0 24 24"
                fill="none"
                stroke="currentColor"
                stroke-width="1.5"
                class="h-12 w-12"
              >
                <path
                  stroke-linecap="round"
                  stroke-linejoin="round"
                  d="M4.5 8.25v7.5a2.25 2.25 0 0 0 2.25 2.25h10.5A2.25 2.25 0 0 0 19.5 15.75v-7.5A2.25 2.25 0 0 0 17.25 6H6.75A2.25 2.25 0 0 0 4.5 8.25Zm6.75 7.5a.75.75 0 1 1-1.5 0 .75.75 0 0 1 1.5 0Zm3 0a.75.75 0 1 1-1.5 0 .75.75 0 0 1 1.5 0ZM8.25 9.75h7.5m-3.75-3.75v-1.5"
                />
              </svg>
            </div>
            <div class="pointer-events-none absolute inset-0 flex flex-col justify-between p-2">
              <div class="max-w-[65%] space-y-1">
                <h3 class="rounded-sm border bg-background/95 px-2 py-1 text-sm font-bold leading-tight text-foreground shadow transition-colors group-hover:text-primary">
                  {title}
                </h3>
                {manufacturer && (
                  <p class="inline-flex rounded-sm border bg-background/95 px-2 py-0.5 text-xs font-medium text-muted-foreground shadow">
                    {manufacturer}
                  </p>
                )}
              </div>
              <div class="flex flex-wrap justify-end gap-1.5">
                <span class="inline-flex items-center rounded-sm border bg-background/90 px-2 py-0.5 text-[10px] font-semibold uppercase tracking-wide text-foreground shadow">
                  {supportLevelLabel}
                </span>
                <span class="inline-flex items-center rounded-sm border bg-background/90 px-2 py-0.5 text-[10px] font-semibold uppercase tracking-wide text-foreground shadow">
                  {supportStatusLabel}
                </span>
              </div>
            </div>
          </>
        )}
      </div>
    )}

    <div class="space-y-3 p-3 pt-4">
      <div class="flex items-center justify-between gap-3 text-[11px] border-t pt-2">
        <div class="flex flex-wrap gap-3">
          <div class="min-w-[72px]">
            <div class="text-sm font-bold leading-tight">{support.sinceVersion}</div>
            <div class="text-[9px] uppercase tracking-wide text-muted-foreground">Since</div>
          </div>
          {support.lastVersion && (
            <div class="min-w-[72px]">
              <div class="text-sm font-bold leading-tight">{support.lastVersion}</div>
              <div class="text-[9px] uppercase tracking-wide text-muted-foreground">Last</div>
            </div>
          )}
        </div>
        <div class="flex flex-wrap gap-3">
          {revisionCount > 0 && (
            <div class="text-center">
              <div class="text-sm font-bold leading-tight">{revisionCount}</div>
              <div class="text-[9px] uppercase tracking-wide text-muted-foreground">Revisions</div>
            </div>
          )}
          {complianceCount > 0 && (
            <div class="text-center">
              <div class="text-sm font-bold leading-tight">{complianceCount}</div>
              <div class="text-[9px] uppercase tracking-wide text-muted-foreground">Compliance</div>
            </div>
          )}
        </div>
      </div>

      {support.notes && (
        <p class="text-xs leading-snug text-muted-foreground">{support.notes}</p>
      )}

      {revisionCount > 0 && (
        <div class="space-y-1 border-t pt-2">
          <span class="text-[10px] font-semibold uppercase tracking-wide text-muted-foreground">Hardware variants</span>
          <div class="flex flex-wrap gap-1.5">
            {trimmedRevisions.map((revision) => (
              <span
                class="inline-flex items-center rounded-sm border px-1.5 py-0.5 text-[10px] font-medium"
              >
                {revision.name}
              </span>
            ))}
            {remainingRevisions > 0 && (
              <span class="inline-flex items-center rounded-sm border bg-muted/40 px-1.5 py-0.5 text-[10px] font-semibold">
                +{remainingRevisions} more
              </span>
            )}
          </div>
        </div>
      )}

      {complianceCount > 0 && (
        <div class="space-y-1 border-t pt-2">
          <span class="text-[10px] font-semibold uppercase tracking-wide text-muted-foreground">Compliance IDs</span>
          <div class="flex flex-wrap gap-1.5">
            {trimmedCompliance.map((entry) => (
              <span
                class="inline-flex items-center rounded-sm border px-1.5 py-0.5 text-[10px] font-semibold text-primary"
              >
                {entry.id}
              </span>
            ))}
            {remainingCompliance > 0 && (
              <span class="inline-flex items-center rounded-sm border bg-muted/40 px-1.5 py-0.5 text-[10px] font-semibold">
                +{remainingCompliance} more
              </span>
            )}
          </div>
        </div>
      )}
    </div>
  </div>
  <a
    href={`${basePath}/transmitters/${targetSlug}`}
    class="absolute inset-0 z-10 rounded-xl focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-primary"
    aria-label={`View ${title}`}
  >
    <span class="sr-only">View {title}</span>
  </a>
</div>
