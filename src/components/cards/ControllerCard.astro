---
/**
 * ControllerCard - Reusable card component for displaying flight controllers
 * 
 * Features:
 * - Banner with title + subtitle (manufacturer)
 * - Compact badge layout (MCU + Mounting)
 * - Port summary (10U • 2C • 16PWM)
 * - Feature checkmarks (✓ SD, ✓ Baro)
 * - Firmware badges
 * 
 * @usage
 * <ControllerCard
 *   id="holybro-pixhawk-6x"
 *   title="Pixhawk 6X"
 *   manufacturer="Holybro"
 *   mcu="STM32H753"
 *   mounting="30.5x30.5"
 *   uarts={10}
 *   can={2}
 *   pwm={16}
 *   sdCard={true}
 *   barometer={true}
 *   firmwares={['ardupilot', 'px4']}
 *   image={{ src: '...', credit: 'Holybro', sourceUrl: '...' }}
 *   basePath="/fcbase"
 * />
 */

import { Card, CardContent } from '@/components/ui/Card';
import { Badge } from '@/components/ui/Badge';
import { getImage } from 'astro:assets';
import type { ImageMetadata } from 'astro';

interface Props {
  // Required
  id: string;
  title: string;
  manufacturer?: string;
  mcu: string;
  
  // Hardware specs
  mounting?: string;
  uarts?: number;
  can?: number;
  pwm?: number;
  sdCard?: boolean;
  barometer?: boolean;
  
  // Firmware support
  firmwares?: string[];
  
  // Image (supports both local imports and remote URLs)
  image?: {
    src: ImageMetadata | string; // Local import or remote URL
    alt?: string;
    credit?: string;
    sourceUrl?: string;
    width?: number;
    height?: number;
  };
  
  // Navigation
  basePath?: string;
  
  // Styling
  showImage?: boolean;
  class?: string;
}

const {
  id,
  title,
  manufacturer,
  mcu,
  mounting,
  uarts,
  can,
  pwm,
  sdCard,
  barometer,
  firmwares = [],
  image,
  basePath = '',
  showImage = true,
  class: className,
} = Astro.props;

// Format MCU name (remove vendor prefix, uppercase)
const mcuDisplay = mcu.toUpperCase().replace(/^(STMICRO-|ATMEGA-)/, '');

// Format mounting (20x20 → 20×20mm, 30.5x30.5 → 30×30mm, cube → Cube, wing → Wing, custom → Custom)
const mountingDisplay = mounting
  ? mounting === 'cube' || mounting === 'wing' || mounting === 'custom'
    ? mounting.charAt(0).toUpperCase() + mounting.slice(1)
    : mounting.replace('x', '×') + 'mm'
  : undefined;

// Build port summary (like "10 UARTs • 2 CAN • 16 PWM")
const portSummary = [
  uarts ? `${uarts} UART${uarts > 1 ? 's' : ''}` : null,
  can ? `${can} CAN` : null,
  pwm ? `${pwm} PWM` : null,
]
  .filter(Boolean)
  .join(' • ');

const imageAlt = image?.alt ?? title;

const buildResponsivePicture = async (imageMeta: ImageMetadata, sizes: string) => {
  const widths = [320, 640, 960, 1280];
  const formats: Array<'avif' | 'webp'> = ['avif', 'webp'];
  const sources = await Promise.all(
    formats.map(async (format) => {
      const result = await getImage({ src: imageMeta, format, widths, sizes });
      const srcset = result.srcSet.attribute || result.src;
      return { type: `image/${format}`, srcset };
    })
  );

  const fallbackFormat = imageMeta.format === 'png' ? 'png' : 'jpeg';
  const fallback = await getImage({ src: imageMeta, format: fallbackFormat, widths, sizes });
  const fallbackWidth = Number(fallback.attributes.width ?? fallback.options.width ?? imageMeta.width);
  const fallbackHeight = Number(fallback.attributes.height ?? fallback.options.height ?? imageMeta.height);

  return {
    sources,
    img: {
      src: fallback.src,
      srcset: fallback.srcSet.attribute || undefined,
      width: fallbackWidth,
      height: fallbackHeight,
    },
  };
};

const localPicture = image?.src && typeof image.src !== 'string'
  ? await buildResponsivePicture(image.src, '(max-width: 1024px) 100vw, 360px')
  : null;

const remoteImage = image?.src && typeof image.src === 'string'
  ? {
      src: image.src,
      width: image.width ?? 640,
      height: image.height ?? 360,
    }
  : null;
---

<a href={`${basePath}/controllers/${id}`} class={`group block ${className || ''}`}>
  <Card class="h-full transition-all hover:shadow-lg hover:-translate-y-1 overflow-hidden">
    {/* Image Banner with Overlays */}
    {showImage && (
      <div class="relative aspect-video w-full overflow-hidden bg-gradient-to-br from-muted via-background to-muted">
        {image?.src ? (
          <>
            {localPicture ? (
              <picture class="block h-full w-full">
                {localPicture.sources.map((source) => (
                  <source srcset={source.srcset} type={source.type} sizes="(max-width: 1024px) 100vw, 360px" />
                ))}
                <img
                  src={localPicture.img.src}
                  alt={imageAlt}
                  loading="lazy"
                  decoding="async"
                  width={localPicture.img.width}
                  height={localPicture.img.height}
                  srcset={localPicture.img.srcset}
                  sizes="(max-width: 1024px) 100vw, 360px"
                  class="h-full w-full object-cover transition-transform duration-500 ease-out group-hover:scale-105"
                />
              </picture>
            ) : remoteImage ? (
              <img
                src={remoteImage.src}
                alt={imageAlt}
                loading="lazy"
                decoding="async"
                width={remoteImage.width}
                height={remoteImage.height}
                sizes="(max-width: 1024px) 100vw, 360px"
                class="h-full w-full object-cover transition-transform duration-500 ease-out group-hover:scale-105"
              />
            ) : (
              <div class="flex h-full w-full items-center justify-center bg-muted/30 text-xs font-medium text-muted-foreground">
                {imageAlt}
              </div>
            )}
            {/* Title & Manufacturer Overlay (top-left) */}
            <div class="absolute top-2 left-2 max-w-[60%]">
              <h3 class="font-bold text-sm leading-tight line-clamp-2 text-foreground bg-background/90 backdrop-blur-sm px-2 py-1 rounded-sm shadow-sm group-hover:text-primary transition-colors">
                {title}
              </h3>
              {manufacturer && (
                <p class="text-xs text-muted-foreground bg-background/90 backdrop-blur-sm px-2 py-0.5 rounded-sm shadow-sm mt-1 inline-block">
                  {manufacturer}
                </p>
              )}
            </div>
            {/* Firmware Badges Overlay (top-right) */}
            {firmwares.length > 0 && (
              <div class="absolute top-2 right-2 flex flex-wrap gap-1.5 justify-end">
                {firmwares.map((firmware) => (
                  <span
                    key={firmware}
                    class="inline-flex items-center rounded-sm border bg-background/90 backdrop-blur-sm px-2 py-0.5 text-[10px] font-bold uppercase tracking-wider shadow-sm"
                  >
                    {firmware.toUpperCase()}
                  </span>
                ))}
              </div>
            )}
            {image.credit && (
              <span class="absolute bottom-2 right-2 rounded bg-background/80 px-2 py-0.5 text-[10px] font-medium uppercase tracking-wide text-muted-foreground">
                {image.sourceUrl ? (
                  <a
                    href={image.sourceUrl}
                    target="_blank"
                    rel="noopener noreferrer"
                    class="hover:underline"
                    onclick="event.stopPropagation()"
                  >
                    {image.credit}
                  </a>
                ) : (
                  image.credit
                )}
              </span>
            )}
          </>
        ) : (
          <>
            {/* Title & Manufacturer Overlay for placeholder (same as with image) */}
            <div class="absolute top-2 left-2 max-w-[60%]">
              <h3 class="font-bold text-sm leading-tight line-clamp-2 text-foreground bg-background/90 backdrop-blur-sm px-2 py-1 rounded-sm shadow-sm group-hover:text-primary transition-colors">
                {title}
              </h3>
              {manufacturer && (
                <p class="text-xs text-muted-foreground bg-background/90 backdrop-blur-sm px-2 py-0.5 rounded-sm shadow-sm mt-1 inline-block">
                  {manufacturer}
                </p>
              )}
            </div>
            {/* Firmware Badges for placeholder */}
            {firmwares.length > 0 && (
              <div class="absolute top-2 right-2 flex flex-wrap gap-1.5 justify-end">
                {firmwares.map((firmware) => (
                  <span
                    key={firmware}
                    class="inline-flex items-center rounded-sm border bg-background/90 backdrop-blur-sm px-2 py-0.5 text-[10px] font-bold uppercase tracking-wider shadow-sm"
                  >
                    {firmware.toUpperCase()}
                  </span>
                ))}
              </div>
            )}
          </>
        )}
      </div>
    )}

    {/* Ultra-Compact Grid Layout */}
    <CardContent class="p-3 pt-4">
      {/* Single Row: MCU + Mounting */}
      <div class="flex gap-1.5 mb-2">
        <span class="inline-flex items-center rounded-sm border px-1.5 py-0.5 text-[10px] font-mono font-bold">
          {mcuDisplay}
        </span>
        {mounting && (
          <span class="inline-flex items-center rounded-sm border px-1.5 py-0.5 text-[10px] font-semibold">
            {mountingDisplay}
          </span>
        )}
      </div>

        {/* Ultra-Compact Stats Grid */}
        <div class="flex items-center justify-between text-[11px] border-t pt-2">
          <div class="flex gap-3">
            {uarts !== undefined && (
              <div class="text-center">
                <div class="font-bold">{uarts}</div>
                <div class="text-muted-foreground text-[9px]">UART</div>
              </div>
            )}
            {can !== undefined && can > 0 && (
              <div class="text-center">
                <div class="font-bold">{can}</div>
                <div class="text-muted-foreground text-[9px]">CAN</div>
              </div>
            )}
            {pwm !== undefined && (
              <div class="text-center">
                <div class="font-bold">{pwm}</div>
                <div class="text-muted-foreground text-[9px]">PWM</div>
              </div>
            )}
          </div>
          <div class="flex gap-2 text-[11px] text-muted-foreground">
            {sdCard && <span>✓ SD</span>}
        {barometer && <span>✓ Baro</span>}
      </div>
    </div>
    </CardContent>
  </Card>
</a>