---
import type { ImageMetadata } from 'astro';
import BaseCard from './BaseCard.astro';

interface Props {
  id: string;
  title: string;
  manufacturer?: string;
  mcu: string;
  mounting?: string;
  uarts?: number;
  can?: number;
  pwm?: number;
  sdCard?: boolean;
  barometer?: boolean;
  firmwares?: string[];
  image?: {
    src: ImageMetadata | string;
    alt?: string;
    credit?: string;
    sourceUrl?: string;
    width?: number;
    height?: number;
  };
  basePath?: string;
  showImage?: boolean;
  class?: string;
}

const {
  id,
  title,
  manufacturer,
  mcu,
  mounting,
  uarts,
  can,
  pwm,
  sdCard,
  barometer,
  firmwares = [],
  image,
  basePath = '',
  showImage = true,
  class: className,
} = Astro.props;

const mcuDisplay = mcu ? mcu.toUpperCase().replace(/^(STMICRO-|ATMEGA-)/, '') : 'UNKNOWN';
const mountingDisplay = mounting
  ? mounting === 'cube' || mounting === 'wing' || mounting === 'custom'
    ? mounting.charAt(0).toUpperCase() + mounting.slice(1)
    : mounting.replace('x', '×') + 'mm'
  : undefined;

const firmwareBadges = firmwares.map((firmware) => firmware.toUpperCase());
const href = `${basePath}/controllers/${id}`;
---
<BaseCard
  href={href}
  title={title}
  subtitle={manufacturer}
  image={image}
  showImage={showImage}
  class={className}
>
  {showImage && (
    <Fragment slot="imageOverlay">
      <div class="relative h-full w-full pointer-events-none">
        <div class="absolute inset-0 bg-gradient-to-t from-black/45 via-black/20 to-transparent" aria-hidden="true" />
        {firmwareBadges.length > 0 && (
          <div class="absolute inset-x-2 top-2 flex flex-wrap justify-end gap-1.5">
            {firmwareBadges.map((label) => (
              <span class="inline-flex items-center rounded-sm border bg-background/95 px-2 py-0.5 text-[10px] font-bold uppercase tracking-wider shadow">
                {label}
              </span>
            ))}
          </div>
        )}
      </div>
    </Fragment>
  )}

  <Fragment slot="specs">
    <div class="flex gap-1.5">
      <span class="inline-flex items-center rounded-sm border px-1.5 py-0.5 text-[10px] font-mono font-bold">
        {mcuDisplay}
      </span>
      {mountingDisplay && (
        <span class="inline-flex items-center rounded-sm border px-1.5 py-0.5 text-[10px] font-semibold">
          {mountingDisplay}
        </span>
      )}
    </div>
    <div class="flex items-center justify-between border-t pt-2 text-[11px]">
      <div class="flex gap-3">
        {uarts !== undefined && (
          <div class="text-center">
            <div class="font-bold">{uarts}</div>
            <div class="text-[9px] text-muted-foreground">UART</div>
          </div>
        )}
        {can !== undefined && can > 0 && (
          <div class="text-center">
            <div class="font-bold">{can}</div>
            <div class="text-[9px] text-muted-foreground">CAN</div>
          </div>
        )}
        {pwm !== undefined && (
          <div class="text-center">
            <div class="font-bold">{pwm}</div>
            <div class="text-[9px] text-muted-foreground">PWM</div>
          </div>
        )}
      </div>
      <div class="flex gap-2 text-[11px] text-muted-foreground">
        {sdCard && <span>✓ SD</span>}
        {barometer && <span>✓ Baro</span>}
      </div>
    </div>
  </Fragment>

  {!showImage && firmwareBadges.length > 0 && (
    <Fragment slot="badges">
      {firmwareBadges.map((label) => (
        <span class="inline-flex items-center rounded-sm border px-2 py-0.5 text-[10px] font-bold uppercase tracking-wider">
          {label}
        </span>
      ))}
    </Fragment>
  )}
</BaseCard>
