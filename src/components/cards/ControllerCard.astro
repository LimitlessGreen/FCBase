---
import type { ImageMetadata } from 'astro';
import { getCompareComponentDefinition } from '@/lib/component-registry';
import {
  COMPARE_EVENT_NAME,
  type CompareType,
  getCompareLegacyStorageKeys,
  getCompareStorageKey,
} from '@/lib/compare';
import { compareToggleInlineScript } from './compare-toggle-inline-script';
import BaseCard from './BaseCard.astro';

interface Props {
  id: string;
  title: string;
  manufacturer?: string;
  mcu: string;
  mounting?: string;
  uarts?: number;
  can?: number;
  pwm?: number;
  sdCard?: boolean;
  barometer?: boolean;
  ethernet?: boolean;
  firmwares?: string[];
  image?: {
    src: ImageMetadata | string;
    alt?: string;
    credit?: string;
    sourceUrl?: string;
    width?: number;
    height?: number;
  };
  basePath?: string;
  showImage?: boolean;
  variant: 'grid' | 'list';
  class?: string;
  compareId?: string;
  compareType?: CompareType;
  enableCompareToggle?: boolean;
}

const {
  id,
  title,
  manufacturer,
  mcu,
  mounting,
  uarts,
  can,
  pwm,
  sdCard,
  barometer,
  firmwares = [],
  ethernet,
  image,
  basePath = '',
  variant: variantProp = 'grid',
  showImage: showImageProp = true,
  class: className,
  compareId: compareIdProp,
  compareType: compareTypeProp,
  enableCompareToggle = false,
} = Astro.props;

const componentDefinition = getCompareComponentDefinition('controller');
const defaultCompareType = componentDefinition.id;
const variant = variantProp;
const isList = variant === 'list';
const showImage = isList ? false : showImageProp;
const cardClass = isList ? undefined : 'pb-2';
const compareId = compareIdProp ?? id;
const compareType = compareTypeProp ?? defaultCompareType;
const shouldRenderCompare = enableCompareToggle && Boolean(compareId);
const compareToggleId = shouldRenderCompare
  ? `compare-${compareType}-${compareId}`
  : undefined;
const compareAriaLabel = `Add ${componentDefinition.label.toLowerCase()} to comparison`;

const mcuDisplay = mcu ? mcu.toUpperCase().replace(/^(STMICRO-|ATMEGA-)/, '') : 'UNKNOWN';
const mountingDisplay = mounting
  ? mounting === 'cube' || mounting === 'wing' || mounting === 'custom'
    ? mounting.charAt(0).toUpperCase() + mounting.slice(1)
    : mounting.replace('x', '×') + 'mm'
  : undefined;

const firmwareBadges = firmwares.map((firmware) => firmware.toUpperCase());
const href = `${basePath}/controllers/${id}`;
const ioMetrics = [
  { label: 'UART', value: uarts },
  { label: 'CAN', value: can && can > 0 ? can : undefined },
  { label: 'PWM', value: pwm },
].filter((metric) => metric.value !== undefined);
const featureFlags = [
  sdCard ? 'SD' : null,
  barometer ? 'Baro' : null,
  ethernet ? 'Ethernet' : null,
].filter(Boolean);

const compareStorageKey = getCompareStorageKey(compareType);
const compareLegacyKeysLiteral = JSON.stringify(getCompareLegacyStorageKeys(compareType));
const compareToggleScript = compareToggleInlineScript;
---
{isList ? (
  <article
    class={`group relative overflow-hidden rounded-lg border bg-background/90 shadow-xs transition hover:border-primary/40 focus-within:border-primary/50 ${
      className ?? ''
    }`.trim()}
    data-compare-container={shouldRenderCompare ? compareId : undefined}
    role="listitem"
  >
    <div class="grid gap-4 px-4 py-4 sm:grid-cols-[minmax(0,2fr)_minmax(0,1.15fr)_minmax(0,0.9fr)_auto] sm:items-center sm:px-5">
      <div class="flex flex-col gap-3">
        <div class="space-y-1">
          <a
            href={href}
            class="inline-flex text-base font-semibold leading-snug text-foreground transition-colors hover:text-primary focus-visible:outline-hidden focus-visible:ring-2 focus-visible:ring-primary/40"
          >
            {title}
          </a>
          {manufacturer && (
            <p class="text-sm text-muted-foreground">{manufacturer}</p>
          )}
        </div>

        {firmwareBadges.length > 0 && (
          <div class="flex flex-wrap gap-1.5">
            {firmwareBadges.map((label) => (
              <span
                key={label}
                class="inline-flex items-center rounded-sm border px-1.5 py-0.5 text-[11px] font-semibold uppercase tracking-wide"
              >
                {label}
              </span>
            ))}
          </div>
        )}

        <div class="flex flex-wrap gap-3 text-xs font-medium uppercase tracking-wide text-muted-foreground/80">
          <span class="inline-flex items-center gap-1 rounded-sm border px-1.5 py-0.5 font-mono text-[11px]">
            {mcuDisplay}
          </span>
          {mountingDisplay && (
            <span class="inline-flex items-center gap-1 rounded-sm border px-1.5 py-0.5 text-[11px]">
              {mountingDisplay}
            </span>
          )}
        </div>
      </div>

      <div class="space-y-2 text-sm">
        <div class="rounded-md border bg-muted/30 p-3">
          <div class="flex items-center justify-between text-xs uppercase tracking-wide text-muted-foreground/80">
            <span>Processor</span>
            <span class="font-semibold text-foreground">{mcuDisplay}</span>
          </div>
          {mountingDisplay && (
            <div class="mt-2 flex items-center justify-between text-xs uppercase tracking-wide text-muted-foreground/80">
              <span>Mounting</span>
              <span class="font-semibold text-foreground">{mountingDisplay}</span>
            </div>
          )}
        </div>
      </div>

      <div class="space-y-2">
        {ioMetrics.length > 0 ? (
          <dl class="grid gap-2 sm:grid-cols-3">
            {ioMetrics.map((metric) => (
              <div key={metric.label} class="rounded-md border px-2 py-1.5 text-center">
                <dd class="text-base font-semibold leading-tight text-foreground">{metric.value}</dd>
                <dt class="text-[11px] uppercase tracking-wide text-muted-foreground">{metric.label}</dt>
              </div>
            ))}
          </dl>
        ) : (
          <p class="text-sm text-muted-foreground">No IO metrics published.</p>
        )}
      </div>

      <div class="flex flex-col items-start gap-3 sm:items-end">
        {featureFlags.length > 0 && (
          <ul class="flex flex-wrap gap-1.5 text-xs uppercase tracking-wide text-muted-foreground">
            {featureFlags.map((flag) => (
              <li
                key={flag}
                class="inline-flex items-center gap-1 rounded-full bg-muted/40 px-2 py-0.5 font-semibold text-muted-foreground"
              >
                <span aria-hidden="true" class="text-[10px] text-primary">●</span>
                {flag}
              </li>
            ))}
          </ul>
        )}

        <a
          href={href}
          class="inline-flex items-center gap-2 text-sm font-semibold text-primary transition-colors hover:text-primary/80"
        >
          View details
          <span aria-hidden="true">→</span>
        </a>

        {shouldRenderCompare && compareToggleId && (
          <div class="compare-toggle flex items-center gap-1 rounded-full border px-2 py-1 text-xs text-muted-foreground" data-compare-toggle-wrapper>
            <input
              id={compareToggleId}
              type="checkbox"
              class="h-3.5 w-3.5 rounded-sm border text-primary focus-visible:outline-hidden focus-visible:ring-2 focus-visible:ring-primary/40"
              data-compare-toggle={compareId}
              data-compare-type={compareType}
              aria-label={compareAriaLabel}
            />
            <label for={compareToggleId} class="font-semibold uppercase tracking-wide">
              Compare
            </label>
          </div>
        )}
      </div>
    </div>

    {shouldRenderCompare && (
      <script
        is:inline
        data-compare-id={compareId}
        data-compare-type={compareType}
        data-compare-storage-key={compareStorageKey}
        data-compare-event-name={COMPARE_EVENT_NAME}
        data-compare-legacy-keys={compareLegacyKeysLiteral}
        set:html={compareToggleScript}
      />
    )}
  </article>
) : (
  <div class="relative" data-compare-container={shouldRenderCompare ? compareId : undefined}>
    <BaseCard
      href={href}
      title={title}
      subtitle={manufacturer}
      image={image}
      showImage={showImage}
      showHeader={!showImage}
      cardClass={cardClass}
      class={`compare-card ${className ?? ''}`.trim()}
    >
    {showImage && (
      <Fragment slot="imageOverlay">
        <div class="pointer-events-none relative h-full w-full">
          <div class="absolute inset-0 bg-gradient-to-t from-black/60 via-black/30 to-transparent" aria-hidden="true" />
          <div class="absolute top-2 left-2 max-w-[70%] space-y-1">
            <h3 class="rounded-sm border bg-background/95 px-1.5 py-0.5 text-xs font-semibold leading-snug text-foreground shadow-sm transition-colors group-hover:text-primary">
              {title}
            </h3>
            {manufacturer && (
              <p class="inline-flex rounded-sm border bg-background/95 px-1.5 py-0.5 text-[11px] font-medium text-muted-foreground shadow-sm">
                {manufacturer}
              </p>
            )}
          </div>
          {firmwareBadges.length > 0 && (
            <div class="absolute bottom-2 left-2 flex flex-wrap gap-1.5">
              {firmwareBadges.map((label) => (
                <span class="inline-flex items-center rounded-sm border bg-background/95 px-1.5 py-0.5 text-[10px] font-semibold uppercase tracking-wide shadow-sm">
                  {label}
                </span>
              ))}
            </div>
          )}
        </div>
      </Fragment>
    )}

    <Fragment slot="specs">
      <div class={`space-y-1 text-[10px] leading-snug ${showImage ? 'mt-2.5' : ''}`}>
        <div class="flex flex-wrap items-center gap-1 text-[9px] font-semibold uppercase tracking-wide text-muted-foreground">
          <span class="inline-flex items-center rounded-sm border px-1 py-0.5 font-mono">
            {mcuDisplay}
          </span>
          {mountingDisplay && (
            <span class="inline-flex items-center rounded-sm border px-1 py-0.5">
              {mountingDisplay}
            </span>
          )}
        </div>

        <div class="h-px w-full bg-border/70" />

        <div class="flex flex-wrap items-start justify-between gap-1">
          {ioMetrics.length > 0 && (
            <dl class="flex flex-wrap gap-1">
              {ioMetrics.map((metric) => (
                <div key={metric.label} class="min-w-[40px] text-left">
                  <dd class="text-sm font-semibold leading-tight text-foreground text-center">{metric.value}</dd>
                  <dt class="text-[8px] uppercase tracking-wide text-muted-foreground text-left">{metric.label}</dt>
                </div>
              ))}
            </dl>
          )}

          {featureFlags.length > 0 && (
            <div class="flex flex-wrap justify-end gap-0.5">
              {featureFlags.map((flag) => (
                <span
                  key={flag}
                  class="inline-flex items-center gap-0.5 text-[8px] font-medium uppercase tracking-wide text-muted-foreground"
                >
                  <span aria-hidden="true" class="text-[10px] leading-none text-muted-foreground">🗸</span>
                  {flag}
                </span>
              ))}
            </div>
          )}
        </div>
      </div>
    </Fragment>

    {!showImage && firmwareBadges.length > 0 && (
      <Fragment slot="badges">
        {firmwareBadges.map((label) => (
          <span
            key={label}
            class="inline-flex items-center rounded-sm border px-1.5 py-0.5 text-[10px] font-semibold uppercase tracking-wide"
          >
            {label}
          </span>
        ))}
      </Fragment>
    )}
    </BaseCard>

    {shouldRenderCompare && compareToggleId && (
      <div
        class="compare-toggle absolute right-2 top-2 z-20 flex items-center gap-1 rounded-full border bg-background/90 px-2 py-1 text-[9px] font-semibold uppercase tracking-wide text-muted-foreground shadow-xs backdrop-blur supports-[backdrop-filter]:backdrop-blur-sm"
        data-compare-toggle-wrapper
      >
        <input
          id={compareToggleId}
          type="checkbox"
          class="h-3.5 w-3.5 rounded-sm border text-primary focus-visible:outline-hidden focus-visible:ring-2 focus-visible:ring-primary/40"
          data-compare-toggle={compareId}
          data-compare-type={compareType}
          aria-label={compareAriaLabel}
        />
        <label for={compareToggleId}>Compare</label>
      </div>
    )}

    {shouldRenderCompare && (
      <script
        is:inline
        data-compare-id={compareId}
        data-compare-type={compareType}
        data-compare-storage-key={compareStorageKey}
        data-compare-event-name={COMPARE_EVENT_NAME}
        data-compare-legacy-keys={compareLegacyKeysLiteral}
        set:html={compareToggleScript}
      />
    )}
  </div>
)}
