---
import type { ImageMetadata } from 'astro';
import BaseCard from './BaseCard.astro';

interface Props {
  id: string;
  title: string;
  manufacturer?: string;
  mcu: string;
  mounting?: string;
  uarts?: number;
  can?: number;
  pwm?: number;
  sdCard?: boolean;
  barometer?: boolean;
  firmwares?: string[];
  image?: {
    src: ImageMetadata | string;
    alt?: string;
    credit?: string;
    sourceUrl?: string;
    width?: number;
    height?: number;
  };
  basePath?: string;
  showImage?: boolean;
  variant: 'grid' | 'compact';
  class?: string;
}

const {
  id,
  title,
  manufacturer,
  mcu,
  mounting,
  uarts,
  can,
  pwm,
  sdCard,
  barometer,
  firmwares = [],
  image,
  basePath = '',
  variant: variantProp = 'grid',
  showImage: showImageProp = true,
  class: className,
} = Astro.props;

const variant = variantProp;
const isCompact = variant === 'compact';
const showImage = isCompact ? false : showImageProp;
const cardClass = isCompact ? 'p-3.5 sm:p-4' : 'pb-4';

const mcuDisplay = mcu ? mcu.toUpperCase().replace(/^(STMICRO-|ATMEGA-)/, '') : 'UNKNOWN';
const mountingDisplay = mounting
  ? mounting === 'cube' || mounting === 'wing' || mounting === 'custom'
    ? mounting.charAt(0).toUpperCase() + mounting.slice(1)
    : mounting.replace('x', 'Ã—') + 'mm'
  : undefined;

const firmwareBadges = firmwares.map((firmware) => firmware.toUpperCase());
const [primaryFirmwareBadge, ...secondaryFirmwareBadges] = firmwareBadges;
const href = `${basePath}/controllers/${id}`;
const ioMetrics = [
  { label: 'UART', value: uarts },
  { label: 'CAN', value: can && can > 0 ? can : undefined },
  { label: 'PWM', value: pwm },
].filter((metric) => metric.value !== undefined);
const featureFlags = [sdCard ? 'SD' : null, barometer ? 'Baro' : null].filter(Boolean);
---
<BaseCard
  href={href}
  title={title}
  subtitle={manufacturer}
  image={image}
  showImage={showImage}
  showHeader={!showImage}
  cardClass={cardClass}
  class={className}
>
  {showImage && (
    <Fragment slot="imageOverlay">
      <div class="pointer-events-none relative flex h-full w-full flex-col">
        <div class="absolute inset-0 bg-gradient-to-b from-black/70 via-black/30 to-black/60" aria-hidden="true" />
        <div class="relative z-10 flex h-full flex-col justify-between p-3 sm:p-4">
          <div class="flex items-start justify-between gap-3">
            <div class="space-y-1.5 text-left">
              {manufacturer && (
                <span class="inline-flex items-center rounded-full border border-white/30 bg-white/10 px-2 py-0.5 text-[11px] font-semibold uppercase tracking-wide text-white shadow-sm">
                  {manufacturer}
                </span>
              )}
              <h3 class="text-base font-semibold leading-tight text-white drop-shadow sm:text-lg">
                {title}
              </h3>
            </div>
            {primaryFirmwareBadge && (
              <span class="inline-flex items-center rounded-full border border-white/30 bg-white/15 px-2.5 py-0.5 text-[10px] font-semibold uppercase tracking-wide text-white shadow-sm">
                {primaryFirmwareBadge}
              </span>
            )}
          </div>
          {secondaryFirmwareBadges.length > 0 && (
            <div class="flex flex-wrap items-center justify-end gap-1.5">
              {secondaryFirmwareBadges.map((label, index) => (
                <span
                  key={`${label}-${index}`}
                  class="inline-flex items-center rounded-full border border-white/25 bg-white/10 px-2 py-0.5 text-[10px] font-semibold uppercase tracking-wide text-white/90 shadow-sm"
                >
                  {label}
                </span>
              ))}
            </div>
          )}
        </div>
      </div>
    </Fragment>
  )}

  <Fragment slot="specs">
    {isCompact ? (
      <div class="space-y-2.5 text-[10px] leading-snug">
        <div class="flex flex-wrap items-center justify-between gap-2">
          <div class="flex flex-wrap items-center gap-1.5">
            <span class="inline-flex items-center rounded-full border px-2 py-0.5 font-mono text-[10px] font-semibold uppercase tracking-wide text-foreground">
              {mcuDisplay}
            </span>
            {mountingDisplay && (
              <span class="inline-flex items-center rounded-full border px-2 py-0.5 text-[10px] font-semibold uppercase tracking-wide">
                {mountingDisplay}
              </span>
            )}
          </div>
          {featureFlags.length > 0 && (
            <div class="flex flex-wrap items-center gap-1 text-[10px] font-semibold uppercase tracking-wide text-muted-foreground">
              {featureFlags.map((flag, index) => (
                <span key={`${flag}-${index}`} class="inline-flex items-center gap-1">
                  {index > 0 && <span aria-hidden="true" class="opacity-60">/</span>}
                  <span class="text-foreground">{flag}</span>
                </span>
              ))}
            </div>
          )}
        </div>
        {ioMetrics.length > 0 && (
          <dl class="grid grid-cols-[repeat(auto-fit,minmax(72px,1fr))] gap-2">
            {ioMetrics.map((metric) => (
              <div
                key={metric.label}
                class="rounded-lg border bg-muted/30 px-2.5 py-2 text-center shadow-xs"
              >
                <dd class="text-lg font-semibold leading-tight text-foreground">{metric.value}</dd>
                <dt class="text-[10px] font-medium uppercase tracking-wide text-muted-foreground">{metric.label}</dt>
              </div>
            ))}
          </dl>
        )}
      </div>
    ) : (
      <div class="space-y-3">
        <div class="flex flex-wrap items-center justify-between gap-2 text-[10px] font-semibold uppercase tracking-wide text-muted-foreground">
          <div class="flex flex-wrap items-center gap-1.5">
            <span class="inline-flex items-center rounded-full border px-2 py-0.5 font-mono text-[11px] text-foreground">
              {mcuDisplay}
            </span>
            {mountingDisplay && (
              <span class="inline-flex items-center rounded-full border px-2 py-0.5 text-[11px] text-foreground">
                {mountingDisplay}
              </span>
            )}
          </div>
          {featureFlags.length > 0 && (
            <div class="flex flex-wrap items-center gap-1 text-[10px]">
              {featureFlags.map((flag, index) => (
                <span key={`${flag}-${index}`} class="inline-flex items-center gap-1">
                  {index > 0 && <span aria-hidden="true" class="opacity-60">/</span>}
                  <span class="text-foreground">{flag}</span>
                </span>
              ))}
            </div>
          )}
        </div>
        {ioMetrics.length > 0 && (
          <dl class="grid grid-cols-[repeat(auto-fit,minmax(90px,1fr))] gap-2 text-center text-[11px] uppercase tracking-wide text-muted-foreground">
            {ioMetrics.map((metric) => (
              <div key={metric.label} class="rounded-lg border bg-muted/20 px-3 py-2 shadow-xs">
                <dd class="text-xl font-semibold leading-tight text-foreground">{metric.value}</dd>
                <dt>{metric.label}</dt>
              </div>
            ))}
          </dl>
        )}
      </div>
    )}
  </Fragment>

  {!showImage && firmwareBadges.length > 0 && (
    <Fragment slot="badges">
      {firmwareBadges.map((label) => (
        <span
          key={label}
          class={`inline-flex items-center rounded-sm border font-semibold uppercase tracking-wide ${
            isCompact ? 'px-1.5 py-0.5 text-[9px]' : 'px-1.5 py-0.5 text-[10px]'
          }`}
        >
          {label}
        </span>
      ))}
    </Fragment>
  )}
</BaseCard>
