---
import type { ImageMetadata } from 'astro';
import BaseCard from './BaseCard.astro';

interface Props {
  id: string;
  title: string;
  manufacturer?: string;
  mcu: string;
  mounting?: string;
  uarts?: number;
  can?: number;
  pwm?: number;
  sdCard?: boolean;
  barometer?: boolean;
  firmwares?: string[];
  image?: {
    src: ImageMetadata | string;
    alt?: string;
    credit?: string;
    sourceUrl?: string;
    width?: number;
    height?: number;
  };
  basePath?: string;
  showImage?: boolean;
  variant: 'grid' | 'compact';
  class?: string;
}

const {
  id,
  title,
  manufacturer,
  mcu,
  mounting,
  uarts,
  can,
  pwm,
  sdCard,
  barometer,
  firmwares = [],
  image,
  basePath = '',
  variant: variantProp = 'grid',
  showImage: showImageProp = true,
  class: className,
} = Astro.props;

const variant = variantProp;
const isCompact = variant === 'compact';
const showImage = isCompact ? false : showImageProp;
const cardClass = isCompact ? 'p-4 sm:p-5' : undefined;

const mcuDisplay = mcu ? mcu.toUpperCase().replace(/^(STMICRO-|ATMEGA-)/, '') : 'UNKNOWN';
const mountingDisplay = mounting
  ? mounting === 'cube' || mounting === 'wing' || mounting === 'custom'
    ? mounting.charAt(0).toUpperCase() + mounting.slice(1)
    : mounting.replace('x', '×') + 'mm'
  : undefined;

const firmwareBadges = firmwares.map((firmware) => firmware.toUpperCase());
const href = `${basePath}/controllers/${id}`;
---
<BaseCard
  href={href}
  title={title}
  subtitle={manufacturer}
  image={image}
  showImage={showImage}
  showHeader={!showImage}
  cardClass={cardClass}
  class={className}
>
  {showImage && (
    <Fragment slot="imageOverlay">
      <div class="pointer-events-none relative h-full w-full">
        <div class="absolute inset-0 bg-gradient-to-t from-black/55 via-black/25 to-transparent" aria-hidden="true" />
        <div class="absolute top-2 left-2 max-w-[65%] space-y-1">
          <h3 class="rounded-sm border bg-background/95 px-2 py-1 text-sm font-bold leading-tight text-foreground shadow transition-colors group-hover:text-primary">
            {title}
          </h3>
          {manufacturer && (
            <p class="inline-flex rounded-sm border bg-background/95 px-2 py-0.5 text-xs font-medium text-muted-foreground shadow">
              {manufacturer}
            </p>
          )}
        </div>
        {firmwareBadges.length > 0 && (
          <div class="absolute top-2 right-2 flex flex-wrap justify-end gap-1.5">
            {firmwareBadges.map((label) => (
              <span class="inline-flex items-center rounded-sm border bg-background/95 px-2 py-0.5 text-[10px] font-bold uppercase tracking-wider shadow">
                {label}
              </span>
            ))}
          </div>
        )}
      </div>
    </Fragment>
  )}

  <Fragment slot="specs">
    {isCompact ? (
      <div class="space-y-2.5 text-[11px]">
        <div class="flex flex-wrap items-center justify-between gap-2">
          <div class="flex flex-wrap items-center gap-1.5">
            <span class="inline-flex items-center rounded-sm border px-1.5 py-0.5 text-[9px] font-mono font-semibold uppercase tracking-wide">
              {mcuDisplay}
            </span>
            {mountingDisplay && (
              <span class="inline-flex items-center rounded-sm border px-1.5 py-0.5 text-[9px] font-semibold uppercase tracking-wide">
                {mountingDisplay}
              </span>
            )}
          </div>
          <div class="flex items-center gap-2 text-[10px] text-muted-foreground">
            {sdCard && <span class="inline-flex items-center gap-1 leading-tight"><span class="text-xs">✓</span>SD</span>}
            {barometer && (
              <span class="inline-flex items-center gap-1 leading-tight">
                <span class="text-xs">✓</span>Baro
              </span>
            )}
          </div>
        </div>
        <div class="flex flex-wrap items-center gap-3 text-[11px]">
          {uarts !== undefined && (
            <span class="inline-flex items-baseline gap-1 font-semibold leading-tight">
              <span class="text-sm">{uarts}</span>
              <span class="text-[9px] uppercase tracking-wide text-muted-foreground">UART</span>
            </span>
          )}
          {can !== undefined && can > 0 && (
            <span class="inline-flex items-baseline gap-1 font-semibold leading-tight">
              <span class="text-sm">{can}</span>
              <span class="text-[9px] uppercase tracking-wide text-muted-foreground">CAN</span>
            </span>
          )}
          {pwm !== undefined && (
            <span class="inline-flex items-baseline gap-1 font-semibold leading-tight">
              <span class="text-sm">{pwm}</span>
              <span class="text-[9px] uppercase tracking-wide text-muted-foreground">PWM</span>
            </span>
          )}
        </div>
      </div>
    ) : (
      <>
        <div class="flex gap-1.5">
          <span class="inline-flex items-center rounded-sm border px-1.5 py-0.5 text-[10px] font-mono font-bold">
            {mcuDisplay}
          </span>
          {mountingDisplay && (
            <span class="inline-flex items-center rounded-sm border px-1.5 py-0.5 text-[10px] font-semibold">
              {mountingDisplay}
            </span>
          )}
        </div>
        <div class="flex items-center justify-between border-t pt-2 text-[11px]">
          <div class="flex gap-3">
            {uarts !== undefined && (
              <div class="text-center">
                <div class="font-bold">{uarts}</div>
                <div class="text-[9px] text-muted-foreground">UART</div>
              </div>
            )}
            {can !== undefined && can > 0 && (
              <div class="text-center">
                <div class="font-bold">{can}</div>
                <div class="text-[9px] text-muted-foreground">CAN</div>
              </div>
            )}
            {pwm !== undefined && (
              <div class="text-center">
                <div class="font-bold">{pwm}</div>
                <div class="text-[9px] text-muted-foreground">PWM</div>
              </div>
            )}
          </div>
          <div class="flex gap-2 text-[11px] text-muted-foreground">
            {sdCard && <span>✓ SD</span>}
            {barometer && <span>✓ Baro</span>}
          </div>
        </div>
      </>
    )}
  </Fragment>

  {!showImage && firmwareBadges.length > 0 && (
    <Fragment slot="badges">
      {firmwareBadges.map((label) => (
        <span
          key={label}
          class={`inline-flex items-center rounded-sm border font-bold uppercase tracking-wider ${
            isCompact ? 'px-1.5 py-0.5 text-[9px]' : 'px-2 py-0.5 text-[10px]'
          }`}
        >
          {label}
        </span>
      ))}
    </Fragment>
  )}
</BaseCard>
