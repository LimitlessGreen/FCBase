---
import type { ImageMetadata } from 'astro';
import { initCompareToggle } from '@/lib/compare-toggle';
import BaseCard from './BaseCard.astro';

interface Props {
  id: string;
  title: string;
  manufacturer?: string;
  mcu: string;
  mounting?: string;
  uarts?: number;
  can?: number;
  pwm?: number;
  sdCard?: boolean;
  barometer?: boolean;
  ethernet?: boolean;
  firmwares?: string[];
  image?: {
    src: ImageMetadata | string;
    alt?: string;
    credit?: string;
    sourceUrl?: string;
    width?: number;
    height?: number;
  };
  basePath?: string;
  showImage?: boolean;
  variant: 'grid' | 'compact';
  class?: string;
  compareId?: string;
  compareType?: 'controller' | 'transmitter';
  enableCompareToggle?: boolean;
}

const {
  id,
  title,
  manufacturer,
  mcu,
  mounting,
  uarts,
  can,
  pwm,
  sdCard,
  barometer,
  firmwares = [],
  ethernet,
  image,
  basePath = '',
  variant: variantProp = 'grid',
  showImage: showImageProp = true,
  class: className,
  compareId: compareIdProp,
  compareType: compareTypeProp = 'controller',
  enableCompareToggle = false,
} = Astro.props;

const variant = variantProp;
const isCompact = variant === 'compact';
const showImage = isCompact ? false : showImageProp;
const cardClass = isCompact ? 'p-3 sm:p-3.5' : 'pb-2';
const compareId = compareIdProp ?? id;
const compareType = compareTypeProp;
const shouldRenderCompare = enableCompareToggle && Boolean(compareId);
const compareToggleId = shouldRenderCompare
  ? `compare-${compareType}-${compareId}`
  : undefined;

const mcuDisplay = mcu ? mcu.toUpperCase().replace(/^(STMICRO-|ATMEGA-)/, '') : 'UNKNOWN';
const mountingDisplay = mounting
  ? mounting === 'cube' || mounting === 'wing' || mounting === 'custom'
    ? mounting.charAt(0).toUpperCase() + mounting.slice(1)
    : mounting.replace('x', 'Ã—') + 'mm'
  : undefined;

const firmwareBadges = firmwares.map((firmware) => firmware.toUpperCase());
const href = `${basePath}/controllers/${id}`;
const ioMetrics = [
  { label: 'UART', value: uarts },
  { label: 'CAN', value: can && can > 0 ? can : undefined },
  { label: 'PWM', value: pwm },
].filter((metric) => metric.value !== undefined);
const featureFlags = [
  sdCard ? 'SD' : null,
  barometer ? 'Baro' : null,
  ethernet ? 'Ethernet' : null,
].filter(Boolean);

const initCompareToggleSource = initCompareToggle.toString();
---
<div class="relative" data-compare-container={shouldRenderCompare ? compareId : undefined}>
  <BaseCard
    href={href}
    title={title}
    subtitle={manufacturer}
    image={image}
    showImage={showImage}
    showHeader={!showImage}
    cardClass={cardClass}
    class={`compare-card ${className ?? ''}`.trim()}
  >
  {showImage && (
    <Fragment slot="imageOverlay">
      <div class="pointer-events-none relative h-full w-full">
        <div class="absolute inset-0 bg-gradient-to-t from-black/60 via-black/30 to-transparent" aria-hidden="true" />
        <div class="absolute top-2 left-2 max-w-[70%] space-y-1">
          <h3 class="rounded-sm border bg-background/95 px-1.5 py-0.5 text-xs font-semibold leading-snug text-foreground shadow-sm transition-colors group-hover:text-primary">
            {title}
          </h3>
          {manufacturer && (
            <p class="inline-flex rounded-sm border bg-background/95 px-1.5 py-0.5 text-[11px] font-medium text-muted-foreground shadow-sm">
              {manufacturer}
            </p>
          )}
        </div>
        {firmwareBadges.length > 0 && (
          <div class="absolute bottom-2 left-2 flex flex-wrap gap-1.5">
            {firmwareBadges.map((label) => (
              <span class="inline-flex items-center rounded-sm border bg-background/95 px-1.5 py-0.5 text-[10px] font-semibold uppercase tracking-wide shadow-sm">
                {label}
              </span>
            ))}
          </div>
        )}
      </div>
    </Fragment>
  )}

  <Fragment slot="specs">
    {isCompact ? (
      <div class="space-y-0.5 text-[9px] leading-snug">
        <div class="flex flex-wrap items-center gap-1 text-[8px] font-semibold uppercase tracking-wide text-muted-foreground">
          <span class="inline-flex items-center rounded-sm border px-1 py-0.5 font-mono">
            {mcuDisplay}
          </span>
          {mountingDisplay && (
            <span class="inline-flex items-center rounded-sm border px-1 py-0.5">
              {mountingDisplay}
            </span>
          )}
        </div>

        <div class="h-px w-full bg-border/70" />

        <div class="flex flex-wrap items-start justify-between gap-0.5">
          {ioMetrics.length > 0 && (
            <dl class="flex flex-wrap gap-0.5">
              {ioMetrics.map((metric) => (
                <div key={metric.label} class="min-w-[30px] text-left">
                  <dd class="text-[10px] font-semibold leading-tight text-foreground text-center">{metric.value}</dd>
                  <dt class="text-[8px] uppercase tracking-wide text-muted-foreground text-left">{metric.label}</dt>
                </div>
              ))}
            </dl>
          )}

          {featureFlags.length > 0 && (
            <div class="flex flex-wrap justify-end gap-0.5">
              {featureFlags.map((flag) => (
                <span
                  key={flag}
                  class="inline-flex items-center gap-0.5 text-[7px] font-medium uppercase tracking-wide text-muted-foreground"
                >
                  <span aria-hidden="true" class="text-[8px] leading-none text-muted-foreground">ðŸ—¸</span>
                  {flag}
                </span>
              ))}
            </div>
          )}
        </div>
      </div>
    ) : (
      <div class={`space-y-1 text-[10px] leading-snug ${showImage ? 'mt-2.5' : ''}`}>
        <div class="flex flex-wrap items-center gap-1 text-[9px] font-semibold uppercase tracking-wide text-muted-foreground">
          <span class="inline-flex items-center rounded-sm border px-1 py-0.5 font-mono">
            {mcuDisplay}
          </span>
          {mountingDisplay && (
            <span class="inline-flex items-center rounded-sm border px-1 py-0.5">
              {mountingDisplay}
            </span>
          )}
        </div>

        <div class="h-px w-full bg-border/70" />

        <div class="flex flex-wrap items-start justify-between gap-1">
          {ioMetrics.length > 0 && (
            <dl class="flex flex-wrap gap-1">
              {ioMetrics.map((metric) => (
                <div key={metric.label} class="min-w-[40px] text-left">
                  <dd class="text-sm font-semibold leading-tight text-foreground text-center">{metric.value}</dd>
                  <dt class="text-[8px] uppercase tracking-wide text-muted-foreground text-left">{metric.label}</dt>
                </div>
              ))}
            </dl>
          )}

          {featureFlags.length > 0 && (
            <div class="flex flex-wrap justify-end gap-0.5">
              {featureFlags.map((flag) => (
                <span
                  key={flag}
                  class="inline-flex items-center gap-0.5 text-[8px] font-medium uppercase tracking-wide text-muted-foreground"
                >
                  <span aria-hidden="true" class="text-[10px] leading-none text-muted-foreground">ðŸ—¸</span>
                  {flag}
                </span>
              ))}
            </div>
          )}
        </div>
      </div>
    )}
  </Fragment>

  {!showImage && firmwareBadges.length > 0 && (
    <Fragment slot="badges">
      {firmwareBadges.map((label) => (
        <span
          key={label}
          class={`inline-flex items-center rounded-sm border font-semibold uppercase tracking-wide ${
            isCompact ? 'px-1.5 py-0.5 text-[9px]' : 'px-1.5 py-0.5 text-[10px]'
          }`}
        >
          {label}
        </span>
      ))}
    </Fragment>
  )}
  </BaseCard>

  {shouldRenderCompare && compareToggleId && (
    <div
      class="compare-toggle absolute right-2 top-2 z-20 flex items-center gap-1 rounded-full border border-border/70 bg-background/90 px-2 py-1 shadow-xs backdrop-blur supports-[backdrop-filter]:backdrop-blur-sm"
      data-compare-toggle-wrapper
    >
      <input
        id={compareToggleId}
        type="checkbox"
        class="h-3.5 w-3.5 rounded-sm border border-border/70 text-primary focus-visible:outline-hidden focus-visible:ring-2 focus-visible:ring-primary/40"
        data-compare-toggle={compareId}
        data-compare-type={compareType}
        aria-label="Add controller to comparison"
      />
      <label
        for={compareToggleId}
        class="text-[9px] font-semibold uppercase tracking-wide text-muted-foreground"
      >
        Compare
      </label>
    </div>
  )}

  {shouldRenderCompare && (
    <script
      is:inline
      data-compare-id={compareId}
      data-compare-type={compareType}
      data-compare-event-name="fcbase:compare-change"
    >
      (() => {
        const scriptEl = document.currentScript;
        if (!(scriptEl instanceof HTMLScriptElement)) {
          return;
        }

        const compareId = scriptEl.dataset.compareId;
        const compareType = scriptEl.dataset.compareType || 'controller';
        const eventName = scriptEl.dataset.compareEventName || undefined;
        const storageKey = scriptEl.dataset.compareStorageKey || undefined;
        const legacyStorageKey = scriptEl.dataset.compareLegacyKey;
        const container = scriptEl.parentElement;

        if (!compareId || !(container instanceof HTMLElement)) {
          return;
        }

        const initCompareToggle = ${initCompareToggleSource};
        initCompareToggle({
          compareId,
          compareType,
          root: container,
          eventName,
          storageKey,
          legacyStorageKey: legacyStorageKey || undefined,
        });
      })();
    </script>
  )}
</div>
